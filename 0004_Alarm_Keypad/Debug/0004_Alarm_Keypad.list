
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dec  08007dec  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df4  08007df4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005068  20000068  08007e64  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d0  08007e64  000250d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c561  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c3f  00000000  00000000  0003c63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  00040280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001305  00000000  00000000  00041ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002475c  00000000  00000000  00042dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d757  00000000  00000000  00067529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de62f  00000000  00000000  00084c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006aa4  00000000  00000000  001632b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00169d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006f6c 	.word	0x08006f6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006f6c 	.word	0x08006f6c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b970 	b.w	800052c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d965      	bls.n	8000346 <__udivmoddi4+0xe2>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa20 f202 	lsr.w	r2, r0, r2
 800028e:	4317      	orrs	r7, r2
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	fbb7 f1fe 	udiv	r1, r7, lr
 800029e:	0c22      	lsrs	r2, r4, #16
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a8:	fb01 f005 	mul.w	r0, r1, r5
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	f080 811c 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8119 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	fb00 f505 	mul.w	r5, r0, r5
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x294>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x294>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xbc>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ed 	beq.w	80004ee <__udivmoddi4+0x28a>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d149      	bne.n	80003bc <__udivmoddi4+0x158>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xce>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4617      	mov	r7, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000340:	e9c6 4700 	strd	r4, r7, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa2>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xe6>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x210>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035a:	fa1f fe8c 	uxth.w	lr, ip
 800035e:	2101      	movs	r1, #1
 8000360:	fbb2 f5f7 	udiv	r5, r2, r7
 8000364:	fb07 2015 	mls	r0, r7, r5, r2
 8000368:	0c22      	lsrs	r2, r4, #16
 800036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036e:	fb0e f005 	mul.w	r0, lr, r5
 8000372:	4290      	cmp	r0, r2
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x124>
 8000376:	eb1c 0202 	adds.w	r2, ip, r2
 800037a:	f105 38ff 	add.w	r8, r5, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4290      	cmp	r0, r2
 8000382:	f200 80cb 	bhi.w	800051c <__udivmoddi4+0x2b8>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000398:	fb0e fe00 	mul.w	lr, lr, r0
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f200 80bb 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	eba4 040e 	sub.w	r4, r4, lr
 80003b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ba:	e79f      	b.n	80002fc <__udivmoddi4+0x98>
 80003bc:	f1c1 0720 	rsb	r7, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa05 f401 	lsl.w	r4, r5, r1
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	40fd      	lsrs	r5, r7
 80003d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fbb5 f8f9 	udiv	r8, r5, r9
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fb09 5518 	mls	r5, r9, r8, r5
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb08 f50e 	mul.w	r5, r8, lr
 80003f0:	42a5      	cmp	r5, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	fa00 f001 	lsl.w	r0, r0, r1
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f108 3aff 	add.w	sl, r8, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	42a5      	cmp	r5, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a8 0802 	sub.w	r8, r8, #2
 8000412:	4464      	add	r4, ip
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	b29d      	uxth	r5, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	fb03 fe0e 	mul.w	lr, r3, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f103 35ff 	add.w	r5, r3, #4294967295
 8000434:	d26c      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000436:	45a6      	cmp	lr, r4
 8000438:	d96a      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043a:	3b02      	subs	r3, #2
 800043c:	4464      	add	r4, ip
 800043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000442:	fba3 9502 	umull	r9, r5, r3, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	42ac      	cmp	r4, r5
 800044c:	46c8      	mov	r8, r9
 800044e:	46ae      	mov	lr, r5
 8000450:	d356      	bcc.n	8000500 <__udivmoddi4+0x29c>
 8000452:	d053      	beq.n	80004fc <__udivmoddi4+0x298>
 8000454:	b156      	cbz	r6, 800046c <__udivmoddi4+0x208>
 8000456:	ebb0 0208 	subs.w	r2, r0, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	fa04 f707 	lsl.w	r7, r4, r7
 8000462:	40ca      	lsrs	r2, r1
 8000464:	40cc      	lsrs	r4, r1
 8000466:	4317      	orrs	r7, r2
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	4618      	mov	r0, r3
 800046e:	2100      	movs	r1, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	f1c3 0120 	rsb	r1, r3, #32
 8000478:	fa02 fc03 	lsl.w	ip, r2, r3
 800047c:	fa20 f201 	lsr.w	r2, r0, r1
 8000480:	fa25 f101 	lsr.w	r1, r5, r1
 8000484:	409d      	lsls	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1510 	mls	r5, r7, r0, r1
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	fb00 f50e 	mul.w	r5, r0, lr
 80004a2:	428d      	cmp	r5, r1
 80004a4:	fa04 f403 	lsl.w	r4, r4, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x258>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b2:	d22f      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	428d      	cmp	r5, r1
 80004b6:	d92d      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1b49      	subs	r1, r1, r5
 80004be:	b292      	uxth	r2, r2
 80004c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c4:	fb07 1115 	mls	r1, r7, r5, r1
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	fb05 f10e 	mul.w	r1, r5, lr
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x282>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004dc:	d216      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004de:	4291      	cmp	r1, r2
 80004e0:	d914      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004e2:	3d02      	subs	r5, #2
 80004e4:	4462      	add	r2, ip
 80004e6:	1a52      	subs	r2, r2, r1
 80004e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ec:	e738      	b.n	8000360 <__udivmoddi4+0xfc>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xa2>
 80004f4:	4639      	mov	r1, r7
 80004f6:	e6e6      	b.n	80002c6 <__udivmoddi4+0x62>
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x90>
 80004fc:	4548      	cmp	r0, r9
 80004fe:	d2a9      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 8000500:	ebb9 0802 	subs.w	r8, r9, r2
 8000504:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000508:	3b01      	subs	r3, #1
 800050a:	e7a3      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050c:	4645      	mov	r5, r8
 800050e:	e7ea      	b.n	80004e6 <__udivmoddi4+0x282>
 8000510:	462b      	mov	r3, r5
 8000512:	e794      	b.n	800043e <__udivmoddi4+0x1da>
 8000514:	4640      	mov	r0, r8
 8000516:	e7d1      	b.n	80004bc <__udivmoddi4+0x258>
 8000518:	46d0      	mov	r8, sl
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e732      	b.n	8000388 <__udivmoddi4+0x124>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xd8>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e742      	b.n	80003b2 <__udivmoddi4+0x14e>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	int done=1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	while(done)
 800053a:	e19b      	b.n	8000874 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000542:	48b3      	ldr	r0, [pc, #716]	; (8000810 <Get_Key+0x2e0>)
 8000544:	f001 fc1e 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	48b0      	ldr	r0, [pc, #704]	; (8000810 <Get_Key+0x2e0>)
 800054e:	f001 fc19 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	48ae      	ldr	r0, [pc, #696]	; (8000810 <Get_Key+0x2e0>)
 8000558:	f001 fc14 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	48ab      	ldr	r0, [pc, #684]	; (8000810 <Get_Key+0x2e0>)
 8000562:	f001 fc0f 	bl	8001d84 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a9      	ldr	r0, [pc, #676]	; (8000810 <Get_Key+0x2e0>)
 800056a:	f001 fbf3 	bl	8001d54 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000574:	bf00      	nop
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	48a5      	ldr	r0, [pc, #660]	; (8000810 <Get_Key+0x2e0>)
 800057a:	f001 fbeb 	bl	8001d54 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f8      	bne.n	8000576 <Get_Key+0x46>
		key='1';
 8000584:	4ba3      	ldr	r3, [pc, #652]	; (8000814 <Get_Key+0x2e4>)
 8000586:	2231      	movs	r2, #49	; 0x31
 8000588:	701a      	strb	r2, [r3, #0]
		break;
 800058a:	e177      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	48a2      	ldr	r0, [pc, #648]	; (8000818 <Get_Key+0x2e8>)
 8000590:	f001 fbe0 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800059a:	bf00      	nop
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	489e      	ldr	r0, [pc, #632]	; (8000818 <Get_Key+0x2e8>)
 80005a0:	f001 fbd8 	bl	8001d54 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f8      	bne.n	800059c <Get_Key+0x6c>
		key='4';
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <Get_Key+0x2e4>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	701a      	strb	r2, [r3, #0]
		break;
 80005b0:	e164      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4899      	ldr	r0, [pc, #612]	; (800081c <Get_Key+0x2ec>)
 80005b8:	f001 fbcc 	bl	8001d54 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005c2:	bf00      	nop
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4894      	ldr	r0, [pc, #592]	; (800081c <Get_Key+0x2ec>)
 80005ca:	f001 fbc3 	bl	8001d54 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f7      	bne.n	80005c4 <Get_Key+0x94>
		key='7';
 80005d4:	4b8f      	ldr	r3, [pc, #572]	; (8000814 <Get_Key+0x2e4>)
 80005d6:	2237      	movs	r2, #55	; 0x37
 80005d8:	701a      	strb	r2, [r3, #0]
		break;
 80005da:	e14f      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	488e      	ldr	r0, [pc, #568]	; (800081c <Get_Key+0x2ec>)
 80005e2:	f001 fbb7 	bl	8001d54 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005ec:	bf00      	nop
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	488a      	ldr	r0, [pc, #552]	; (800081c <Get_Key+0x2ec>)
 80005f4:	f001 fbae 	bl	8001d54 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <Get_Key+0xbe>
		key='*';
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <Get_Key+0x2e4>)
 8000600:	222a      	movs	r2, #42	; 0x2a
 8000602:	701a      	strb	r2, [r3, #0]
		break;
 8000604:	e13a      	b.n	800087c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4880      	ldr	r0, [pc, #512]	; (8000810 <Get_Key+0x2e0>)
 800060e:	f001 fbb9 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	487e      	ldr	r0, [pc, #504]	; (8000810 <Get_Key+0x2e0>)
 8000618:	f001 fbb4 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	487b      	ldr	r0, [pc, #492]	; (8000810 <Get_Key+0x2e0>)
 8000622:	f001 fbaf 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	4879      	ldr	r0, [pc, #484]	; (8000810 <Get_Key+0x2e0>)
 800062c:	f001 fbaa 	bl	8001d84 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4877      	ldr	r0, [pc, #476]	; (8000810 <Get_Key+0x2e0>)
 8000634:	f001 fb8e 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00b      	beq.n	8000656 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800063e:	bf00      	nop
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4873      	ldr	r0, [pc, #460]	; (8000810 <Get_Key+0x2e0>)
 8000644:	f001 fb86 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f8      	bne.n	8000640 <Get_Key+0x110>
		key='2';
 800064e:	4b71      	ldr	r3, [pc, #452]	; (8000814 <Get_Key+0x2e4>)
 8000650:	2232      	movs	r2, #50	; 0x32
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e112      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	486f      	ldr	r0, [pc, #444]	; (8000818 <Get_Key+0x2e8>)
 800065a:	f001 fb7b 	bl	8001d54 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000664:	bf00      	nop
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	486b      	ldr	r0, [pc, #428]	; (8000818 <Get_Key+0x2e8>)
 800066a:	f001 fb73 	bl	8001d54 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f8      	bne.n	8000666 <Get_Key+0x136>
		key='5';
 8000674:	4b67      	ldr	r3, [pc, #412]	; (8000814 <Get_Key+0x2e4>)
 8000676:	2235      	movs	r2, #53	; 0x35
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e0ff      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4866      	ldr	r0, [pc, #408]	; (800081c <Get_Key+0x2ec>)
 8000682:	f001 fb67 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800068c:	bf00      	nop
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4862      	ldr	r0, [pc, #392]	; (800081c <Get_Key+0x2ec>)
 8000694:	f001 fb5e 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f7      	bne.n	800068e <Get_Key+0x15e>
		key='8';
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <Get_Key+0x2e4>)
 80006a0:	2238      	movs	r2, #56	; 0x38
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e0ea      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	485c      	ldr	r0, [pc, #368]	; (800081c <Get_Key+0x2ec>)
 80006ac:	f001 fb52 	bl	8001d54 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00c      	beq.n	80006d0 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006b6:	bf00      	nop
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4857      	ldr	r0, [pc, #348]	; (800081c <Get_Key+0x2ec>)
 80006be:	f001 fb49 	bl	8001d54 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f7      	bne.n	80006b8 <Get_Key+0x188>
		key='0';
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <Get_Key+0x2e4>)
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	701a      	strb	r2, [r3, #0]
		break;
 80006ce:	e0d5      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	484e      	ldr	r0, [pc, #312]	; (8000810 <Get_Key+0x2e0>)
 80006d8:	f001 fb54 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <Get_Key+0x2e0>)
 80006e2:	f001 fb4f 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4849      	ldr	r0, [pc, #292]	; (8000810 <Get_Key+0x2e0>)
 80006ec:	f001 fb4a 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4846      	ldr	r0, [pc, #280]	; (8000810 <Get_Key+0x2e0>)
 80006f6:	f001 fb45 	bl	8001d84 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4844      	ldr	r0, [pc, #272]	; (8000810 <Get_Key+0x2e0>)
 80006fe:	f001 fb29 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000708:	bf00      	nop
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <Get_Key+0x2e0>)
 800070e:	f001 fb21 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f8      	bne.n	800070a <Get_Key+0x1da>
		key='3';
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <Get_Key+0x2e4>)
 800071a:	2233      	movs	r2, #51	; 0x33
 800071c:	701a      	strb	r2, [r3, #0]
		break;
 800071e:	e0ad      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	483d      	ldr	r0, [pc, #244]	; (8000818 <Get_Key+0x2e8>)
 8000724:	f001 fb16 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00b      	beq.n	8000746 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800072e:	bf00      	nop
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4839      	ldr	r0, [pc, #228]	; (8000818 <Get_Key+0x2e8>)
 8000734:	f001 fb0e 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <Get_Key+0x200>
		key='6';
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <Get_Key+0x2e4>)
 8000740:	2236      	movs	r2, #54	; 0x36
 8000742:	701a      	strb	r2, [r3, #0]
		break;
 8000744:	e09a      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <Get_Key+0x2ec>)
 800074c:	f001 fb02 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00c      	beq.n	8000770 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000756:	bf00      	nop
 8000758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075c:	482f      	ldr	r0, [pc, #188]	; (800081c <Get_Key+0x2ec>)
 800075e:	f001 faf9 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f7      	bne.n	8000758 <Get_Key+0x228>
		key='9';
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <Get_Key+0x2e4>)
 800076a:	2239      	movs	r2, #57	; 0x39
 800076c:	701a      	strb	r2, [r3, #0]
		break;
 800076e:	e085      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <Get_Key+0x2ec>)
 8000776:	f001 faed 	bl	8001d54 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000780:	bf00      	nop
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <Get_Key+0x2ec>)
 8000788:	f001 fae4 	bl	8001d54 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f7      	bne.n	8000782 <Get_Key+0x252>
		key='#';
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <Get_Key+0x2e4>)
 8000794:	2223      	movs	r2, #35	; 0x23
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	e070      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <Get_Key+0x2e0>)
 80007a2:	f001 faef 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80007a6:	2200      	movs	r2, #0
 80007a8:	2110      	movs	r1, #16
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <Get_Key+0x2e0>)
 80007ac:	f001 faea 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <Get_Key+0x2e0>)
 80007b6:	f001 fae5 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <Get_Key+0x2e0>)
 80007c0:	f001 fae0 	bl	8001d84 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <Get_Key+0x2e0>)
 80007c8:	f001 fac4 	bl	8001d54 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00b      	beq.n	80007ea <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007d2:	bf00      	nop
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <Get_Key+0x2e0>)
 80007d8:	f001 fabc 	bl	8001d54 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f8      	bne.n	80007d4 <Get_Key+0x2a4>
		key='A';
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <Get_Key+0x2e4>)
 80007e4:	2241      	movs	r2, #65	; 0x41
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e048      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <Get_Key+0x2e8>)
 80007ee:	f001 fab1 	bl	8001d54 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d013      	beq.n	8000820 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007f8:	bf00      	nop
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <Get_Key+0x2e8>)
 80007fe:	f001 faa9 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f8      	bne.n	80007fa <Get_Key+0x2ca>
		key='B';
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <Get_Key+0x2e4>)
 800080a:	2242      	movs	r2, #66	; 0x42
 800080c:	701a      	strb	r2, [r3, #0]
		break;
 800080e:	e035      	b.n	800087c <Get_Key+0x34c>
 8000810:	40020400 	.word	0x40020400
 8000814:	20000084 	.word	0x20000084
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <Get_Key+0x360>)
 8000826:	f001 fa95 	bl	8001d54 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00c      	beq.n	800084a <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000830:	bf00      	nop
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <Get_Key+0x360>)
 8000838:	f001 fa8c 	bl	8001d54 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f7      	bne.n	8000832 <Get_Key+0x302>
		key='C';
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <Get_Key+0x364>)
 8000844:	2243      	movs	r2, #67	; 0x43
 8000846:	701a      	strb	r2, [r3, #0]
		break;
 8000848:	e018      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <Get_Key+0x360>)
 8000850:	f001 fa80 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800085a:	bf00      	nop
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <Get_Key+0x360>)
 8000862:	f001 fa77 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f7      	bne.n	800085c <Get_Key+0x32c>
		key='D';
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <Get_Key+0x364>)
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	701a      	strb	r2, [r3, #0]
		break;
 8000872:	e003      	b.n	800087c <Get_Key+0x34c>
	while(done)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f47f ae60 	bne.w	800053c <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800087c:	2120      	movs	r1, #32
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <Get_Key+0x360>)
 8000880:	f001 fa99 	bl	8001db6 <HAL_GPIO_TogglePin>
	return(key);
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <Get_Key+0x364>)
 8000886:	781b      	ldrb	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020000 	.word	0x40020000
 8000894:	20000084 	.word	0x20000084

08000898 <replaceCharsWithAsterisks>:
/**
 * @brief  The application entry point.
 * @retval int
 */

char* replaceCharsWithAsterisks(const char* input, int size) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
   // Allocate memory for the new array (+1 for the null terminator)
   char* result = (char*)malloc((size + 1) * sizeof(char));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 f9a8 	bl	8006bfc <malloc>
 80008ac:	4603      	mov	r3, r0
 80008ae:	60bb      	str	r3, [r7, #8]
   // Replace each char with an asterisk
   for (int i = 0; i < size; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e007      	b.n	80008c6 <replaceCharsWithAsterisks+0x2e>
       result[i] = '*';
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	4413      	add	r3, r2
 80008bc:	222a      	movs	r2, #42	; 0x2a
 80008be:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < size; i++) {
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf3      	blt.n	80008b6 <replaceCharsWithAsterisks+0x1e>
   }

   // Add null terminator at the end
   result[size] = '\0';
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

   return result;
 80008d8:	68bb      	ldr	r3, [r7, #8]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <main>:



int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 ff58 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f85e 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 f922 	bl	8000b38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f4:	f000 f8f6 	bl	8000ae4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008f8:	f000 f8c6 	bl	8000a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80008fc:	f000 fabc 	bl	8000e78 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fc22 	bl	800114c <SSD1306_GotoXY>
  // SSD1306_Puts ("Voltage:", &Font_11x18, 1);
  SSD1306_Puts("Enter Code:", &Font_11x18, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	491a      	ldr	r1, [pc, #104]	; (8000974 <main+0x90>)
 800090c:	481a      	ldr	r0, [pc, #104]	; (8000978 <main+0x94>)
 800090e:	f000 fcb3 	bl	8001278 <SSD1306_Puts>
  SSD1306_GotoXY(0, 30);
 8000912:	211e      	movs	r1, #30
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fc19 	bl	800114c <SSD1306_GotoXY>
  SSD1306_UpdateScreen();
 800091a:	f000 fb71 	bl	8001000 <SSD1306_UpdateScreen>
  SSD1306_UpdateScreen();
 800091e:	f000 fb6f 	bl	8001000 <SSD1306_UpdateScreen>
  HAL_Delay(500);
 8000922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000926:	f000 ff7b 	bl	8001820 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800092a:	f003 fbef 	bl	800410c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <main+0x98>)
 8000930:	2100      	movs	r1, #0
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <main+0x9c>)
 8000934:	f003 fc34 	bl	80041a0 <osThreadNew>
 8000938:	4603      	mov	r3, r0
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <main+0xa0>)
 800093c:	6013      	str	r3, [r2, #0]

  /* creation of TaskKeypad */
  TaskKeypadHandle = osThreadNew(StartTaskKeypad, NULL, &TaskKeypad_attributes);
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <main+0xa4>)
 8000940:	2100      	movs	r1, #0
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <main+0xa8>)
 8000944:	f003 fc2c 	bl	80041a0 <osThreadNew>
 8000948:	4603      	mov	r3, r0
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <main+0xac>)
 800094c:	6013      	str	r3, [r2, #0]

  /* creation of TaskDisplay */
  TaskDisplayHandle = osThreadNew(StartTaskDisplay, NULL, &TaskDisplay_attributes);
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <main+0xb0>)
 8000950:	2100      	movs	r1, #0
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <main+0xb4>)
 8000954:	f003 fc24 	bl	80041a0 <osThreadNew>
 8000958:	4603      	mov	r3, r0
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <main+0xb8>)
 800095c:	6013      	str	r3, [r2, #0]

  /* creation of TaskLED */
  TaskLEDHandle = osThreadNew(StartTaskLED, NULL, &TaskLED_attributes);
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <main+0xbc>)
 8000960:	2100      	movs	r1, #0
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <main+0xc0>)
 8000964:	f003 fc1c 	bl	80041a0 <osThreadNew>
 8000968:	4603      	mov	r3, r0
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <main+0xc4>)
 800096c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800096e:	f003 fbf1 	bl	8004154 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000972:	e7fe      	b.n	8000972 <main+0x8e>
 8000974:	20000000 	.word	0x20000000
 8000978:	08006fb0 	.word	0x08006fb0
 800097c:	08007d44 	.word	0x08007d44
 8000980:	08000c71 	.word	0x08000c71
 8000984:	20000124 	.word	0x20000124
 8000988:	08007d68 	.word	0x08007d68
 800098c:	08000c81 	.word	0x08000c81
 8000990:	20000128 	.word	0x20000128
 8000994:	08007d8c 	.word	0x08007d8c
 8000998:	08000d79 	.word	0x08000d79
 800099c:	2000012c 	.word	0x2000012c
 80009a0:	08007db0 	.word	0x08007db0
 80009a4:	08000df5 	.word	0x08000df5
 80009a8:	20000130 	.word	0x20000130

080009ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f006 f9d2 	bl	8006d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <SystemClock_Config+0xd4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <SystemClock_Config+0xd4>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <SystemClock_Config+0xd4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <SystemClock_Config+0xd8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f8:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <SystemClock_Config+0xd8>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a14:	2310      	movs	r3, #16
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a20:	2310      	movs	r3, #16
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fb1e 	bl	800307c <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a46:	f000 fa11 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	2102      	movs	r1, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 ff8c 	bl	8002984 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a72:	f000 f9fb 	bl	8000e6c <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	; 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f001 f991 	bl	8001dec <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 f9cc 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00061a80 	.word	0x00061a80

08000ae4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f002 ffee 	bl	8003afc <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 f9a1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000dc 	.word	0x200000dc
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a42      	ldr	r2, [pc, #264]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a3b      	ldr	r2, [pc, #236]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a34      	ldr	r2, [pc, #208]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_GPIO_Init+0x128>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	21e0      	movs	r1, #224	; 0xe0
 8000bc2:	4828      	ldr	r0, [pc, #160]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000bc4:	f001 f8de 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin | GPIO_PIN_13 | GPIO_PIN_14 | KC3_Pin | KC1_Pin | KC2_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f246 4138 	movw	r1, #25656	; 0x6438
 8000bce:	4826      	ldr	r0, [pc, #152]	; (8000c68 <MX_GPIO_Init+0x130>)
 8000bd0:	f001 f8d8 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000bd4:	23e0      	movs	r3, #224	; 0xe0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000bec:	f000 ff1e 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin | GPIO_PIN_13 | GPIO_PIN_14 | KC3_Pin | KC1_Pin | KC2_Pin;
 8000bf0:	f246 4338 	movw	r3, #25656	; 0x6438
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4817      	ldr	r0, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x130>)
 8000c0a:	f000 ff0f 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4812      	ldr	r0, [pc, #72]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000c22:	f000 ff03 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin | KR2_Pin;
 8000c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480a      	ldr	r0, [pc, #40]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000c3c:	f000 fef6 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c40:	2340      	movs	r3, #64	; 0x40
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0x130>)
 8000c54:	f000 feea 	bl	8001a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020800 	.word	0x40020800

08000c70 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f003 fb23 	bl	80042c4 <osDelay>
 8000c7e:	e7fb      	b.n	8000c78 <StartDefaultTask+0x8>

08000c80 <StartTaskKeypad>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskKeypad */
void StartTaskKeypad(void *argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskKeypad */
  /* Infinite loop */
  for (;;)
  {
	 if(codeSet == false){
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <StartTaskKeypad+0xe0>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d032      	beq.n	8000cfc <StartTaskKeypad+0x7c>
	   key = Get_Key();
 8000c96:	f7ff fc4b 	bl	8000530 <Get_Key>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <StartTaskKeypad+0xe4>)
 8000ca0:	701a      	strb	r2, [r3, #0]
	   length++;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <StartTaskKeypad+0xe8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <StartTaskKeypad+0xe8>)
 8000caa:	6013      	str	r3, [r2, #0]
	   if (key == '#' && (strlen(temp) == 4 || strlen(temp) == 6))
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <StartTaskKeypad+0xe4>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b23      	cmp	r3, #35	; 0x23
 8000cb2:	d11e      	bne.n	8000cf2 <StartTaskKeypad+0x72>
 8000cb4:	482d      	ldr	r0, [pc, #180]	; (8000d6c <StartTaskKeypad+0xec>)
 8000cb6:	f7ff fab5 	bl	8000224 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d005      	beq.n	8000ccc <StartTaskKeypad+0x4c>
 8000cc0:	482a      	ldr	r0, [pc, #168]	; (8000d6c <StartTaskKeypad+0xec>)
 8000cc2:	f7ff faaf 	bl	8000224 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d112      	bne.n	8000cf2 <StartTaskKeypad+0x72>
	   {
		 strcat(code, temp);
 8000ccc:	4927      	ldr	r1, [pc, #156]	; (8000d6c <StartTaskKeypad+0xec>)
 8000cce:	4828      	ldr	r0, [pc, #160]	; (8000d70 <StartTaskKeypad+0xf0>)
 8000cd0:	f006 f850 	bl	8006d74 <strcat>
		 armed = true;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <StartTaskKeypad+0xf4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
		 codeSet = true;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <StartTaskKeypad+0xe0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
		 memset(temp, '\0', sizeof(temp));
 8000ce0:	2206      	movs	r2, #6
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4821      	ldr	r0, [pc, #132]	; (8000d6c <StartTaskKeypad+0xec>)
 8000ce6:	f006 f83d 	bl	8006d64 <memset>
		 length = 0;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <StartTaskKeypad+0xe8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e032      	b.n	8000d58 <StartTaskKeypad+0xd8>
	   } else
	   {
		 strcat(temp, &key);
 8000cf2:	491c      	ldr	r1, [pc, #112]	; (8000d64 <StartTaskKeypad+0xe4>)
 8000cf4:	481d      	ldr	r0, [pc, #116]	; (8000d6c <StartTaskKeypad+0xec>)
 8000cf6:	f006 f83d 	bl	8006d74 <strcat>
 8000cfa:	e02d      	b.n	8000d58 <StartTaskKeypad+0xd8>
	   }
	 } else {
		key = Get_Key();
 8000cfc:	f7ff fc18 	bl	8000530 <Get_Key>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <StartTaskKeypad+0xe4>)
 8000d06:	701a      	strb	r2, [r3, #0]
		length++;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <StartTaskKeypad+0xe8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <StartTaskKeypad+0xe8>)
 8000d10:	6013      	str	r3, [r2, #0]
		if (key == '#'){
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <StartTaskKeypad+0xe4>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b23      	cmp	r3, #35	; 0x23
 8000d18:	d11a      	bne.n	8000d50 <StartTaskKeypad+0xd0>
		  if (0 == strcmp(code, temp))
 8000d1a:	4914      	ldr	r1, [pc, #80]	; (8000d6c <StartTaskKeypad+0xec>)
 8000d1c:	4814      	ldr	r0, [pc, #80]	; (8000d70 <StartTaskKeypad+0xf0>)
 8000d1e:	f7ff fa77 	bl	8000210 <strcmp>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10a      	bne.n	8000d3e <StartTaskKeypad+0xbe>
		  {
			if (armed == true){
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <StartTaskKeypad+0xf4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <StartTaskKeypad+0xb8>
				armed = false;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <StartTaskKeypad+0xf4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	e002      	b.n	8000d3e <StartTaskKeypad+0xbe>
			} else {
				armed = true;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <StartTaskKeypad+0xf4>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			}
		  }
		  memset(temp, '\0', sizeof(temp));
 8000d3e:	2206      	movs	r2, #6
 8000d40:	2100      	movs	r1, #0
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <StartTaskKeypad+0xec>)
 8000d44:	f006 f80e 	bl	8006d64 <memset>
          length = 0;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <StartTaskKeypad+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e003      	b.n	8000d58 <StartTaskKeypad+0xd8>
		}
		else
		{
		  strcat(temp, &key);
 8000d50:	4904      	ldr	r1, [pc, #16]	; (8000d64 <StartTaskKeypad+0xe4>)
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <StartTaskKeypad+0xec>)
 8000d54:	f006 f80e 	bl	8006d74 <strcat>
		}
	  }
	 osDelay(100);
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	f003 fab3 	bl	80042c4 <osDelay>
	 if(codeSet == false){
 8000d5e:	e793      	b.n	8000c88 <StartTaskKeypad+0x8>
 8000d60:	20000142 	.word	0x20000142
 8000d64:	20000084 	.word	0x20000084
 8000d68:	20000144 	.word	0x20000144
 8000d6c:	20000134 	.word	0x20000134
 8000d70:	2000013c 	.word	0x2000013c
 8000d74:	20000143 	.word	0x20000143

08000d78 <StartTaskDisplay>:
 * @retval None
 */
/* USER CODE END Header_StartTaskDisplay */

void StartTaskDisplay(void *argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDisplay */
  /* Infinite loop */
  for (;;)
  {
	SSD1306_Clear();
 8000d80:	f000 fa9f 	bl	80012c2 <SSD1306_Clear>
    SSD1306_GotoXY (0,0);
 8000d84:	2100      	movs	r1, #0
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f9e0 	bl	800114c <SSD1306_GotoXY>
	 if (armed)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <StartTaskDisplay+0x64>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <StartTaskDisplay+0x28>
	{
	  SSD1306_Puts ("ARMED:", &Font_11x18, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	4912      	ldr	r1, [pc, #72]	; (8000de0 <StartTaskDisplay+0x68>)
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <StartTaskDisplay+0x6c>)
 8000d9a:	f000 fa6d 	bl	8001278 <SSD1306_Puts>
 8000d9e:	e004      	b.n	8000daa <StartTaskDisplay+0x32>
	}
	else
	{
	  SSD1306_Puts ("NOT ARMED:", &Font_11x18, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	490f      	ldr	r1, [pc, #60]	; (8000de0 <StartTaskDisplay+0x68>)
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <StartTaskDisplay+0x70>)
 8000da6:	f000 fa67 	bl	8001278 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8000daa:	f000 f929 	bl	8001000 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (0, 30);
 8000dae:	211e      	movs	r1, #30
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f9cb 	bl	800114c <SSD1306_GotoXY>
	char *result = replaceCharsWithAsterisks(temp, length);
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <StartTaskDisplay+0x74>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <StartTaskDisplay+0x78>)
 8000dbe:	f7ff fd6b 	bl	8000898 <replaceCharsWithAsterisks>
 8000dc2:	60f8      	str	r0, [r7, #12]
	SSD1306_Puts (result, &Font_11x18, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4906      	ldr	r1, [pc, #24]	; (8000de0 <StartTaskDisplay+0x68>)
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f000 fa55 	bl	8001278 <SSD1306_Puts>
	SSD1306_UpdateScreen();            // Update the screen to show the masked password
 8000dce:	f000 f917 	bl	8001000 <SSD1306_UpdateScreen>
    osDelay(1000);                      // Delay
 8000dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd6:	f003 fa75 	bl	80042c4 <osDelay>
  {
 8000dda:	e7d1      	b.n	8000d80 <StartTaskDisplay+0x8>
 8000ddc:	20000143 	.word	0x20000143
 8000de0:	20000000 	.word	0x20000000
 8000de4:	08006fbc 	.word	0x08006fbc
 8000de8:	08006fc4 	.word	0x08006fc4
 8000dec:	20000144 	.word	0x20000144
 8000df0:	20000134 	.word	0x20000134

08000df4 <StartTaskLED>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskLED */
void StartTaskLED(void *argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED */
  /* Infinite loop */
  for (;;)
  {
	  if (armed == true)
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <StartTaskLED+0x4c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00c      	beq.n	8000e1e <StartTaskLED+0x2a>
		{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <StartTaskLED+0x50>)
 8000e0c:	f000 ffba 	bl	8001d84 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <StartTaskLED+0x50>)
 8000e18:	f000 ffb4 	bl	8001d84 <HAL_GPIO_WritePin>
 8000e1c:	e00b      	b.n	8000e36 <StartTaskLED+0x42>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <StartTaskLED+0x50>)
 8000e26:	f000 ffad 	bl	8001d84 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <StartTaskLED+0x50>)
 8000e32:	f000 ffa7 	bl	8001d84 <HAL_GPIO_WritePin>
		}
	  osDelay(100);
 8000e36:	2064      	movs	r0, #100	; 0x64
 8000e38:	f003 fa44 	bl	80042c4 <osDelay>
	  if (armed == true)
 8000e3c:	e7de      	b.n	8000dfc <StartTaskLED+0x8>
 8000e3e:	bf00      	nop
 8000e40:	20000143 	.word	0x20000143
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e5a:	f000 fcc1 	bl	80017e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40001000 	.word	0x40001000

08000e6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e7e:	f000 fa29 	bl	80012d4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e86:	2201      	movs	r2, #1
 8000e88:	2178      	movs	r1, #120	; 0x78
 8000e8a:	485b      	ldr	r0, [pc, #364]	; (8000ff8 <SSD1306_Init+0x180>)
 8000e8c:	f001 f9f0 	bl	8002270 <HAL_I2C_IsDeviceReady>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e0a9      	b.n	8000fee <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000e9a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ea0:	e002      	b.n	8000ea8 <SSD1306_Init+0x30>
		p--;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f9      	bne.n	8000ea2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000eae:	22ae      	movs	r2, #174	; 0xae
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	; 0x78
 8000eb4:	f000 fa8a 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2078      	movs	r0, #120	; 0x78
 8000ebe:	f000 fa85 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ec2:	2210      	movs	r2, #16
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	; 0x78
 8000ec8:	f000 fa80 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ecc:	22b0      	movs	r2, #176	; 0xb0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2078      	movs	r0, #120	; 0x78
 8000ed2:	f000 fa7b 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ed6:	22c8      	movs	r2, #200	; 0xc8
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2078      	movs	r0, #120	; 0x78
 8000edc:	f000 fa76 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2078      	movs	r0, #120	; 0x78
 8000ee6:	f000 fa71 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000eea:	2210      	movs	r2, #16
 8000eec:	2100      	movs	r1, #0
 8000eee:	2078      	movs	r0, #120	; 0x78
 8000ef0:	f000 fa6c 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2078      	movs	r0, #120	; 0x78
 8000efa:	f000 fa67 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000efe:	2281      	movs	r2, #129	; 0x81
 8000f00:	2100      	movs	r1, #0
 8000f02:	2078      	movs	r0, #120	; 0x78
 8000f04:	f000 fa62 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2078      	movs	r0, #120	; 0x78
 8000f0e:	f000 fa5d 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f12:	22a1      	movs	r2, #161	; 0xa1
 8000f14:	2100      	movs	r1, #0
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f000 fa58 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f1c:	22a6      	movs	r2, #166	; 0xa6
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2078      	movs	r0, #120	; 0x78
 8000f22:	f000 fa53 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f26:	22a8      	movs	r2, #168	; 0xa8
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2078      	movs	r0, #120	; 0x78
 8000f2c:	f000 fa4e 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f30:	223f      	movs	r2, #63	; 0x3f
 8000f32:	2100      	movs	r1, #0
 8000f34:	2078      	movs	r0, #120	; 0x78
 8000f36:	f000 fa49 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f3a:	22a4      	movs	r2, #164	; 0xa4
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2078      	movs	r0, #120	; 0x78
 8000f40:	f000 fa44 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f44:	22d3      	movs	r2, #211	; 0xd3
 8000f46:	2100      	movs	r1, #0
 8000f48:	2078      	movs	r0, #120	; 0x78
 8000f4a:	f000 fa3f 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2078      	movs	r0, #120	; 0x78
 8000f54:	f000 fa3a 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f58:	22d5      	movs	r2, #213	; 0xd5
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2078      	movs	r0, #120	; 0x78
 8000f5e:	f000 fa35 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f62:	22f0      	movs	r2, #240	; 0xf0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2078      	movs	r0, #120	; 0x78
 8000f68:	f000 fa30 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f6c:	22d9      	movs	r2, #217	; 0xd9
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2078      	movs	r0, #120	; 0x78
 8000f72:	f000 fa2b 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f76:	2222      	movs	r2, #34	; 0x22
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f000 fa26 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f80:	22da      	movs	r2, #218	; 0xda
 8000f82:	2100      	movs	r1, #0
 8000f84:	2078      	movs	r0, #120	; 0x78
 8000f86:	f000 fa21 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	; 0x78
 8000f90:	f000 fa1c 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f94:	22db      	movs	r2, #219	; 0xdb
 8000f96:	2100      	movs	r1, #0
 8000f98:	2078      	movs	r0, #120	; 0x78
 8000f9a:	f000 fa17 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f000 fa12 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000fa8:	228d      	movs	r2, #141	; 0x8d
 8000faa:	2100      	movs	r1, #0
 8000fac:	2078      	movs	r0, #120	; 0x78
 8000fae:	f000 fa0d 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fb2:	2214      	movs	r2, #20
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	; 0x78
 8000fb8:	f000 fa08 	bl	80013cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000fbc:	22af      	movs	r2, #175	; 0xaf
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	; 0x78
 8000fc2:	f000 fa03 	bl	80013cc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000fc6:	222e      	movs	r2, #46	; 0x2e
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	; 0x78
 8000fcc:	f000 f9fe 	bl	80013cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 f843 	bl	800105c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000fd6:	f000 f813 	bl	8001000 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SSD1306_Init+0x184>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SSD1306_Init+0x184>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SSD1306_Init+0x184>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000088 	.word	0x20000088
 8000ffc:	20000548 	.word	0x20000548

08001000 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	e01d      	b.n	8001048 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3b50      	subs	r3, #80	; 0x50
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	; 0x78
 8001018:	f000 f9d8 	bl	80013cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2078      	movs	r0, #120	; 0x78
 8001022:	f000 f9d3 	bl	80013cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001026:	2210      	movs	r2, #16
 8001028:	2100      	movs	r1, #0
 800102a:	2078      	movs	r0, #120	; 0x78
 800102c:	f000 f9ce 	bl	80013cc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <SSD1306_UpdateScreen+0x58>)
 8001036:	441a      	add	r2, r3
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	2078      	movs	r0, #120	; 0x78
 800103e:	f000 f95f 	bl	8001300 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3301      	adds	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9de      	bls.n	800100c <SSD1306_UpdateScreen+0xc>
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000148 	.word	0x20000148

0800105c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <SSD1306_Fill+0x14>
 800106c:	2300      	movs	r3, #0
 800106e:	e000      	b.n	8001072 <SSD1306_Fill+0x16>
 8001070:	23ff      	movs	r3, #255	; 0xff
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	4619      	mov	r1, r3
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <SSD1306_Fill+0x2c>)
 800107a:	f005 fe73 	bl	8006d64 <memset>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000148 	.word	0x20000148

0800108c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	70fb      	strb	r3, [r7, #3]
	if (
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	2b7f      	cmp	r3, #127	; 0x7f
 80010a2:	d848      	bhi.n	8001136 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	2b3f      	cmp	r3, #63	; 0x3f
 80010a8:	d845      	bhi.n	8001136 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <SSD1306_DrawPixel+0xb8>)
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010b2:	78fb      	ldrb	r3, [r7, #3]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf0c      	ite	eq
 80010b8:	2301      	moveq	r3, #1
 80010ba:	2300      	movne	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d11a      	bne.n	80010fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010c6:	88fa      	ldrh	r2, [r7, #6]
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	08db      	lsrs	r3, r3, #3
 80010cc:	b298      	uxth	r0, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	01db      	lsls	r3, r3, #7
 80010d2:	4413      	add	r3, r2
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <SSD1306_DrawPixel+0xbc>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b259      	sxtb	r1, r3
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	4603      	mov	r3, r0
 80010f0:	01db      	lsls	r3, r3, #7
 80010f2:	4413      	add	r3, r2
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <SSD1306_DrawPixel+0xbc>)
 80010f8:	54d1      	strb	r1, [r2, r3]
 80010fa:	e01d      	b.n	8001138 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010fc:	88fa      	ldrh	r2, [r7, #6]
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	b298      	uxth	r0, r3
 8001104:	4603      	mov	r3, r0
 8001106:	01db      	lsls	r3, r3, #7
 8001108:	4413      	add	r3, r2
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <SSD1306_DrawPixel+0xbc>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	b25a      	sxtb	r2, r3
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	b25b      	sxtb	r3, r3
 8001122:	4013      	ands	r3, r2
 8001124:	b259      	sxtb	r1, r3
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	4603      	mov	r3, r0
 800112a:	01db      	lsls	r3, r3, #7
 800112c:	4413      	add	r3, r2
 800112e:	b2c9      	uxtb	r1, r1
 8001130:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SSD1306_DrawPixel+0xbc>)
 8001132:	54d1      	strb	r1, [r2, r3]
 8001134:	e000      	b.n	8001138 <SSD1306_DrawPixel+0xac>
		return;
 8001136:	bf00      	nop
	}
}
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000548 	.word	0x20000548
 8001148:	20000148 	.word	0x20000148

0800114c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4613      	mov	r3, r2
 800115a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SSD1306_GotoXY+0x28>)
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <SSD1306_GotoXY+0x28>)
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	8053      	strh	r3, [r2, #2]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000548 	.word	0x20000548

08001178 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <SSD1306_Putc+0xfc>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
	if (
 8001194:	2b7f      	cmp	r3, #127	; 0x7f
 8001196:	dc07      	bgt.n	80011a8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <SSD1306_Putc+0xfc>)
 800119a:	885b      	ldrh	r3, [r3, #2]
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011a4:	2b3f      	cmp	r3, #63	; 0x3f
 80011a6:	dd01      	ble.n	80011ac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e05e      	b.n	800126a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e04b      	b.n	800124a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3b20      	subs	r3, #32
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	7849      	ldrb	r1, [r1, #1]
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	440b      	add	r3, r1
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	e030      	b.n	8001238 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d010      	beq.n	8001208 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <SSD1306_Putc+0xfc>)
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b298      	uxth	r0, r3
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <SSD1306_Putc+0xfc>)
 80011f4:	885a      	ldrh	r2, [r3, #2]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	79ba      	ldrb	r2, [r7, #6]
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff ff43 	bl	800108c <SSD1306_DrawPixel>
 8001206:	e014      	b.n	8001232 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <SSD1306_Putc+0xfc>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b298      	uxth	r0, r3
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <SSD1306_Putc+0xfc>)
 8001216:	885a      	ldrh	r2, [r3, #2]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	f7ff ff2d 	bl	800108c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	3301      	adds	r3, #1
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4293      	cmp	r3, r2
 8001242:	d3c8      	bcc.n	80011d6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	461a      	mov	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	4293      	cmp	r3, r2
 8001254:	d3ad      	bcc.n	80011b2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <SSD1306_Putc+0xfc>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	4413      	add	r3, r2
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <SSD1306_Putc+0xfc>)
 8001266:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001268:	79fb      	ldrb	r3, [r7, #7]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000548 	.word	0x20000548

08001278 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001286:	e012      	b.n	80012ae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff71 	bl	8001178 <SSD1306_Putc>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d002      	beq.n	80012a8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	e008      	b.n	80012ba <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e8      	bne.n	8001288 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	781b      	ldrb	r3, [r3, #0]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fec8 	bl	800105c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80012cc:	f7ff fe98 	bl	8001000 <SSD1306_UpdateScreen>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <ssd1306_I2C_Init+0x28>)
 80012dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012de:	e002      	b.n	80012e6 <ssd1306_I2C_Init+0x12>
		p--;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f9      	bne.n	80012e0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	0003d090 	.word	0x0003d090

08001300 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b0c7      	sub	sp, #284	; 0x11c
 8001304:	af02      	add	r7, sp, #8
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800130e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001312:	600a      	str	r2, [r1, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800131a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800131e:	4622      	mov	r2, r4
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001326:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800132a:	4602      	mov	r2, r0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001332:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001336:	460a      	mov	r2, r1
 8001338:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800133a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800133e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001342:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001346:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001354:	e015      	b.n	8001382 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001356:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800135a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800135e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	441a      	add	r2, r3
 8001366:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800136a:	3301      	adds	r3, #1
 800136c:	7811      	ldrb	r1, [r2, #0]
 800136e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001372:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001376:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001378:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800137c:	3301      	adds	r3, #1
 800137e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001382:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001386:	b29b      	uxth	r3, r3
 8001388:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800138c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001390:	8812      	ldrh	r2, [r2, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d8df      	bhi.n	8001356 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800139a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b299      	uxth	r1, r3
 80013a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f107 020c 	add.w	r2, r7, #12
 80013b4:	200a      	movs	r0, #10
 80013b6:	9000      	str	r0, [sp, #0]
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <ssd1306_I2C_WriteMulti+0xc8>)
 80013ba:	f000 fe5b 	bl	8002074 <HAL_I2C_Master_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	20000088 	.word	0x20000088

080013cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	460b      	mov	r3, r1
 80013d8:	71bb      	strb	r3, [r7, #6]
 80013da:	4613      	mov	r3, r2
 80013dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	230a      	movs	r3, #10
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2302      	movs	r3, #2
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <ssd1306_I2C_Write+0x38>)
 80013f6:	f000 fe3d 	bl	8002074 <HAL_I2C_Master_Transmit>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000088 	.word	0x20000088

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_MspInit+0x54>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_MspInit+0x54>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x54>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_MspInit+0x54>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_MspInit+0x54>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_MspInit+0x54>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	210f      	movs	r1, #15
 800144a:	f06f 0001 	mvn.w	r0, #1
 800144e:	f000 fac3 	bl	80019d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800149e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_I2C_MspInit+0x8c>)
 80014bc:	f000 fab6 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_UART_MspInit+0x84>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12b      	bne.n	800156a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x88>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_UART_MspInit+0x8c>)
 8001566:	f000 fa61 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004400 	.word	0x40004400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000

08001580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	; 0x38
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_InitTick+0xe4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_InitTick+0xe4>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_InitTick+0xe4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ac:	f107 0210 	add.w	r2, r7, #16
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fafe 	bl	8002bb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015c6:	f001 facf 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80015ca:	6378      	str	r0, [r7, #52]	; 0x34
 80015cc:	e004      	b.n	80015d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ce:	f001 facb 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80015d2:	4603      	mov	r3, r0
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <HAL_InitTick+0xe8>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3b01      	subs	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_InitTick+0xec>)
 80015e8:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_InitTick+0xf0>)
 80015ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_InitTick+0xec>)
 80015ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_InitTick+0xec>)
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_InitTick+0xec>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_InitTick+0xec>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_InitTick+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <HAL_InitTick+0xec>)
 800160e:	f001 ffd3 	bl	80035b8 <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11b      	bne.n	8001658 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <HAL_InitTick+0xec>)
 8001622:	f002 f823 	bl	800366c <HAL_TIM_Base_Start_IT>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800162c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001634:	2036      	movs	r0, #54	; 0x36
 8001636:	f000 f9eb 	bl	8001a10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d808      	bhi.n	8001652 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2036      	movs	r0, #54	; 0x36
 8001646:	f000 f9c7 	bl	80019d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_InitTick+0xf4>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e002      	b.n	8001658 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800165c:	4618      	mov	r0, r3
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	431bde83 	.word	0x431bde83
 800166c:	20000550 	.word	0x20000550
 8001670:	40001000 	.word	0x40001000
 8001674:	2000000c 	.word	0x2000000c

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM6_DAC_IRQHandler+0x10>)
 80016aa:	f002 f84f 	bl	800374c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000550 	.word	0x20000550

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f005 fbba 	bl	8006e60 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20020000 	.word	0x20020000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000598 	.word	0x20000598
 8001720:	200050d0 	.word	0x200050d0

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0xe>
 800174c:	f7ff ffea 	bl	8001724 <SystemInit>
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopFillZerobss+0x1a>)
 8001756:	2300      	movs	r3, #0
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:
 800175a:	58d4      	ldr	r4, [r2, r3]
 800175c:	50c4      	str	r4, [r0, r3]
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:
 8001760:	18c4      	adds	r4, r0, r3
 8001762:	428c      	cmp	r4, r1
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopFillZerobss+0x1e>)
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopFillZerobss+0x22>)
 800176a:	2300      	movs	r3, #0
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:
 8001772:	42a2      	cmp	r2, r4
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>
 8001776:	f005 fb79 	bl	8006e6c <__libc_init_array>
 800177a:	f7ff f8b3 	bl	80008e4 <main>
 800177e:	4770      	bx	lr
 8001780:	20020000 	.word	0x20020000
 8001784:	20000000 	.word	0x20000000
 8001788:	20000068 	.word	0x20000068
 800178c:	08007dfc 	.word	0x08007dfc
 8001790:	20000068 	.word	0x20000068
 8001794:	200050d0 	.word	0x200050d0

08001798 <ADC_IRQHandler>:
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f8fc 	bl	80019c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f7ff fed8 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe1a 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000010 	.word	0x20000010
 8001804:	2000059c 	.word	0x2000059c

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000059c 	.word	0x2000059c

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000010 	.word	0x20000010

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff4c 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ea:	f7ff ff61 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f7ff ffb1 	bl	800195c <NVIC_EncodePriority>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff80 	bl	8001908 <__NVIC_SetPriority>
}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff54 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e165      	b.n	8001d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 8154 	bne.w	8001d0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d005      	beq.n	8001a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d017      	beq.n	8001b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ae 	beq.w	8001d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a5c      	ldr	r2, [pc, #368]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bce:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_GPIO_Init+0x304>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_GPIO_Init+0x308>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x216>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	; (8001d3c <HAL_GPIO_Init+0x310>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x212>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_GPIO_Init+0x314>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	; (8001d44 <HAL_GPIO_Init+0x318>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x20a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <HAL_GPIO_Init+0x31c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x206>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <HAL_GPIO_Init+0x320>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x202>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c46:	2300      	movs	r3, #0
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x304>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d08:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	f67f ae96 	bls.w	8001a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e12b      	b.n	8002056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fb24 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e50:	f000 fe8a 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8001e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a81      	ldr	r2, [pc, #516]	; (8002060 <HAL_I2C_Init+0x274>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d807      	bhi.n	8001e70 <HAL_I2C_Init+0x84>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a80      	ldr	r2, [pc, #512]	; (8002064 <HAL_I2C_Init+0x278>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e006      	b.n	8001e7e <HAL_I2C_Init+0x92>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a7d      	ldr	r2, [pc, #500]	; (8002068 <HAL_I2C_Init+0x27c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf94      	ite	ls
 8001e78:	2301      	movls	r3, #1
 8001e7a:	2300      	movhi	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0e7      	b.n	8002056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4a78      	ldr	r2, [pc, #480]	; (800206c <HAL_I2C_Init+0x280>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0c9b      	lsrs	r3, r3, #18
 8001e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_I2C_Init+0x274>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_I2C_Init+0xd4>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	e009      	b.n	8001ed4 <HAL_I2C_Init+0xe8>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_I2C_Init+0x284>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	495c      	ldr	r1, [pc, #368]	; (8002060 <HAL_I2C_Init+0x274>)
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d819      	bhi.n	8001f28 <HAL_I2C_Init+0x13c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e59      	subs	r1, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f02:	1c59      	adds	r1, r3, #1
 8001f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f08:	400b      	ands	r3, r1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_I2C_Init+0x138>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1e59      	subs	r1, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f22:	e051      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e04f      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <HAL_I2C_Init+0x168>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e012      	b.n	8001f7a <HAL_I2C_Init+0x18e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	0099      	lsls	r1, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Init+0x196>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e022      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <HAL_I2C_Init+0x1bc>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e58      	subs	r0, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	440b      	add	r3, r1
 8001f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa6:	e00f      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	6809      	ldr	r1, [r1, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6911      	ldr	r1, [r2, #16]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68d2      	ldr	r2, [r2, #12]
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	430b      	orrs	r3, r1
 800200a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	000186a0 	.word	0x000186a0
 8002064:	001e847f 	.word	0x001e847f
 8002068:	003d08ff 	.word	0x003d08ff
 800206c:	431bde83 	.word	0x431bde83
 8002070:	10624dd3 	.word	0x10624dd3

08002074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	461a      	mov	r2, r3
 8002080:	460b      	mov	r3, r1
 8002082:	817b      	strh	r3, [r7, #10]
 8002084:	4613      	mov	r3, r2
 8002086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff fbbe 	bl	8001808 <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	f040 80e0 	bne.w	800225c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	4970      	ldr	r1, [pc, #448]	; (8002268 <HAL_I2C_Master_Transmit+0x1f4>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fa92 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0d3      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2C_Master_Transmit+0x50>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0cc      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d007      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2221      	movs	r2, #33	; 0x21
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2210      	movs	r2, #16
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_I2C_Master_Transmit+0x1f8>)
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	6a3a      	ldr	r2, [r7, #32]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f9ca 	bl	80024cc <I2C_MasterRequestWrite>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08d      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002158:	e066      	b.n	8002228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fb50 	bl	8002804 <I2C_WaitOnTXEFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b04      	cmp	r3, #4
 8002170:	d107      	bne.n	8002182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d11b      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x188>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	6a39      	ldr	r1, [r7, #32]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fb47 	bl	8002894 <I2C_WaitOnBTFFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b04      	cmp	r3, #4
 8002212:	d107      	bne.n	8002224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e01a      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d194      	bne.n	800215a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	00100002 	.word	0x00100002
 800226c:	ffff0000 	.word	0xffff0000

08002270 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff fac2 	bl	8001808 <HAL_GetTick>
 8002284:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b20      	cmp	r3, #32
 8002294:	f040 8111 	bne.w	80024ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2319      	movs	r3, #25
 800229e:	2201      	movs	r2, #1
 80022a0:	4988      	ldr	r1, [pc, #544]	; (80024c4 <HAL_I2C_IsDeviceReady+0x254>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f994 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	e104      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_IsDeviceReady+0x50>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0fd      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d007      	beq.n	80022e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2224      	movs	r2, #36	; 0x24
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a70      	ldr	r2, [pc, #448]	; (80024c8 <HAL_I2C_IsDeviceReady+0x258>)
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002318:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f952 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002340:	d103      	bne.n	800234a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0b6      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800235c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff fa53 	bl	8001808 <HAL_GetTick>
 8002362:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002392:	e025      	b.n	80023e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002394:	f7ff fa38 	bl	8001808 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d302      	bcc.n	80023aa <HAL_I2C_IsDeviceReady+0x13a>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	22a0      	movs	r2, #160	; 0xa0
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2ba0      	cmp	r3, #160	; 0xa0
 80023ea:	d005      	beq.n	80023f8 <HAL_I2C_IsDeviceReady+0x188>
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_I2C_IsDeviceReady+0x188>
 80023f2:	7dbb      	ldrb	r3, [r7, #22]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0cd      	beq.n	8002394 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d129      	bne.n	8002462 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2319      	movs	r3, #25
 800243a:	2201      	movs	r2, #1
 800243c:	4921      	ldr	r1, [pc, #132]	; (80024c4 <HAL_I2C_IsDeviceReady+0x254>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f8c6 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e036      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e02c      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002470:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800247a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2319      	movs	r3, #25
 8002482:	2201      	movs	r2, #1
 8002484:	490f      	ldr	r1, [pc, #60]	; (80024c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f8a2 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e012      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3301      	adds	r3, #1
 800249a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f4ff af32 	bcc.w	800230a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	00100002 	.word	0x00100002
 80024c8:	ffff0000 	.word	0xffff0000

080024cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d006      	beq.n	80024f6 <I2C_MasterRequestWrite+0x2a>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d003      	beq.n	80024f6 <I2C_MasterRequestWrite+0x2a>
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024f4:	d108      	bne.n	8002508 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e00b      	b.n	8002520 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	2b12      	cmp	r3, #18
 800250e:	d107      	bne.n	8002520 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f84f 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002546:	d103      	bne.n	8002550 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e035      	b.n	80025c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255c:	d108      	bne.n	8002570 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	e01b      	b.n	80025a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002570:	897b      	ldrh	r3, [r7, #10]
 8002572:	11db      	asrs	r3, r3, #7
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f003 0306 	and.w	r3, r3, #6
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f063 030f 	orn	r3, r3, #15
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <I2C_MasterRequestWrite+0xfc>)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f898 	bl	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e010      	b.n	80025c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800259e:	897b      	ldrh	r3, [r7, #10]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <I2C_MasterRequestWrite+0x100>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f888 	bl	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	00010008 	.word	0x00010008
 80025cc:	00010002 	.word	0x00010002

080025d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e0:	e048      	b.n	8002674 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d044      	beq.n	8002674 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7ff f90d 	bl	8001808 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d139      	bne.n	8002674 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10d      	bne.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x56>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	43da      	mvns	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4013      	ands	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	e00c      	b.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	429a      	cmp	r2, r3
 8002644:	d116      	bne.n	8002674 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e023      	b.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10d      	bne.n	800269a <I2C_WaitOnFlagUntilTimeout+0xca>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	43da      	mvns	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	e00c      	b.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d093      	beq.n	80025e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d2:	e071      	b.n	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d123      	bne.n	800272c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0204 	orr.w	r2, r3, #4
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e067      	b.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d041      	beq.n	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7ff f868 	bl	8001808 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d136      	bne.n	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10c      	bne.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e00b      	b.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	43da      	mvns	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e021      	b.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d10c      	bne.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e00b      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af6d 	bne.w	80026d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002810:	e034      	b.n	800287c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f886 	bl	8002924 <I2C_IsAcknowledgeFailed>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e034      	b.n	800288c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d028      	beq.n	800287c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7fe ffed 	bl	8001808 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11d      	bne.n	800287c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b80      	cmp	r3, #128	; 0x80
 800284c:	d016      	beq.n	800287c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e007      	b.n	800288c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d1c3      	bne.n	8002812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a0:	e034      	b.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f83e 	bl	8002924 <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e034      	b.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d028      	beq.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe ffa5 	bl	8001808 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11d      	bne.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d016      	beq.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d1c3      	bne.n	80028a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293a:	d11b      	bne.n	8002974 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002944:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f043 0204 	orr.w	r2, r3, #4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cc      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d90c      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e067      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fec8 	bl	8001808 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fec4 	bl	8001808 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f887 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fd28 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08007dd4 	.word	0x08007dd4
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	2000000c 	.word	0x2000000c

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000008 	.word	0x20000008

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08007de4 	.word	0x08007de4

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffdc 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0b5b      	lsrs	r3, r3, #13
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	08007de4 	.word	0x08007de4

08002bb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_GetClockConfig+0x5c>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCC_GetClockConfig+0x60>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 020f 	and.w	r2, r3, #15
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	601a      	str	r2, [r3, #0]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b0ae      	sub	sp, #184	; 0xb8
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c42:	4bcb      	ldr	r3, [pc, #812]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	f200 8206 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x440>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c8d 	.word	0x08002c8d
 8002c5c:	0800305d 	.word	0x0800305d
 8002c60:	0800305d 	.word	0x0800305d
 8002c64:	0800305d 	.word	0x0800305d
 8002c68:	08002c95 	.word	0x08002c95
 8002c6c:	0800305d 	.word	0x0800305d
 8002c70:	0800305d 	.word	0x0800305d
 8002c74:	0800305d 	.word	0x0800305d
 8002c78:	08002c9d 	.word	0x08002c9d
 8002c7c:	0800305d 	.word	0x0800305d
 8002c80:	0800305d 	.word	0x0800305d
 8002c84:	0800305d 	.word	0x0800305d
 8002c88:	08002e8d 	.word	0x08002e8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4bb9      	ldr	r3, [pc, #740]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c92:	e1e7      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c94:	4bb8      	ldr	r3, [pc, #736]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c9a:	e1e3      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c9c:	4bb4      	ldr	r3, [pc, #720]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca8:	4bb1      	ldr	r3, [pc, #708]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d071      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb4:	4bae      	ldr	r3, [pc, #696]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cda:	4622      	mov	r2, r4
 8002cdc:	462b      	mov	r3, r5
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	0159      	lsls	r1, r3, #5
 8002ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cec:	0150      	lsls	r0, r2, #5
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	1a51      	subs	r1, r2, r1
 8002cf6:	6439      	str	r1, [r7, #64]	; 0x40
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	018b      	lsls	r3, r1, #6
 8002d10:	4641      	mov	r1, r8
 8002d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d16:	4641      	mov	r1, r8
 8002d18:	018a      	lsls	r2, r1, #6
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	1a51      	subs	r1, r2, r1
 8002d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d20:	4649      	mov	r1, r9
 8002d22:	eb63 0301 	sbc.w	r3, r3, r1
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d34:	4649      	mov	r1, r9
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4641      	mov	r1, r8
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4622      	mov	r2, r4
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d4e:	462b      	mov	r3, r5
 8002d50:	460a      	mov	r2, r1
 8002d52:	eb42 0303 	adc.w	r3, r2, r3
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d64:	4629      	mov	r1, r5
 8002d66:	024b      	lsls	r3, r1, #9
 8002d68:	4621      	mov	r1, r4
 8002d6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d6e:	4621      	mov	r1, r4
 8002d70:	024a      	lsls	r2, r1, #9
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d88:	f7fd fa54 	bl	8000234 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d96:	e067      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002da4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002db2:	2300      	movs	r3, #0
 8002db4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002db6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	1a51      	subs	r1, r2, r1
 8002dd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dd8:	4629      	mov	r1, r5
 8002dda:	eb63 0301 	sbc.w	r3, r3, r1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dec:	4649      	mov	r1, r9
 8002dee:	018b      	lsls	r3, r1, #6
 8002df0:	4641      	mov	r1, r8
 8002df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df6:	4641      	mov	r1, r8
 8002df8:	018a      	lsls	r2, r1, #6
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e00:	4649      	mov	r1, r9
 8002e02:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e1a:	4692      	mov	sl, r2
 8002e1c:	469b      	mov	fp, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	eb1a 0303 	adds.w	r3, sl, r3
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	462b      	mov	r3, r5
 8002e28:	eb4b 0303 	adc.w	r3, fp, r3
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	028b      	lsls	r3, r1, #10
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e44:	4621      	mov	r1, r4
 8002e46:	028a      	lsls	r2, r1, #10
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e50:	2200      	movs	r2, #0
 8002e52:	673b      	str	r3, [r7, #112]	; 0x70
 8002e54:	677a      	str	r2, [r7, #116]	; 0x74
 8002e56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e5a:	f7fd f9eb 	bl	8000234 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4613      	mov	r3, r2
 8002e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e68:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e8a:	e0eb      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e8c:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d06b      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea4:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	2200      	movs	r2, #0
 8002eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb8:	2300      	movs	r3, #0
 8002eba:	667b      	str	r3, [r7, #100]	; 0x64
 8002ebc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ec0:	4622      	mov	r2, r4
 8002ec2:	462b      	mov	r3, r5
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	0159      	lsls	r1, r3, #5
 8002ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed2:	0150      	lsls	r0, r2, #5
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4621      	mov	r1, r4
 8002eda:	1a51      	subs	r1, r2, r1
 8002edc:	61b9      	str	r1, [r7, #24]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ef2:	4659      	mov	r1, fp
 8002ef4:	018b      	lsls	r3, r1, #6
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efc:	4651      	mov	r1, sl
 8002efe:	018a      	lsls	r2, r1, #6
 8002f00:	4651      	mov	r1, sl
 8002f02:	ebb2 0801 	subs.w	r8, r2, r1
 8002f06:	4659      	mov	r1, fp
 8002f08:	eb63 0901 	sbc.w	r9, r3, r1
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f20:	4690      	mov	r8, r2
 8002f22:	4699      	mov	r9, r3
 8002f24:	4623      	mov	r3, r4
 8002f26:	eb18 0303 	adds.w	r3, r8, r3
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	eb49 0303 	adc.w	r3, r9, r3
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f40:	4629      	mov	r1, r5
 8002f42:	024b      	lsls	r3, r1, #9
 8002f44:	4621      	mov	r1, r4
 8002f46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	024a      	lsls	r2, r1, #9
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f56:	2200      	movs	r2, #0
 8002f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f60:	f7fd f968 	bl	8000234 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f6e:	e065      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x420>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	2200      	movs	r2, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	4611      	mov	r1, r2
 8002f88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f8e:	2300      	movs	r3, #0
 8002f90:	657b      	str	r3, [r7, #84]	; 0x54
 8002f92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f96:	4642      	mov	r2, r8
 8002f98:	464b      	mov	r3, r9
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4641      	mov	r1, r8
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	1a54      	subs	r4, r2, r1
 8002fda:	4659      	mov	r1, fp
 8002fdc:	eb63 0501 	sbc.w	r5, r3, r1
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	00eb      	lsls	r3, r5, #3
 8002fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fee:	00e2      	lsls	r2, r4, #3
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	4643      	mov	r3, r8
 8002ff6:	18e3      	adds	r3, r4, r3
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	eb45 0303 	adc.w	r3, r5, r3
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800300e:	4629      	mov	r1, r5
 8003010:	028b      	lsls	r3, r1, #10
 8003012:	4621      	mov	r1, r4
 8003014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003018:	4621      	mov	r1, r4
 800301a:	028a      	lsls	r2, r1, #10
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003024:	2200      	movs	r2, #0
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
 8003028:	64fa      	str	r2, [r7, #76]	; 0x4c
 800302a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800302e:	f7fd f901 	bl	8000234 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4613      	mov	r3, r2
 8003038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_GetSysClockFreq+0x458>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0f1b      	lsrs	r3, r3, #28
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800304a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800304e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800305a:	e003      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_GetSysClockFreq+0x45c>)
 800305e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003064:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003068:	4618      	mov	r0, r3
 800306a:	37b8      	adds	r7, #184	; 0xb8
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400

0800307c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e28d      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8083 	beq.w	80031a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800309c:	4b94      	ldr	r3, [pc, #592]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d019      	beq.n	80030dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030a8:	4b91      	ldr	r3, [pc, #580]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030b4:	4b8e      	ldr	r3, [pc, #568]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c0:	d00c      	beq.n	80030dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b8b      	ldr	r3, [pc, #556]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b84      	ldr	r3, [pc, #528]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x124>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e25a      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x90>
 80030fe:	4b7c      	ldr	r3, [pc, #496]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7b      	ldr	r2, [pc, #492]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xcc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0xb4>
 8003116:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a72      	ldr	r2, [pc, #456]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xcc>
 8003130:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6e      	ldr	r2, [pc, #440]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b6c      	ldr	r3, [pc, #432]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6b      	ldr	r2, [pc, #428]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fb5a 	bl	8001808 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fb56 	bl	8001808 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e21f      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xdc>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fb46 	bl	8001808 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fb42 	bl	8001808 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e20b      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x104>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d06f      	beq.n	800328e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ae:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d017      	beq.n	80031ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ba:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d105      	bne.n	80031d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x186>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1d3      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4937      	ldr	r1, [pc, #220]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	e03a      	b.n	800328e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x278>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe faef 	bl	8001808 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322e:	f7fe faeb 	bl	8001808 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1b4      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4925      	ldr	r1, [pc, #148]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x278>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe face 	bl	8001808 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003270:	f7fe faca 	bl	8001808 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e193      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d036      	beq.n	8003308 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe faae 	bl	8001808 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe faaa 	bl	8001808 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e173      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x234>
 80032ce:	e01b      	b.n	8003308 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe fa97 	bl	8001808 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e00e      	b.n	80032fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032de:	f7fe fa93 	bl	8001808 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d907      	bls.n	80032fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e15c      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	42470000 	.word	0x42470000
 80032f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b8a      	ldr	r3, [pc, #552]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ea      	bne.n	80032de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8097 	beq.w	8003444 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b83      	ldr	r3, [pc, #524]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b7f      	ldr	r3, [pc, #508]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a7e      	ldr	r2, [pc, #504]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b7c      	ldr	r3, [pc, #496]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003346:	4b79      	ldr	r3, [pc, #484]	; (800352c <HAL_RCC_OscConfig+0x4b0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003352:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_RCC_OscConfig+0x4b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a75      	ldr	r2, [pc, #468]	; (800352c <HAL_RCC_OscConfig+0x4b0>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fe fa53 	bl	8001808 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fa4f 	bl	8001808 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e118      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b6c      	ldr	r3, [pc, #432]	; (800352c <HAL_RCC_OscConfig+0x4b0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x31e>
 800338c:	4b66      	ldr	r3, [pc, #408]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a65      	ldr	r2, [pc, #404]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e01c      	b.n	80033d4 <HAL_RCC_OscConfig+0x358>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x340>
 80033a2:	4b61      	ldr	r3, [pc, #388]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a60      	ldr	r2, [pc, #384]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	4b5e      	ldr	r3, [pc, #376]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5d      	ldr	r2, [pc, #372]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x358>
 80033bc:	4b5a      	ldr	r3, [pc, #360]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a59      	ldr	r2, [pc, #356]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fa14 	bl	8001808 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe fa10 	bl	8001808 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0d7      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	4b4b      	ldr	r3, [pc, #300]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ee      	beq.n	80033e4 <HAL_RCC_OscConfig+0x368>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe f9fe 	bl	8001808 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe f9fa 	bl	8001808 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0c1      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	4b40      	ldr	r3, [pc, #256]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ee      	bne.n	8003410 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	4a3a      	ldr	r2, [pc, #232]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80ad 	beq.w	80035a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d060      	beq.n	800351c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d145      	bne.n	80034ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b33      	ldr	r3, [pc, #204]	; (8003530 <HAL_RCC_OscConfig+0x4b4>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f9ce 	bl	8001808 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe f9ca 	bl	8001808 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e093      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b29      	ldr	r3, [pc, #164]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	071b      	lsls	r3, r3, #28
 80034ba:	491b      	ldr	r1, [pc, #108]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCC_OscConfig+0x4b4>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe f99f 	bl	8001808 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe f99b 	bl	8001808 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e064      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x452>
 80034ec:	e05c      	b.n	80035a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_RCC_OscConfig+0x4b4>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f988 	bl	8001808 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe f984 	bl	8001808 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e04d      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x480>
 800351a:	e045      	b.n	80035a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e040      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003534:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_RCC_OscConfig+0x538>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d030      	beq.n	80035a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d129      	bne.n	80035a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d122      	bne.n	80035a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800356a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800356c:	4293      	cmp	r3, r2
 800356e:	d119      	bne.n	80035a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d10f      	bne.n	80035a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800

080035b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e041      	b.n	800364e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f839 	bl	8003656 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 f9c0 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d001      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e04e      	b.n	8003722 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_TIM_Base_Start_IT+0xc4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ae:	d01d      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_TIM_Base_Start_IT+0xc8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_TIM_Base_Start_IT+0xcc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_TIM_Base_Start_IT+0xd0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_TIM_Base_Start_IT+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a19      	ldr	r2, [pc, #100]	; (8003744 <HAL_TIM_Base_Start_IT+0xd8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x80>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_TIM_Base_Start_IT+0xdc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d010      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	e007      	b.n	8003720 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40001800 	.word	0x40001800

0800374c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0202 	mvn.w	r2, #2
 8003780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8d2 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8c4 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8d5 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0204 	mvn.w	r2, #4
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8ac 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f89e 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8af 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0208 	mvn.w	r2, #8
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2204      	movs	r2, #4
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f886 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f878 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f889 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2208      	movs	r2, #8
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f860 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f852 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f863 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0201 	mvn.w	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fac8 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f906 	bl	8003ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f834 	bl	8003968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0220 	mvn.w	r2, #32
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8d8 	bl	8003ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a46      	ldr	r2, [pc, #280]	; (8003aa8 <TIM_Base_SetConfig+0x12c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d00f      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a43      	ldr	r2, [pc, #268]	; (8003aac <TIM_Base_SetConfig+0x130>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <TIM_Base_SetConfig+0x134>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a41      	ldr	r2, [pc, #260]	; (8003ab4 <TIM_Base_SetConfig+0x138>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a40      	ldr	r2, [pc, #256]	; (8003ab8 <TIM_Base_SetConfig+0x13c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a35      	ldr	r2, [pc, #212]	; (8003aa8 <TIM_Base_SetConfig+0x12c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d027      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a32      	ldr	r2, [pc, #200]	; (8003aac <TIM_Base_SetConfig+0x130>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d023      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a31      	ldr	r2, [pc, #196]	; (8003ab0 <TIM_Base_SetConfig+0x134>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <TIM_Base_SetConfig+0x138>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01b      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <TIM_Base_SetConfig+0x13c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d017      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2e      	ldr	r2, [pc, #184]	; (8003abc <TIM_Base_SetConfig+0x140>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <TIM_Base_SetConfig+0x144>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <TIM_Base_SetConfig+0x148>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <TIM_Base_SetConfig+0x14c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <TIM_Base_SetConfig+0x150>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <TIM_Base_SetConfig+0x154>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d108      	bne.n	8003a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <TIM_Base_SetConfig+0x12c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0xf8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <TIM_Base_SetConfig+0x13c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d103      	bne.n	8003a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40010400 	.word	0x40010400
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800
 8003ac8:	40001800 	.word	0x40001800
 8003acc:	40001c00 	.word	0x40001c00
 8003ad0:	40002000 	.word	0x40002000

08003ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e042      	b.n	8003b94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fce4 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f82b 	bl	8003b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b0c0      	sub	sp, #256	; 0x100
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	68d9      	ldr	r1, [r3, #12]
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	ea40 0301 	orr.w	r3, r0, r1
 8003bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bf4:	f021 010c 	bic.w	r1, r1, #12
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c02:	430b      	orrs	r3, r1
 8003c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	6999      	ldr	r1, [r3, #24]
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	ea40 0301 	orr.w	r3, r0, r1
 8003c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b8f      	ldr	r3, [pc, #572]	; (8003e68 <UART_SetConfig+0x2cc>)
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d005      	beq.n	8003c3c <UART_SetConfig+0xa0>
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b8d      	ldr	r3, [pc, #564]	; (8003e6c <UART_SetConfig+0x2d0>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d104      	bne.n	8003c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c3c:	f7fe ffa8 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003c40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c44:	e003      	b.n	8003c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c46:	f7fe ff8f 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c58:	f040 810c 	bne.w	8003e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c6e:	4622      	mov	r2, r4
 8003c70:	462b      	mov	r3, r5
 8003c72:	1891      	adds	r1, r2, r2
 8003c74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c76:	415b      	adcs	r3, r3
 8003c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c7e:	4621      	mov	r1, r4
 8003c80:	eb12 0801 	adds.w	r8, r2, r1
 8003c84:	4629      	mov	r1, r5
 8003c86:	eb43 0901 	adc.w	r9, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb18 0303 	adds.w	r3, r8, r3
 8003ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cac:	462b      	mov	r3, r5
 8003cae:	eb49 0303 	adc.w	r3, r9, r3
 8003cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cca:	460b      	mov	r3, r1
 8003ccc:	18db      	adds	r3, r3, r3
 8003cce:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	eb42 0303 	adc.w	r3, r2, r3
 8003cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ce0:	f7fc faa8 	bl	8000234 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4b61      	ldr	r3, [pc, #388]	; (8003e70 <UART_SetConfig+0x2d4>)
 8003cea:	fba3 2302 	umull	r2, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	011c      	lsls	r4, r3, #4
 8003cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d14:	4641      	mov	r1, r8
 8003d16:	eb12 0a01 	adds.w	sl, r2, r1
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d34:	4692      	mov	sl, r2
 8003d36:	469b      	mov	fp, r3
 8003d38:	4643      	mov	r3, r8
 8003d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d42:	464b      	mov	r3, r9
 8003d44:	eb4b 0303 	adc.w	r3, fp, r3
 8003d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d60:	460b      	mov	r3, r1
 8003d62:	18db      	adds	r3, r3, r3
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
 8003d66:	4613      	mov	r3, r2
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d76:	f7fc fa5d 	bl	8000234 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <UART_SetConfig+0x2d4>)
 8003d82:	fba3 2301 	umull	r2, r3, r3, r1
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2264      	movs	r2, #100	; 0x64
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	1acb      	subs	r3, r1, r3
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <UART_SetConfig+0x2d4>)
 8003d98:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003da4:	441c      	add	r4, r3
 8003da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dc8:	4641      	mov	r1, r8
 8003dca:	1851      	adds	r1, r2, r1
 8003dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8003dce:	4649      	mov	r1, r9
 8003dd0:	414b      	adcs	r3, r1
 8003dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003de0:	4659      	mov	r1, fp
 8003de2:	00cb      	lsls	r3, r1, #3
 8003de4:	4651      	mov	r1, sl
 8003de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dea:	4651      	mov	r1, sl
 8003dec:	00ca      	lsls	r2, r1, #3
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	4642      	mov	r2, r8
 8003df6:	189b      	adds	r3, r3, r2
 8003df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	460a      	mov	r2, r1
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	18db      	adds	r3, r3, r3
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e22:	4613      	mov	r3, r2
 8003e24:	eb42 0303 	adc.w	r3, r2, r3
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e32:	f7fc f9ff 	bl	8000234 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <UART_SetConfig+0x2d4>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <UART_SetConfig+0x2d4>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	f003 0207 	and.w	r2, r3, #7
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4422      	add	r2, r4
 8003e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e64:	e106      	b.n	8004074 <UART_SetConfig+0x4d8>
 8003e66:	bf00      	nop
 8003e68:	40011000 	.word	0x40011000
 8003e6c:	40011400 	.word	0x40011400
 8003e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e86:	4642      	mov	r2, r8
 8003e88:	464b      	mov	r3, r9
 8003e8a:	1891      	adds	r1, r2, r2
 8003e8c:	6239      	str	r1, [r7, #32]
 8003e8e:	415b      	adcs	r3, r3
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e96:	4641      	mov	r1, r8
 8003e98:	1854      	adds	r4, r2, r1
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	eb43 0501 	adc.w	r5, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	00eb      	lsls	r3, r5, #3
 8003eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eae:	00e2      	lsls	r2, r4, #3
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	18e3      	adds	r3, r4, r3
 8003eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ebc:	464b      	mov	r3, r9
 8003ebe:	eb45 0303 	adc.w	r3, r5, r3
 8003ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eec:	4621      	mov	r1, r4
 8003eee:	008a      	lsls	r2, r1, #2
 8003ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ef4:	f7fc f99e 	bl	8000234 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4b60      	ldr	r3, [pc, #384]	; (8004080 <UART_SetConfig+0x4e4>)
 8003efe:	fba3 2302 	umull	r2, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	011c      	lsls	r4, r3, #4
 8003f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	61b9      	str	r1, [r7, #24]
 8003f20:	415b      	adcs	r3, r3
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f28:	4641      	mov	r1, r8
 8003f2a:	1851      	adds	r1, r2, r1
 8003f2c:	6139      	str	r1, [r7, #16]
 8003f2e:	4649      	mov	r1, r9
 8003f30:	414b      	adcs	r3, r1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f40:	4659      	mov	r1, fp
 8003f42:	00cb      	lsls	r3, r1, #3
 8003f44:	4651      	mov	r1, sl
 8003f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	00ca      	lsls	r2, r1, #3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	4642      	mov	r2, r8
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	460a      	mov	r2, r1
 8003f60:	eb42 0303 	adc.w	r3, r2, r3
 8003f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f80:	4649      	mov	r1, r9
 8003f82:	008b      	lsls	r3, r1, #2
 8003f84:	4641      	mov	r1, r8
 8003f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	008a      	lsls	r2, r1, #2
 8003f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f92:	f7fc f94f 	bl	8000234 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4b38      	ldr	r3, [pc, #224]	; (8004080 <UART_SetConfig+0x4e4>)
 8003f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2264      	movs	r2, #100	; 0x64
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	1acb      	subs	r3, r1, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a33      	ldr	r2, [pc, #204]	; (8004080 <UART_SetConfig+0x4e4>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	441c      	add	r4, r3
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fc6:	677a      	str	r2, [r7, #116]	; 0x74
 8003fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fdc:	4641      	mov	r1, r8
 8003fde:	1851      	adds	r1, r2, r1
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4651      	mov	r1, sl
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4642      	mov	r2, r8
 800400a:	189b      	adds	r3, r3, r2
 800400c:	66bb      	str	r3, [r7, #104]	; 0x68
 800400e:	464b      	mov	r3, r9
 8004010:	460a      	mov	r2, r1
 8004012:	eb42 0303 	adc.w	r3, r2, r3
 8004016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	663b      	str	r3, [r7, #96]	; 0x60
 8004022:	667a      	str	r2, [r7, #100]	; 0x64
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004030:	4649      	mov	r1, r9
 8004032:	008b      	lsls	r3, r1, #2
 8004034:	4641      	mov	r1, r8
 8004036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403a:	4641      	mov	r1, r8
 800403c:	008a      	lsls	r2, r1, #2
 800403e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004042:	f7fc f8f7 	bl	8000234 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <UART_SetConfig+0x4e4>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	; 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a08      	ldr	r2, [pc, #32]	; (8004080 <UART_SetConfig+0x4e4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4422      	add	r2, r4
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800407a:	46bd      	mov	sp, r7
 800407c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004080:	51eb851f 	.word	0x51eb851f

08004084 <__NVIC_SetPriority>:
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db0a      	blt.n	80040ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	490c      	ldr	r1, [pc, #48]	; (80040d0 <__NVIC_SetPriority+0x4c>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	440b      	add	r3, r1
 80040a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040ac:	e00a      	b.n	80040c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <__NVIC_SetPriority+0x50>)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3b04      	subs	r3, #4
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	761a      	strb	r2, [r3, #24]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000e100 	.word	0xe000e100
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <SysTick_Handler+0x1c>)
 80040de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040e0:	f001 fd28 	bl	8005b34 <xTaskGetSchedulerState>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d001      	beq.n	80040ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040ea:	f002 fb0d 	bl	8006708 <xPortSysTickHandler>
  }
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000e010 	.word	0xe000e010

080040f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040fc:	2100      	movs	r1, #0
 80040fe:	f06f 0004 	mvn.w	r0, #4
 8004102:	f7ff ffbf 	bl	8004084 <__NVIC_SetPriority>
#endif
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004112:	f3ef 8305 	mrs	r3, IPSR
 8004116:	603b      	str	r3, [r7, #0]
  return(result);
 8004118:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800411e:	f06f 0305 	mvn.w	r3, #5
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	e00c      	b.n	8004140 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <osKernelInitialize+0x44>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800412e:	4b08      	ldr	r3, [pc, #32]	; (8004150 <osKernelInitialize+0x44>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004134:	2300      	movs	r3, #0
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e002      	b.n	8004140 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004140:	687b      	ldr	r3, [r7, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200005a0 	.word	0x200005a0

08004154 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800415a:	f3ef 8305 	mrs	r3, IPSR
 800415e:	603b      	str	r3, [r7, #0]
  return(result);
 8004160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004166:	f06f 0305 	mvn.w	r3, #5
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e010      	b.n	8004190 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <osKernelStart+0x48>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d109      	bne.n	800418a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004176:	f7ff ffbf 	bl	80040f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <osKernelStart+0x48>)
 800417c:	2202      	movs	r2, #2
 800417e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004180:	f001 f87c 	bl	800527c <vTaskStartScheduler>
      stat = osOK;
 8004184:	2300      	movs	r3, #0
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	e002      	b.n	8004190 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004190:	687b      	ldr	r3, [r7, #4]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200005a0 	.word	0x200005a0

080041a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af04      	add	r7, sp, #16
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b0:	f3ef 8305 	mrs	r3, IPSR
 80041b4:	617b      	str	r3, [r7, #20]
  return(result);
 80041b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d17e      	bne.n	80042ba <osThreadNew+0x11a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d07b      	beq.n	80042ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041c6:	2318      	movs	r3, #24
 80041c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d045      	beq.n	8004266 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <osThreadNew+0x48>
        name = attr->name;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <osThreadNew+0x6e>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b38      	cmp	r3, #56	; 0x38
 8004200:	d805      	bhi.n	800420e <osThreadNew+0x6e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <osThreadNew+0x72>
        return (NULL);
 800420e:	2300      	movs	r3, #0
 8004210:	e054      	b.n	80042bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00e      	beq.n	8004248 <osThreadNew+0xa8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2ba7      	cmp	r3, #167	; 0xa7
 8004230:	d90a      	bls.n	8004248 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <osThreadNew+0xa8>
        mem = 1;
 8004242:	2301      	movs	r3, #1
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	e010      	b.n	800426a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10c      	bne.n	800426a <osThreadNew+0xca>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <osThreadNew+0xca>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <osThreadNew+0xca>
          mem = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e001      	b.n	800426a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d110      	bne.n	8004292 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004278:	9202      	str	r2, [sp, #8]
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6a3a      	ldr	r2, [r7, #32]
 8004284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fe0c 	bl	8004ea4 <xTaskCreateStatic>
 800428c:	4603      	mov	r3, r0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	e013      	b.n	80042ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d110      	bne.n	80042ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	b29a      	uxth	r2, r3
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fe57 	bl	8004f5e <xTaskCreate>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <osThreadNew+0x11a>
            hTask = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ba:	693b      	ldr	r3, [r7, #16]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3728      	adds	r7, #40	; 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042cc:	f3ef 8305 	mrs	r3, IPSR
 80042d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <osDelay+0x1c>
    stat = osErrorISR;
 80042d8:	f06f 0305 	mvn.w	r3, #5
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e007      	b.n	80042f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 ff92 	bl	8005214 <vTaskDelay>
    }
  }

  return (stat);
 80042f0:	68fb      	ldr	r3, [r7, #12]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a07      	ldr	r2, [pc, #28]	; (8004328 <vApplicationGetIdleTaskMemory+0x2c>)
 800430c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <vApplicationGetIdleTaskMemory+0x30>)
 8004312:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	200005a4 	.word	0x200005a4
 800432c:	2000064c 	.word	0x2000064c

08004330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <vApplicationGetTimerTaskMemory+0x2c>)
 8004340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a06      	ldr	r2, [pc, #24]	; (8004360 <vApplicationGetTimerTaskMemory+0x30>)
 8004346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	2000084c 	.word	0x2000084c
 8004360:	200008f4 	.word	0x200008f4

08004364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f103 0208 	add.w	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f103 0208 	add.w	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f103 0208 	add.w	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d103      	bne.n	8004426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e00c      	b.n	8004440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3308      	adds	r3, #8
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e002      	b.n	8004434 <vListInsert+0x2e>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	d2f6      	bcs.n	800442e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6892      	ldr	r2, [r2, #8]
 800448e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6852      	ldr	r2, [r2, #4]
 8004498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d103      	bne.n	80044ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044f6:	f002 f875 	bl	80065e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	3b01      	subs	r3, #1
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	22ff      	movs	r2, #255	; 0xff
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	22ff      	movs	r2, #255	; 0xff
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d114      	bne.n	8004576 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01a      	beq.n	800458a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3310      	adds	r3, #16
 8004558:	4618      	mov	r0, r3
 800455a:	f001 f929 	bl	80057b0 <xTaskRemoveFromEventList>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d012      	beq.n	800458a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <xQueueGenericReset+0xcc>)
 8004566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	e009      	b.n	800458a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3310      	adds	r3, #16
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fef2 	bl	8004364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3324      	adds	r3, #36	; 0x24
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff feed 	bl	8004364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800458a:	f002 f85b 	bl	8006644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800458e:	2301      	movs	r3, #1
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08e      	sub	sp, #56	; 0x38
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045c2:	bf00      	nop
 80045c4:	e7fe      	b.n	80045c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <xQueueGenericCreateStatic+0x52>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <xQueueGenericCreateStatic+0x56>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <xQueueGenericCreateStatic+0x58>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <xQueueGenericCreateStatic+0x7e>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xQueueGenericCreateStatic+0x82>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericCreateStatic+0x84>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61fb      	str	r3, [r7, #28]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800463a:	2350      	movs	r3, #80	; 0x50
 800463c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b50      	cmp	r3, #80	; 0x50
 8004642:	d00a      	beq.n	800465a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61bb      	str	r3, [r7, #24]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800465a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800466e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	4613      	mov	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f805 	bl	800468c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004684:	4618      	mov	r0, r3
 8004686:	3730      	adds	r7, #48	; 0x30
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e002      	b.n	80046ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046ba:	2101      	movs	r1, #1
 80046bc:	69b8      	ldr	r0, [r7, #24]
 80046be:	f7ff ff05 	bl	80044cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	; 0x38
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xQueueGenericSend+0x32>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <xQueueGenericSend+0x40>
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <xQueueGenericSend+0x44>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <xQueueGenericSend+0x46>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <xQueueGenericSend+0x60>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0x6e>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <xQueueGenericSend+0x72>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericSend+0x74>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <xQueueGenericSend+0x8e>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	623b      	str	r3, [r7, #32]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004762:	f001 f9e7 	bl	8005b34 <xTaskGetSchedulerState>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <xQueueGenericSend+0x9e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <xQueueGenericSend+0xa2>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSend+0xa4>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericSend+0xbe>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	61fb      	str	r3, [r7, #28]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004792:	f001 ff27 	bl	80065e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <xQueueGenericSend+0xd4>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d129      	bne.n	80047fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ae:	f000 fa0b 	bl	8004bc8 <prvCopyDataToQueue>
 80047b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d010      	beq.n	80047de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	3324      	adds	r3, #36	; 0x24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fff5 	bl	80057b0 <xTaskRemoveFromEventList>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047cc:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <xQueueGenericSend+0x1f8>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	e00a      	b.n	80047f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047e4:	4b39      	ldr	r3, [pc, #228]	; (80048cc <xQueueGenericSend+0x1f8>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047f4:	f001 ff26 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e063      	b.n	80048c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004802:	f001 ff1f 	bl	8006644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004806:	2300      	movs	r3, #0
 8004808:	e05c      	b.n	80048c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4618      	mov	r0, r3
 8004816:	f001 f82f 	bl	8005878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800481e:	f001 ff11 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004822:	f000 fd9b 	bl	800535c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004826:	f001 fedd 	bl	80065e4 <vPortEnterCritical>
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004830:	b25b      	sxtb	r3, r3
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d103      	bne.n	8004840 <xQueueGenericSend+0x16c>
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004846:	b25b      	sxtb	r3, r3
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d103      	bne.n	8004856 <xQueueGenericSend+0x182>
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004856:	f001 fef5 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800485a:	1d3a      	adds	r2, r7, #4
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f81e 	bl	80058a4 <xTaskCheckForTimeOut>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d124      	bne.n	80048b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800486e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004870:	f000 faa2 	bl	8004db8 <prvIsQueueFull>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d018      	beq.n	80048ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	3310      	adds	r3, #16
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f000 ff44 	bl	8005710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488a:	f000 fa2d 	bl	8004ce8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800488e:	f000 fd73 	bl	8005378 <xTaskResumeAll>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f af7c 	bne.w	8004792 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <xQueueGenericSend+0x1f8>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	e772      	b.n	8004792 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ae:	f000 fa1b 	bl	8004ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b2:	f000 fd61 	bl	8005378 <xTaskResumeAll>
 80048b6:	e76c      	b.n	8004792 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ba:	f000 fa15 	bl	8004ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048be:	f000 fd5b 	bl	8005378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3738      	adds	r7, #56	; 0x38
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b090      	sub	sp, #64	; 0x40
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <xQueueGenericSendFromISR+0x3c>
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <xQueueGenericSendFromISR+0x40>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <xQueueGenericSendFromISR+0x42>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d103      	bne.n	800493a <xQueueGenericSendFromISR+0x6a>
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <xQueueGenericSendFromISR+0x6e>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <xQueueGenericSendFromISR+0x70>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	623b      	str	r3, [r7, #32]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800495a:	f001 ff25 	bl	80067a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800495e:	f3ef 8211 	mrs	r2, BASEPRI
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	61fa      	str	r2, [r7, #28]
 8004974:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004976:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <xQueueGenericSendFromISR+0xbc>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d12f      	bne.n	80049ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049a2:	f000 f911 	bl	8004bc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d112      	bne.n	80049d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	3324      	adds	r3, #36	; 0x24
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fef7 	bl	80057b0 <xTaskRemoveFromEventList>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00e      	beq.n	80049e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e007      	b.n	80049e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049da:	3301      	adds	r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	b25a      	sxtb	r2, r3
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049e6:	2301      	movs	r3, #1
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049ea:	e001      	b.n	80049f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3740      	adds	r7, #64	; 0x40
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08c      	sub	sp, #48	; 0x30
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <xQueueReceive+0x30>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	623b      	str	r3, [r7, #32]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <xQueueReceive+0x3e>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <xQueueReceive+0x42>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueReceive+0x44>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueReceive+0x5e>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61fb      	str	r3, [r7, #28]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a66:	f001 f865 	bl	8005b34 <xTaskGetSchedulerState>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <xQueueReceive+0x6e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <xQueueReceive+0x72>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueReceive+0x74>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueReceive+0x8e>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61bb      	str	r3, [r7, #24]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a96:	f001 fda5 	bl	80065e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01f      	beq.n	8004ae6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aaa:	f000 f8f7 	bl	8004c9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	1e5a      	subs	r2, r3, #1
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00f      	beq.n	8004ade <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	3310      	adds	r3, #16
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fe74 	bl	80057b0 <xTaskRemoveFromEventList>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <xQueueReceive+0x1bc>)
 8004ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ade:	f001 fdb1 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e069      	b.n	8004bba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aec:	f001 fdaa 	bl	8006644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e062      	b.n	8004bba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004afa:	f107 0310 	add.w	r3, r7, #16
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 feba 	bl	8005878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b08:	f001 fd9c 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b0c:	f000 fc26 	bl	800535c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b10:	f001 fd68 	bl	80065e4 <vPortEnterCritical>
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d103      	bne.n	8004b2a <xQueueReceive+0x122>
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d103      	bne.n	8004b40 <xQueueReceive+0x138>
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b40:	f001 fd80 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b44:	1d3a      	adds	r2, r7, #4
 8004b46:	f107 0310 	add.w	r3, r7, #16
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fea9 	bl	80058a4 <xTaskCheckForTimeOut>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d123      	bne.n	8004ba0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5a:	f000 f917 	bl	8004d8c <prvIsQueueEmpty>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	3324      	adds	r3, #36	; 0x24
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fdcf 	bl	8005710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b74:	f000 f8b8 	bl	8004ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b78:	f000 fbfe 	bl	8005378 <xTaskResumeAll>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d189      	bne.n	8004a96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <xQueueReceive+0x1bc>)
 8004b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	e780      	b.n	8004a96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b96:	f000 f8a7 	bl	8004ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b9a:	f000 fbed 	bl	8005378 <xTaskResumeAll>
 8004b9e:	e77a      	b.n	8004a96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba2:	f000 f8a1 	bl	8004ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba6:	f000 fbe7 	bl	8005378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bac:	f000 f8ee 	bl	8004d8c <prvIsQueueEmpty>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f43f af6f 	beq.w	8004a96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3730      	adds	r7, #48	; 0x30
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d14d      	bne.n	8004c8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 ffbc 	bl	8005b70 <xTaskPriorityDisinherit>
 8004bf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	e043      	b.n	8004c8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d119      	bne.n	8004c3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6858      	ldr	r0, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	f002 f950 	bl	8006eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	441a      	add	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d32b      	bcc.n	8004c8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	e026      	b.n	8004c8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68d8      	ldr	r0, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	461a      	mov	r2, r3
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	f002 f936 	bl	8006eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	425b      	negs	r3, r3
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d207      	bcs.n	8004c78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	425b      	negs	r3, r3
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d105      	bne.n	8004c8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d303      	bcc.n	8004cd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6838      	ldr	r0, [r7, #0]
 8004cdc:	f002 f8ec 	bl	8006eb8 <memcpy>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cf0:	f001 fc78 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cfc:	e011      	b.n	8004d22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3324      	adds	r3, #36	; 0x24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd50 	bl	80057b0 <xTaskRemoveFromEventList>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d16:	f000 fe27 	bl	8005968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	dce9      	bgt.n	8004cfe <prvUnlockQueue+0x16>
 8004d2a:	e000      	b.n	8004d2e <prvUnlockQueue+0x46>
					break;
 8004d2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d36:	f001 fc85 	bl	8006644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d3a:	f001 fc53 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d46:	e011      	b.n	8004d6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d012      	beq.n	8004d76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3310      	adds	r3, #16
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fd2b 	bl	80057b0 <xTaskRemoveFromEventList>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d60:	f000 fe02 	bl	8005968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d64:	7bbb      	ldrb	r3, [r7, #14]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dce9      	bgt.n	8004d48 <prvUnlockQueue+0x60>
 8004d74:	e000      	b.n	8004d78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d80:	f001 fc60 	bl	8006644 <vPortExitCritical>
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d94:	f001 fc26 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e001      	b.n	8004daa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f001 fc4b 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8004dae:	68fb      	ldr	r3, [r7, #12]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc0:	f001 fc10 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d102      	bne.n	8004dd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dda:	f001 fc33 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e014      	b.n	8004e22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004df8:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <vQueueAddToRegistry+0x50>)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e04:	490c      	ldr	r1, [pc, #48]	; (8004e38 <vQueueAddToRegistry+0x50>)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <vQueueAddToRegistry+0x50>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e1a:	e006      	b.n	8004e2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b07      	cmp	r3, #7
 8004e26:	d9e7      	bls.n	8004df8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000cf4 	.word	0x20000cf4

08004e3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e4c:	f001 fbca 	bl	80065e4 <vPortEnterCritical>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d103      	bne.n	8004e66 <vQueueWaitForMessageRestricted+0x2a>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d103      	bne.n	8004e7c <vQueueWaitForMessageRestricted+0x40>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e7c:	f001 fbe2 	bl	8006644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fc61 	bl	8005758 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff ff26 	bl	8004ce8 <prvUnlockQueue>
	}
 8004e9c:	bf00      	nop
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	; 0x38
 8004ea8:	af04      	add	r7, sp, #16
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <xTaskCreateStatic+0x2a>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	623b      	str	r3, [r7, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xTaskCreateStatic+0x46>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61fb      	str	r3, [r7, #28]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eea:	23a8      	movs	r3, #168	; 0xa8
 8004eec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2ba8      	cmp	r3, #168	; 0xa8
 8004ef2:	d00a      	beq.n	8004f0a <xTaskCreateStatic+0x66>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	61bb      	str	r3, [r7, #24]
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01e      	beq.n	8004f50 <xTaskCreateStatic+0xac>
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9303      	str	r3, [sp, #12]
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f850 	bl	8004fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f4a:	f000 f8f3 	bl	8005134 <prvAddNewTaskToReadyList>
 8004f4e:	e001      	b.n	8004f54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f54:	697b      	ldr	r3, [r7, #20]
	}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3728      	adds	r7, #40	; 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b08c      	sub	sp, #48	; 0x30
 8004f62:	af04      	add	r7, sp, #16
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fc58 	bl	8006828 <pvPortMalloc>
 8004f78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f80:	20a8      	movs	r0, #168	; 0xa8
 8004f82:	f001 fc51 	bl	8006828 <pvPortMalloc>
 8004f86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
 8004f94:	e005      	b.n	8004fa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f96:	6978      	ldr	r0, [r7, #20]
 8004f98:	f001 fd12 	bl	80069c0 <vPortFree>
 8004f9c:	e001      	b.n	8004fa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9303      	str	r3, [sp, #12]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f80e 	bl	8004fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fcc:	69f8      	ldr	r0, [r7, #28]
 8004fce:	f000 f8b1 	bl	8005134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e002      	b.n	8004fde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fde:	69bb      	ldr	r3, [r7, #24]
	}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	21a5      	movs	r1, #165	; 0xa5
 8005002:	f001 feaf 	bl	8006d64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005010:	3b01      	subs	r3, #1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <prvInitialiseNewTask+0x58>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	617b      	str	r3, [r7, #20]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01f      	beq.n	8005086 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e012      	b.n	8005072 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	7819      	ldrb	r1, [r3, #0]
 8005054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	3334      	adds	r3, #52	; 0x34
 800505c:	460a      	mov	r2, r1
 800505e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	3301      	adds	r3, #1
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d9e9      	bls.n	800504c <prvInitialiseNewTask+0x64>
 8005078:	e000      	b.n	800507c <prvInitialiseNewTask+0x94>
			{
				break;
 800507a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005084:	e003      	b.n	800508e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	2b37      	cmp	r3, #55	; 0x37
 8005092:	d901      	bls.n	8005098 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005094:	2337      	movs	r3, #55	; 0x37
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	3304      	adds	r3, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff f978 	bl	80043a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	3318      	adds	r3, #24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff f973 	bl	80043a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	3354      	adds	r3, #84	; 0x54
 80050e8:	224c      	movs	r2, #76	; 0x4c
 80050ea:	2100      	movs	r1, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fe39 	bl	8006d64 <memset>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	4a0c      	ldr	r2, [pc, #48]	; (8005128 <prvInitialiseNewTask+0x140>)
 80050f6:	659a      	str	r2, [r3, #88]	; 0x58
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	4a0c      	ldr	r2, [pc, #48]	; (800512c <prvInitialiseNewTask+0x144>)
 80050fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <prvInitialiseNewTask+0x148>)
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	69b8      	ldr	r0, [r7, #24]
 800510a:	f001 f941 	bl	8006390 <pxPortInitialiseStack>
 800510e:	4602      	mov	r2, r0
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005120:	bf00      	nop
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20004f90 	.word	0x20004f90
 800512c:	20004ff8 	.word	0x20004ff8
 8005130:	20005060 	.word	0x20005060

08005134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800513c:	f001 fa52 	bl	80065e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <prvAddNewTaskToReadyList+0xc4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a2c      	ldr	r2, [pc, #176]	; (80051f8 <prvAddNewTaskToReadyList+0xc4>)
 8005148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800514a:	4b2c      	ldr	r3, [pc, #176]	; (80051fc <prvAddNewTaskToReadyList+0xc8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005152:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <prvAddNewTaskToReadyList+0xc8>)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <prvAddNewTaskToReadyList+0xc4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d110      	bne.n	8005182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005160:	f000 fc26 	bl	80059b0 <prvInitialiseTaskLists>
 8005164:	e00d      	b.n	8005182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005166:	4b26      	ldr	r3, [pc, #152]	; (8005200 <prvAddNewTaskToReadyList+0xcc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800516e:	4b23      	ldr	r3, [pc, #140]	; (80051fc <prvAddNewTaskToReadyList+0xc8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	429a      	cmp	r2, r3
 800517a:	d802      	bhi.n	8005182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800517c:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <prvAddNewTaskToReadyList+0xc8>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <prvAddNewTaskToReadyList+0xd0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <prvAddNewTaskToReadyList+0xd0>)
 800518a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <prvAddNewTaskToReadyList+0xd0>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <prvAddNewTaskToReadyList+0xd4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d903      	bls.n	80051a8 <prvAddNewTaskToReadyList+0x74>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a18      	ldr	r2, [pc, #96]	; (8005208 <prvAddNewTaskToReadyList+0xd4>)
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <prvAddNewTaskToReadyList+0xd8>)
 80051b6:	441a      	add	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f7ff f8fd 	bl	80043be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051c4:	f001 fa3e 	bl	8006644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051c8:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <prvAddNewTaskToReadyList+0xcc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00e      	beq.n	80051ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <prvAddNewTaskToReadyList+0xc8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	429a      	cmp	r2, r3
 80051dc:	d207      	bcs.n	80051ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <prvAddNewTaskToReadyList+0xdc>)
 80051e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20001208 	.word	0x20001208
 80051fc:	20000d34 	.word	0x20000d34
 8005200:	20001214 	.word	0x20001214
 8005204:	20001224 	.word	0x20001224
 8005208:	20001210 	.word	0x20001210
 800520c:	20000d38 	.word	0x20000d38
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <vTaskDelay+0x60>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <vTaskDelay+0x30>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60bb      	str	r3, [r7, #8]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005244:	f000 f88a 	bl	800535c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005248:	2100      	movs	r1, #0
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fcfe 	bl	8005c4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005250:	f000 f892 	bl	8005378 <xTaskResumeAll>
 8005254:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <vTaskDelay+0x64>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20001230 	.word	0x20001230
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800528a:	463a      	mov	r2, r7
 800528c:	1d39      	adds	r1, r7, #4
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f832 	bl	80042fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	9202      	str	r2, [sp, #8]
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	460a      	mov	r2, r1
 80052aa:	4924      	ldr	r1, [pc, #144]	; (800533c <vTaskStartScheduler+0xc0>)
 80052ac:	4824      	ldr	r0, [pc, #144]	; (8005340 <vTaskStartScheduler+0xc4>)
 80052ae:	f7ff fdf9 	bl	8004ea4 <xTaskCreateStatic>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <vTaskStartScheduler+0xc8>)
 80052b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <vTaskStartScheduler+0xc8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e001      	b.n	80052ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d102      	bne.n	80052d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052d0:	f000 fd10 	bl	8005cf4 <xTimerCreateTimerTask>
 80052d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d11b      	bne.n	8005314 <vTaskStartScheduler+0x98>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	613b      	str	r3, [r7, #16]
}
 80052ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052f0:	4b15      	ldr	r3, [pc, #84]	; (8005348 <vTaskStartScheduler+0xcc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3354      	adds	r3, #84	; 0x54
 80052f6:	4a15      	ldr	r2, [pc, #84]	; (800534c <vTaskStartScheduler+0xd0>)
 80052f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <vTaskStartScheduler+0xd4>)
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005302:	4b14      	ldr	r3, [pc, #80]	; (8005354 <vTaskStartScheduler+0xd8>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <vTaskStartScheduler+0xdc>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800530e:	f001 f8c7 	bl	80064a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005312:	e00e      	b.n	8005332 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d10a      	bne.n	8005332 <vTaskStartScheduler+0xb6>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <vTaskStartScheduler+0xb4>
}
 8005332:	bf00      	nop
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	08006fd0 	.word	0x08006fd0
 8005340:	08005981 	.word	0x08005981
 8005344:	2000122c 	.word	0x2000122c
 8005348:	20000d34 	.word	0x20000d34
 800534c:	20000064 	.word	0x20000064
 8005350:	20001228 	.word	0x20001228
 8005354:	20001214 	.word	0x20001214
 8005358:	2000120c 	.word	0x2000120c

0800535c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <vTaskSuspendAll+0x18>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a03      	ldr	r2, [pc, #12]	; (8005374 <vTaskSuspendAll+0x18>)
 8005368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20001230 	.word	0x20001230

08005378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005386:	4b42      	ldr	r3, [pc, #264]	; (8005490 <xTaskResumeAll+0x118>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053a4:	f001 f91e 	bl	80065e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053a8:	4b39      	ldr	r3, [pc, #228]	; (8005490 <xTaskResumeAll+0x118>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	4a38      	ldr	r2, [pc, #224]	; (8005490 <xTaskResumeAll+0x118>)
 80053b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b2:	4b37      	ldr	r3, [pc, #220]	; (8005490 <xTaskResumeAll+0x118>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d162      	bne.n	8005480 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ba:	4b36      	ldr	r3, [pc, #216]	; (8005494 <xTaskResumeAll+0x11c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d05e      	beq.n	8005480 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053c2:	e02f      	b.n	8005424 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c4:	4b34      	ldr	r3, [pc, #208]	; (8005498 <xTaskResumeAll+0x120>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3318      	adds	r3, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f851 	bl	8004478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff f84c 	bl	8004478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	4b2d      	ldr	r3, [pc, #180]	; (800549c <xTaskResumeAll+0x124>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d903      	bls.n	80053f4 <xTaskResumeAll+0x7c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4a2a      	ldr	r2, [pc, #168]	; (800549c <xTaskResumeAll+0x124>)
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <xTaskResumeAll+0x128>)
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f7fe ffd7 	bl	80043be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <xTaskResumeAll+0x12c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800541e:	4b22      	ldr	r3, [pc, #136]	; (80054a8 <xTaskResumeAll+0x130>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005424:	4b1c      	ldr	r3, [pc, #112]	; (8005498 <xTaskResumeAll+0x120>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1cb      	bne.n	80053c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005432:	f000 fb5f 	bl	8005af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005436:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <xTaskResumeAll+0x134>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005442:	f000 f847 	bl	80054d4 <xTaskIncrementTick>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <xTaskResumeAll+0x130>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f1      	bne.n	8005442 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <xTaskResumeAll+0x134>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <xTaskResumeAll+0x130>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <xTaskResumeAll+0x138>)
 8005472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005480:	f001 f8e0 	bl	8006644 <vPortExitCritical>

	return xAlreadyYielded;
 8005484:	68bb      	ldr	r3, [r7, #8]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20001230 	.word	0x20001230
 8005494:	20001208 	.word	0x20001208
 8005498:	200011c8 	.word	0x200011c8
 800549c:	20001210 	.word	0x20001210
 80054a0:	20000d38 	.word	0x20000d38
 80054a4:	20000d34 	.word	0x20000d34
 80054a8:	2000121c 	.word	0x2000121c
 80054ac:	20001218 	.word	0x20001218
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <xTaskGetTickCount+0x1c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054c0:	687b      	ldr	r3, [r7, #4]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	2000120c 	.word	0x2000120c

080054d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054de:	4b4f      	ldr	r3, [pc, #316]	; (800561c <xTaskIncrementTick+0x148>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f040 808f 	bne.w	8005606 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054e8:	4b4d      	ldr	r3, [pc, #308]	; (8005620 <xTaskIncrementTick+0x14c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054f0:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <xTaskIncrementTick+0x14c>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d120      	bne.n	800553e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054fc:	4b49      	ldr	r3, [pc, #292]	; (8005624 <xTaskIncrementTick+0x150>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <xTaskIncrementTick+0x48>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	603b      	str	r3, [r7, #0]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <xTaskIncrementTick+0x46>
 800551c:	4b41      	ldr	r3, [pc, #260]	; (8005624 <xTaskIncrementTick+0x150>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	4b41      	ldr	r3, [pc, #260]	; (8005628 <xTaskIncrementTick+0x154>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a3f      	ldr	r2, [pc, #252]	; (8005624 <xTaskIncrementTick+0x150>)
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4a3f      	ldr	r2, [pc, #252]	; (8005628 <xTaskIncrementTick+0x154>)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b3e      	ldr	r3, [pc, #248]	; (800562c <xTaskIncrementTick+0x158>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a3d      	ldr	r2, [pc, #244]	; (800562c <xTaskIncrementTick+0x158>)
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	f000 fadb 	bl	8005af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800553e:	4b3c      	ldr	r3, [pc, #240]	; (8005630 <xTaskIncrementTick+0x15c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d349      	bcc.n	80055dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005548:	4b36      	ldr	r3, [pc, #216]	; (8005624 <xTaskIncrementTick+0x150>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005552:	4b37      	ldr	r3, [pc, #220]	; (8005630 <xTaskIncrementTick+0x15c>)
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	601a      	str	r2, [r3, #0]
					break;
 800555a:	e03f      	b.n	80055dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555c:	4b31      	ldr	r3, [pc, #196]	; (8005624 <xTaskIncrementTick+0x150>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d203      	bcs.n	800557c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005574:	4a2e      	ldr	r2, [pc, #184]	; (8005630 <xTaskIncrementTick+0x15c>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800557a:	e02f      	b.n	80055dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe ff79 	bl	8004478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	3318      	adds	r3, #24
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe ff70 	bl	8004478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <xTaskIncrementTick+0x160>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d903      	bls.n	80055ac <xTaskIncrementTick+0xd8>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <xTaskIncrementTick+0x160>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <xTaskIncrementTick+0x164>)
 80055ba:	441a      	add	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fefb 	bl	80043be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <xTaskIncrementTick+0x168>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3b8      	bcc.n	8005548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055da:	e7b5      	b.n	8005548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <xTaskIncrementTick+0x168>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	4915      	ldr	r1, [pc, #84]	; (8005638 <xTaskIncrementTick+0x164>)
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d901      	bls.n	80055f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <xTaskIncrementTick+0x16c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e004      	b.n	8005610 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <xTaskIncrementTick+0x170>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	4a0d      	ldr	r2, [pc, #52]	; (8005644 <xTaskIncrementTick+0x170>)
 800560e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005610:	697b      	ldr	r3, [r7, #20]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20001230 	.word	0x20001230
 8005620:	2000120c 	.word	0x2000120c
 8005624:	200011c0 	.word	0x200011c0
 8005628:	200011c4 	.word	0x200011c4
 800562c:	20001220 	.word	0x20001220
 8005630:	20001228 	.word	0x20001228
 8005634:	20001210 	.word	0x20001210
 8005638:	20000d38 	.word	0x20000d38
 800563c:	20000d34 	.word	0x20000d34
 8005640:	2000121c 	.word	0x2000121c
 8005644:	20001218 	.word	0x20001218

08005648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800564e:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <vTaskSwitchContext+0xb0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005656:	4b29      	ldr	r3, [pc, #164]	; (80056fc <vTaskSwitchContext+0xb4>)
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800565c:	e046      	b.n	80056ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800565e:	4b27      	ldr	r3, [pc, #156]	; (80056fc <vTaskSwitchContext+0xb4>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005664:	4b26      	ldr	r3, [pc, #152]	; (8005700 <vTaskSwitchContext+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	e010      	b.n	800568e <vTaskSwitchContext+0x46>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <vTaskSwitchContext+0x40>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	607b      	str	r3, [r7, #4]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <vTaskSwitchContext+0x3e>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3b01      	subs	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	491d      	ldr	r1, [pc, #116]	; (8005704 <vTaskSwitchContext+0xbc>)
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0e4      	beq.n	800566c <vTaskSwitchContext+0x24>
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <vTaskSwitchContext+0xbc>)
 80056ae:	4413      	add	r3, r2
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3308      	adds	r3, #8
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d104      	bne.n	80056d2 <vTaskSwitchContext+0x8a>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a0b      	ldr	r2, [pc, #44]	; (8005708 <vTaskSwitchContext+0xc0>)
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <vTaskSwitchContext+0xb8>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <vTaskSwitchContext+0xc0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3354      	adds	r3, #84	; 0x54
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <vTaskSwitchContext+0xc4>)
 80056ea:	6013      	str	r3, [r2, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	20001230 	.word	0x20001230
 80056fc:	2000121c 	.word	0x2000121c
 8005700:	20001210 	.word	0x20001210
 8005704:	20000d38 	.word	0x20000d38
 8005708:	20000d34 	.word	0x20000d34
 800570c:	20000064 	.word	0x20000064

08005710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60fb      	str	r3, [r7, #12]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <vTaskPlaceOnEventList+0x44>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3318      	adds	r3, #24
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fe fe61 	bl	8004406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005744:	2101      	movs	r1, #1
 8005746:	6838      	ldr	r0, [r7, #0]
 8005748:	f000 fa80 	bl	8005c4c <prvAddCurrentTaskToDelayedList>
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000d34 	.word	0x20000d34

08005758 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	617b      	str	r3, [r7, #20]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3318      	adds	r3, #24
 8005786:	4619      	mov	r1, r3
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7fe fe18 	bl	80043be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005794:	f04f 33ff 	mov.w	r3, #4294967295
 8005798:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	68b8      	ldr	r0, [r7, #8]
 800579e:	f000 fa55 	bl	8005c4c <prvAddCurrentTaskToDelayedList>
	}
 80057a2:	bf00      	nop
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000d34 	.word	0x20000d34

080057b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60fb      	str	r3, [r7, #12]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	3318      	adds	r3, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fe49 	bl	8004478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057e6:	4b1e      	ldr	r3, [pc, #120]	; (8005860 <xTaskRemoveFromEventList+0xb0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11d      	bne.n	800582a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fe40 	bl	8004478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <xTaskRemoveFromEventList+0xb4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d903      	bls.n	800580c <xTaskRemoveFromEventList+0x5c>
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a16      	ldr	r2, [pc, #88]	; (8005864 <xTaskRemoveFromEventList+0xb4>)
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <xTaskRemoveFromEventList+0xb8>)
 800581a:	441a      	add	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe fdcb 	bl	80043be <vListInsertEnd>
 8005828:	e005      	b.n	8005836 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3318      	adds	r3, #24
 800582e:	4619      	mov	r1, r3
 8005830:	480e      	ldr	r0, [pc, #56]	; (800586c <xTaskRemoveFromEventList+0xbc>)
 8005832:	f7fe fdc4 	bl	80043be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <xTaskRemoveFromEventList+0xc0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d905      	bls.n	8005850 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <xTaskRemoveFromEventList+0xc4>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e001      	b.n	8005854 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005854:	697b      	ldr	r3, [r7, #20]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20001230 	.word	0x20001230
 8005864:	20001210 	.word	0x20001210
 8005868:	20000d38 	.word	0x20000d38
 800586c:	200011c8 	.word	0x200011c8
 8005870:	20000d34 	.word	0x20000d34
 8005874:	2000121c 	.word	0x2000121c

08005878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <vTaskInternalSetTimeOutState+0x24>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <vTaskInternalSetTimeOutState+0x28>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	605a      	str	r2, [r3, #4]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20001220 	.word	0x20001220
 80058a0:	2000120c 	.word	0x2000120c

080058a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058e6:	f000 fe7d 	bl	80065e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <xTaskCheckForTimeOut+0xbc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	e023      	b.n	8005952 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <xTaskCheckForTimeOut+0xc0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d007      	beq.n	8005926 <xTaskCheckForTimeOut+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e015      	b.n	8005952 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	429a      	cmp	r2, r3
 800592e:	d20b      	bcs.n	8005948 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff9b 	bl	8005878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e004      	b.n	8005952 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f000 fe77 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	2000120c 	.word	0x2000120c
 8005964:	20001220 	.word	0x20001220

08005968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <vTaskMissedYield+0x14>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	2000121c 	.word	0x2000121c

08005980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005988:	f000 f852 	bl	8005a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvIdleTask+0x28>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d9f9      	bls.n	8005988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <prvIdleTask+0x2c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a4:	e7f0      	b.n	8005988 <prvIdleTask+0x8>
 80059a6:	bf00      	nop
 80059a8:	20000d38 	.word	0x20000d38
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e00c      	b.n	80059d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <prvInitialiseTaskLists+0x60>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fcca 	bl	8004364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b37      	cmp	r3, #55	; 0x37
 80059da:	d9ef      	bls.n	80059bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059dc:	480d      	ldr	r0, [pc, #52]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059de:	f7fe fcc1 	bl	8004364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059e2:	480d      	ldr	r0, [pc, #52]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 80059e4:	f7fe fcbe 	bl	8004364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <prvInitialiseTaskLists+0x6c>)
 80059ea:	f7fe fcbb 	bl	8004364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ee:	480c      	ldr	r0, [pc, #48]	; (8005a20 <prvInitialiseTaskLists+0x70>)
 80059f0:	f7fe fcb8 	bl	8004364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f4:	480b      	ldr	r0, [pc, #44]	; (8005a24 <prvInitialiseTaskLists+0x74>)
 80059f6:	f7fe fcb5 	bl	8004364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvInitialiseTaskLists+0x78>)
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <prvInitialiseTaskLists+0x7c>)
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000d38 	.word	0x20000d38
 8005a14:	20001198 	.word	0x20001198
 8005a18:	200011ac 	.word	0x200011ac
 8005a1c:	200011c8 	.word	0x200011c8
 8005a20:	200011dc 	.word	0x200011dc
 8005a24:	200011f4 	.word	0x200011f4
 8005a28:	200011c0 	.word	0x200011c0
 8005a2c:	200011c4 	.word	0x200011c4

08005a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a36:	e019      	b.n	8005a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a38:	f000 fdd4 	bl	80065e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <prvCheckTasksWaitingTermination+0x50>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe fd15 	bl	8004478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a62:	f000 fdef 	bl	8006644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f810 	bl	8005a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e1      	bne.n	8005a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200011dc 	.word	0x200011dc
 8005a84:	20001208 	.word	0x20001208
 8005a88:	200011f0 	.word	0x200011f0

08005a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3354      	adds	r3, #84	; 0x54
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 f97b 	bl	8006d94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d108      	bne.n	8005aba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 ff87 	bl	80069c0 <vPortFree>
				vPortFree( pxTCB );
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 ff84 	bl	80069c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab8:	e018      	b.n	8005aec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d103      	bne.n	8005acc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 ff7b 	bl	80069c0 <vPortFree>
	}
 8005aca:	e00f      	b.n	8005aec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d00a      	beq.n	8005aec <prvDeleteTCB+0x60>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <prvDeleteTCB+0x5e>
	}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b0c:	e008      	b.n	8005b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	200011c0 	.word	0x200011c0
 8005b30:	20001228 	.word	0x20001228

08005b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <xTaskGetSchedulerState+0x34>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b42:	2301      	movs	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e008      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <xTaskGetSchedulerState+0x38>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b50:	2302      	movs	r3, #2
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e001      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b5a:	687b      	ldr	r3, [r7, #4]
	}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20001214 	.word	0x20001214
 8005b6c:	20001230 	.word	0x20001230

08005b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d056      	beq.n	8005c34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <xTaskPriorityDisinherit+0xd0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d00a      	beq.n	8005ba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60bb      	str	r3, [r7, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d02c      	beq.n	8005c34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d128      	bne.n	8005c34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fc46 	bl	8004478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <xTaskPriorityDisinherit+0xd4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d903      	bls.n	8005c14 <xTaskPriorityDisinherit+0xa4>
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <xTaskPriorityDisinherit+0xd4>)
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <xTaskPriorityDisinherit+0xd8>)
 8005c22:	441a      	add	r2, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f7fe fbc7 	bl	80043be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c34:	697b      	ldr	r3, [r7, #20]
	}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000d34 	.word	0x20000d34
 8005c44:	20001210 	.word	0x20001210
 8005c48:	20000d38 	.word	0x20000d38

08005c4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c56:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <prvAddCurrentTaskToDelayedList+0x90>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c5c:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fc08 	bl	8004478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d10a      	bne.n	8005c86 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4819      	ldr	r0, [pc, #100]	; (8005ce4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c80:	f7fe fb9d 	bl	80043be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c84:	e026      	b.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d209      	bcs.n	8005cb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f7fe fbab 	bl	8004406 <vListInsert>
}
 8005cb0:	e010      	b.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7fe fba1 	bl	8004406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d202      	bcs.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	2000120c 	.word	0x2000120c
 8005ce0:	20000d34 	.word	0x20000d34
 8005ce4:	200011f4 	.word	0x200011f4
 8005ce8:	200011c4 	.word	0x200011c4
 8005cec:	200011c0 	.word	0x200011c0
 8005cf0:	20001228 	.word	0x20001228

08005cf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cfe:	f000 fb07 	bl	8006310 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <xTimerCreateTimerTask+0x80>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d12:	1d3a      	adds	r2, r7, #4
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe fb07 	bl	8004330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	460a      	mov	r2, r1
 8005d34:	4910      	ldr	r1, [pc, #64]	; (8005d78 <xTimerCreateTimerTask+0x84>)
 8005d36:	4811      	ldr	r0, [pc, #68]	; (8005d7c <xTimerCreateTimerTask+0x88>)
 8005d38:	f7ff f8b4 	bl	8004ea4 <xTaskCreateStatic>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <xTimerCreateTimerTask+0x8c>)
 8005d40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <xTimerCreateTimerTask+0x8c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20001264 	.word	0x20001264
 8005d78:	08006fd8 	.word	0x08006fd8
 8005d7c:	08005eb9 	.word	0x08005eb9
 8005d80:	20001268 	.word	0x20001268

08005d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02a      	beq.n	8005e10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	dc18      	bgt.n	8005dfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dcc:	f7ff feb2 	bl	8005b34 <xTaskGetSchedulerState>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d109      	bne.n	8005dea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f107 0110 	add.w	r1, r7, #16
 8005dde:	2300      	movs	r3, #0
 8005de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de2:	f7fe fc77 	bl	80046d4 <xQueueGenericSend>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
 8005de8:	e012      	b.n	8005e10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f107 0110 	add.w	r1, r7, #16
 8005df2:	2300      	movs	r3, #0
 8005df4:	2200      	movs	r2, #0
 8005df6:	f7fe fc6d 	bl	80046d4 <xQueueGenericSend>
 8005dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8005dfc:	e008      	b.n	8005e10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	f107 0110 	add.w	r1, r7, #16
 8005e06:	2300      	movs	r3, #0
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	f7fe fd61 	bl	80048d0 <xQueueGenericSendFromISR>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3728      	adds	r7, #40	; 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20001264 	.word	0x20001264

08005e20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2a:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <prvProcessExpiredTimer+0x94>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fb1d 	bl	8004478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d022      	beq.n	8005e92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	18d1      	adds	r1, r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f000 f8d1 	bl	8006000 <prvInsertTimerInActiveList>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01f      	beq.n	8005ea4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6978      	ldr	r0, [r7, #20]
 8005e70:	f7ff ff88 	bl	8005d84 <xTimerGenericCommand>
 8005e74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d113      	bne.n	8005ea4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60fb      	str	r3, [r7, #12]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	6978      	ldr	r0, [r7, #20]
 8005eaa:	4798      	blx	r3
}
 8005eac:	bf00      	nop
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	2000125c 	.word	0x2000125c

08005eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 f857 	bl	8005f78 <prvGetNextExpireTime>
 8005eca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f803 	bl	8005edc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ed6:	f000 f8d5 	bl	8006084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eda:	e7f1      	b.n	8005ec0 <prvTimerTask+0x8>

08005edc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ee6:	f7ff fa39 	bl	800535c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f866 	bl	8005fc0 <prvSampleTimeNow>
 8005ef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d130      	bne.n	8005f5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <prvProcessTimerOrBlockTask+0x3c>
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d806      	bhi.n	8005f18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f0a:	f7ff fa35 	bl	8005378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff85 	bl	8005e20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f16:	e024      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <prvProcessTimerOrBlockTask+0x90>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <prvProcessTimerOrBlockTask+0x50>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <prvProcessTimerOrBlockTask+0x52>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <prvProcessTimerOrBlockTask+0x94>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fe ff7d 	bl	8004e3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f42:	f7ff fa19 	bl	8005378 <xTaskResumeAll>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <prvProcessTimerOrBlockTask+0x98>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	f3bf 8f6f 	isb	sy
}
 8005f5c:	e001      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f5e:	f7ff fa0b 	bl	8005378 <xTaskResumeAll>
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20001260 	.word	0x20001260
 8005f70:	20001264 	.word	0x20001264
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <prvGetNextExpireTime+0x44>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <prvGetNextExpireTime+0x16>
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	e000      	b.n	8005f90 <prvGetNextExpireTime+0x18>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <prvGetNextExpireTime+0x44>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e001      	b.n	8005fac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fac:	68fb      	ldr	r3, [r7, #12]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	2000125c 	.word	0x2000125c

08005fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fc8:	f7ff fa74 	bl	80054b4 <xTaskGetTickCount>
 8005fcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <prvSampleTimeNow+0x3c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d205      	bcs.n	8005fe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fd8:	f000 f936 	bl	8006248 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <prvSampleTimeNow+0x3c>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	2000126c 	.word	0x2000126c

08006000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d812      	bhi.n	800604c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	d302      	bcc.n	800603a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e01b      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <prvInsertTimerInActiveList+0x7c>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fe f9de 	bl	8004406 <vListInsert>
 800604a:	e012      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d206      	bcs.n	8006062 <prvInsertTimerInActiveList+0x62>
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e007      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <prvInsertTimerInActiveList+0x80>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7fe f9ca 	bl	8004406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006072:	697b      	ldr	r3, [r7, #20]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20001260 	.word	0x20001260
 8006080:	2000125c 	.word	0x2000125c

08006084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800608a:	e0ca      	b.n	8006222 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	da18      	bge.n	80060c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	3304      	adds	r3, #4
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61fb      	str	r3, [r7, #28]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ba:	6850      	ldr	r0, [r2, #4]
 80060bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060be:	6892      	ldr	r2, [r2, #8]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f2c0 80ab 	blt.w	8006222 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe f9cb 	bl	8004478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060e2:	463b      	mov	r3, r7
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff ff6b 	bl	8005fc0 <prvSampleTimeNow>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	f200 8096 	bhi.w	8006220 <prvProcessReceivedCommands+0x19c>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <prvProcessReceivedCommands+0x78>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006125 	.word	0x08006125
 8006100:	08006125 	.word	0x08006125
 8006104:	08006125 	.word	0x08006125
 8006108:	08006199 	.word	0x08006199
 800610c:	080061ad 	.word	0x080061ad
 8006110:	080061f7 	.word	0x080061f7
 8006114:	08006125 	.word	0x08006125
 8006118:	08006125 	.word	0x08006125
 800611c:	08006199 	.word	0x08006199
 8006120:	080061ad 	.word	0x080061ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	18d1      	adds	r1, r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006144:	f7ff ff5c 	bl	8006000 <prvInsertTimerInActiveList>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d069      	beq.n	8006222 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006154:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d05e      	beq.n	8006222 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	441a      	add	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	2100      	movs	r1, #0
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f7ff fe05 	bl	8005d84 <xTimerGenericCommand>
 800617a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d14f      	bne.n	8006222 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	61bb      	str	r3, [r7, #24]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061aa:	e03a      	b.n	8006222 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	617b      	str	r3, [r7, #20]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	18d1      	adds	r1, r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f0:	f7ff ff06 	bl	8006000 <prvInsertTimerInActiveList>
					break;
 80061f4:	e015      	b.n	8006222 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006206:	f000 fbdb 	bl	80069c0 <vPortFree>
 800620a:	e00a      	b.n	8006222 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800621e:	e000      	b.n	8006222 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006220:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <prvProcessReceivedCommands+0x1c0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	1d39      	adds	r1, r7, #4
 8006228:	2200      	movs	r2, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fbec 	bl	8004a08 <xQueueReceive>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f47f af2a 	bne.w	800608c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20001264 	.word	0x20001264

08006248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800624e:	e048      	b.n	80062e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006250:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <prvSwitchTimerLists+0xc0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625a:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <prvSwitchTimerLists+0xc0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe f905 	bl	8004478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d02e      	beq.n	80062e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	429a      	cmp	r2, r3
 8006294:	d90e      	bls.n	80062b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7fe f8aa 	bl	8004406 <vListInsert>
 80062b2:	e016      	b.n	80062e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062b4:	2300      	movs	r3, #0
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	2100      	movs	r1, #0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fd60 	bl	8005d84 <xTimerGenericCommand>
 80062c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	603b      	str	r3, [r7, #0]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1b1      	bne.n	8006250 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <prvSwitchTimerLists+0xc4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a04      	ldr	r2, [pc, #16]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062fa:	4a04      	ldr	r2, [pc, #16]	; (800630c <prvSwitchTimerLists+0xc4>)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6013      	str	r3, [r2, #0]
}
 8006300:	bf00      	nop
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	2000125c 	.word	0x2000125c
 800630c:	20001260 	.word	0x20001260

08006310 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006316:	f000 f965 	bl	80065e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800631a:	4b15      	ldr	r3, [pc, #84]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d120      	bne.n	8006364 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006322:	4814      	ldr	r0, [pc, #80]	; (8006374 <prvCheckForValidListAndQueue+0x64>)
 8006324:	f7fe f81e 	bl	8004364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006328:	4813      	ldr	r0, [pc, #76]	; (8006378 <prvCheckForValidListAndQueue+0x68>)
 800632a:	f7fe f81b 	bl	8004364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <prvCheckForValidListAndQueue+0x6c>)
 8006330:	4a10      	ldr	r2, [pc, #64]	; (8006374 <prvCheckForValidListAndQueue+0x64>)
 8006332:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <prvCheckForValidListAndQueue+0x70>)
 8006336:	4a10      	ldr	r2, [pc, #64]	; (8006378 <prvCheckForValidListAndQueue+0x68>)
 8006338:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <prvCheckForValidListAndQueue+0x74>)
 8006340:	4a11      	ldr	r2, [pc, #68]	; (8006388 <prvCheckForValidListAndQueue+0x78>)
 8006342:	2110      	movs	r1, #16
 8006344:	200a      	movs	r0, #10
 8006346:	f7fe f929 	bl	800459c <xQueueGenericCreateStatic>
 800634a:	4603      	mov	r3, r0
 800634c:	4a08      	ldr	r2, [pc, #32]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 800634e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	490b      	ldr	r1, [pc, #44]	; (800638c <prvCheckForValidListAndQueue+0x7c>)
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fd42 	bl	8004de8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006364:	f000 f96e 	bl	8006644 <vPortExitCritical>
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20001264 	.word	0x20001264
 8006374:	20001234 	.word	0x20001234
 8006378:	20001248 	.word	0x20001248
 800637c:	2000125c 	.word	0x2000125c
 8006380:	20001260 	.word	0x20001260
 8006384:	20001310 	.word	0x20001310
 8006388:	20001270 	.word	0x20001270
 800638c:	08006fe0 	.word	0x08006fe0

08006390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3b04      	subs	r3, #4
 80063a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b04      	subs	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063c0:	4a0c      	ldr	r2, [pc, #48]	; (80063f4 <pxPortInitialiseStack+0x64>)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3b14      	subs	r3, #20
 80063ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b04      	subs	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f06f 0202 	mvn.w	r2, #2
 80063de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b20      	subs	r3, #32
 80063e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	080063f9 	.word	0x080063f9

080063f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <prvTaskExitError+0x54>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640a:	d00a      	beq.n	8006422 <prvTaskExitError+0x2a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <prvTaskExitError+0x28>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006436:	bf00      	nop
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0fc      	beq.n	8006438 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20000014 	.word	0x20000014

08006450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <pxCurrentTCBConst2>)
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f380 8809 	msr	PSP, r0
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8811 	msr	BASEPRI, r0
 800646a:	4770      	bx	lr
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst2>:
 8006470:	20000d34 	.word	0x20000d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <prvPortStartFirstTask+0x24>)
 800647a:	6800      	ldr	r0, [r0, #0]
 800647c:	6800      	ldr	r0, [r0, #0]
 800647e:	f380 8808 	msr	MSP, r0
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f380 8814 	msr	CONTROL, r0
 800648a:	b662      	cpsie	i
 800648c:	b661      	cpsie	f
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	df00      	svc	0
 8006498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800649a:	bf00      	nop
 800649c:	e000ed08 	.word	0xe000ed08

080064a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064a6:	4b46      	ldr	r3, [pc, #280]	; (80065c0 <xPortStartScheduler+0x120>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a46      	ldr	r2, [pc, #280]	; (80065c4 <xPortStartScheduler+0x124>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10a      	bne.n	80064c6 <xPortStartScheduler+0x26>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <xPortStartScheduler+0x120>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3f      	ldr	r2, [pc, #252]	; (80065c8 <xPortStartScheduler+0x128>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10a      	bne.n	80064e6 <xPortStartScheduler+0x46>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <xPortStartScheduler+0x12c>)
 80064e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <xPortStartScheduler+0x130>)
 800650c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800650e:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <xPortStartScheduler+0x134>)
 8006510:	2207      	movs	r2, #7
 8006512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006514:	e009      	b.n	800652a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006516:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <xPortStartScheduler+0x134>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <xPortStartScheduler+0x134>)
 800651e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d0ef      	beq.n	8006516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <xPortStartScheduler+0x134>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f1c3 0307 	rsb	r3, r3, #7
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00a      	beq.n	8006558 <xPortStartScheduler+0xb8>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	60bb      	str	r3, [r7, #8]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <xPortStartScheduler+0x134>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <xPortStartScheduler+0x134>)
 8006560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <xPortStartScheduler+0x134>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <xPortStartScheduler+0x134>)
 800656c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <xPortStartScheduler+0x138>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <xPortStartScheduler+0x138>)
 800657c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <xPortStartScheduler+0x138>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <xPortStartScheduler+0x138>)
 8006588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800658c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800658e:	f000 f8dd 	bl	800674c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <xPortStartScheduler+0x13c>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006598:	f000 f8fc 	bl	8006794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800659c:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <xPortStartScheduler+0x140>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <xPortStartScheduler+0x140>)
 80065a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065a8:	f7ff ff66 	bl	8006478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ac:	f7ff f84c 	bl	8005648 <vTaskSwitchContext>
	prvTaskExitError();
 80065b0:	f7ff ff22 	bl	80063f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	e000ed00 	.word	0xe000ed00
 80065c4:	410fc271 	.word	0x410fc271
 80065c8:	410fc270 	.word	0x410fc270
 80065cc:	e000e400 	.word	0xe000e400
 80065d0:	20001360 	.word	0x20001360
 80065d4:	20001364 	.word	0x20001364
 80065d8:	e000ed20 	.word	0xe000ed20
 80065dc:	20000014 	.word	0x20000014
 80065e0:	e000ef34 	.word	0xe000ef34

080065e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	607b      	str	r3, [r7, #4]
}
 80065fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <vPortEnterCritical+0x58>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a0d      	ldr	r2, [pc, #52]	; (800663c <vPortEnterCritical+0x58>)
 8006606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <vPortEnterCritical+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10f      	bne.n	8006630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <vPortEnterCritical+0x5c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <vPortEnterCritical+0x4c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <vPortEnterCritical+0x4a>
	}
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000014 	.word	0x20000014
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <vPortExitCritical+0x50>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <vPortExitCritical+0x24>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	607b      	str	r3, [r7, #4]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <vPortExitCritical+0x50>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <vPortExitCritical+0x50>)
 8006670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006672:	4b08      	ldr	r3, [pc, #32]	; (8006694 <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <vPortExitCritical+0x42>
 800667a:	2300      	movs	r3, #0
 800667c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f383 8811 	msr	BASEPRI, r3
}
 8006684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000014 	.word	0x20000014
	...

080066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f01e 0f10 	tst.w	lr, #16
 80066b0:	bf08      	it	eq
 80066b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066c4:	f380 8811 	msr	BASEPRI, r0
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f7fe ffba 	bl	8005648 <vTaskSwitchContext>
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f380 8811 	msr	BASEPRI, r0
 80066dc:	bc09      	pop	{r0, r3}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	f01e 0f10 	tst.w	lr, #16
 80066ea:	bf08      	it	eq
 80066ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066f0:	f380 8809 	msr	PSP, r0
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w

08006700 <pxCurrentTCBConst>:
 8006700:	20000d34 	.word	0x20000d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	607b      	str	r3, [r7, #4]
}
 8006720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006722:	f7fe fed7 	bl	80054d4 <xTaskIncrementTick>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <xPortSysTickHandler+0x40>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f383 8811 	msr	BASEPRI, r3
}
 800673e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <vPortSetupTimerInterrupt+0x38>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <vPortSetupTimerInterrupt+0x3c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <vPortSetupTimerInterrupt+0x40>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <vPortSetupTimerInterrupt+0x44>)
 800676a:	3b01      	subs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	e000e010 	.word	0xe000e010
 8006784:	e000e018 	.word	0xe000e018
 8006788:	20000008 	.word	0x20000008
 800678c:	10624dd3 	.word	0x10624dd3
 8006790:	e000e014 	.word	0xe000e014

08006794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067a4 <vPortEnableVFP+0x10>
 8006798:	6801      	ldr	r1, [r0, #0]
 800679a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800679e:	6001      	str	r1, [r0, #0]
 80067a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067a2:	bf00      	nop
 80067a4:	e000ed88 	.word	0xe000ed88

080067a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d914      	bls.n	80067e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <vPortValidateInterruptPriority+0x70>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067c4:	4b15      	ldr	r3, [pc, #84]	; (800681c <vPortValidateInterruptPriority+0x74>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	7afa      	ldrb	r2, [r7, #11]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d20a      	bcs.n	80067e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	607b      	str	r3, [r7, #4]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067e4:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <vPortValidateInterruptPriority+0x78>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ec:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <vPortValidateInterruptPriority+0x7c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d90a      	bls.n	800680a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	603b      	str	r3, [r7, #0]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <vPortValidateInterruptPriority+0x60>
	}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	e000e3f0 	.word	0xe000e3f0
 800681c:	20001360 	.word	0x20001360
 8006820:	e000ed0c 	.word	0xe000ed0c
 8006824:	20001364 	.word	0x20001364

08006828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006834:	f7fe fd92 	bl	800535c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006838:	4b5b      	ldr	r3, [pc, #364]	; (80069a8 <pvPortMalloc+0x180>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006840:	f000 f920 	bl	8006a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <pvPortMalloc+0x184>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8093 	bne.w	8006978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01d      	beq.n	8006894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006858:	2208      	movs	r2, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d014      	beq.n	8006894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	3308      	adds	r3, #8
 8006872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <pvPortMalloc+0x6c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	617b      	str	r3, [r7, #20]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06e      	beq.n	8006978 <pvPortMalloc+0x150>
 800689a:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <pvPortMalloc+0x188>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d869      	bhi.n	8006978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068a4:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <pvPortMalloc+0x18c>)
 80068a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068a8:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <pvPortMalloc+0x18c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ae:	e004      	b.n	80068ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <pvPortMalloc+0xa4>
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f1      	bne.n	80068b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <pvPortMalloc+0x180>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d050      	beq.n	8006978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	4413      	add	r3, r2
 80068de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	2308      	movs	r3, #8
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d91f      	bls.n	8006938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <pvPortMalloc+0xf8>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	613b      	str	r3, [r7, #16]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006932:	69b8      	ldr	r0, [r7, #24]
 8006934:	f000 f908 	bl	8006b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <pvPortMalloc+0x188>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <pvPortMalloc+0x188>)
 8006944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006946:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <pvPortMalloc+0x188>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <pvPortMalloc+0x190>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <pvPortMalloc+0x188>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <pvPortMalloc+0x190>)
 8006958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <pvPortMalloc+0x184>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	431a      	orrs	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x194>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a11      	ldr	r2, [pc, #68]	; (80069bc <pvPortMalloc+0x194>)
 8006976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006978:	f7fe fcfe 	bl	8005378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <pvPortMalloc+0x174>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <pvPortMalloc+0x172>
	return pvReturn;
 800699c:	69fb      	ldr	r3, [r7, #28]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20004f70 	.word	0x20004f70
 80069ac:	20004f84 	.word	0x20004f84
 80069b0:	20004f74 	.word	0x20004f74
 80069b4:	20004f68 	.word	0x20004f68
 80069b8:	20004f78 	.word	0x20004f78
 80069bc:	20004f7c 	.word	0x20004f7c

080069c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d2:	2308      	movs	r3, #8
 80069d4:	425b      	negs	r3, r3
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <vPortFree+0xb8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <vPortFree+0x44>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60fb      	str	r3, [r7, #12]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <vPortFree+0x62>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60bb      	str	r3, [r7, #8]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <vPortFree+0xb8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01e      	beq.n	8006a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <vPortFree+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a48:	f7fe fc88 	bl	800535c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <vPortFree+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <vPortFree+0xbc>)
 8006a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f000 f874 	bl	8006b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <vPortFree+0xc0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vPortFree+0xc0>)
 8006a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a6a:	f7fe fc85 	bl	8005378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20004f84 	.word	0x20004f84
 8006a7c:	20004f74 	.word	0x20004f74
 8006a80:	20004f80 	.word	0x20004f80

08006a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <prvHeapInit+0xac>)
 8006a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <prvHeapInit+0xac>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <prvHeapInit+0xb0>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <prvHeapInit+0xb0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <prvHeapInit+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <prvHeapInit+0xb4>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <prvHeapInit+0xb8>)
 8006b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <prvHeapInit+0xbc>)
 8006b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <prvHeapInit+0xc0>)
 8006b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20001368 	.word	0x20001368
 8006b34:	20004f68 	.word	0x20004f68
 8006b38:	20004f70 	.word	0x20004f70
 8006b3c:	20004f78 	.word	0x20004f78
 8006b40:	20004f74 	.word	0x20004f74
 8006b44:	20004f84 	.word	0x20004f84

08006b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <prvInsertBlockIntoFreeList+0xac>)
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e002      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x14>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d8f7      	bhi.n	8006b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d108      	bne.n	8006b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d118      	bne.n	8006bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00d      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e008      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e003      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d002      	beq.n	8006be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20004f68 	.word	0x20004f68
 8006bf8:	20004f70 	.word	0x20004f70

08006bfc <malloc>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	; (8006c08 <malloc+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f000 b823 	b.w	8006c4c <_malloc_r>
 8006c06:	bf00      	nop
 8006c08:	20000064 	.word	0x20000064

08006c0c <sbrk_aligned>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4e0e      	ldr	r6, [pc, #56]	; (8006c48 <sbrk_aligned+0x3c>)
 8006c10:	460c      	mov	r4, r1
 8006c12:	6831      	ldr	r1, [r6, #0]
 8006c14:	4605      	mov	r5, r0
 8006c16:	b911      	cbnz	r1, 8006c1e <sbrk_aligned+0x12>
 8006c18:	f000 f912 	bl	8006e40 <_sbrk_r>
 8006c1c:	6030      	str	r0, [r6, #0]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 f90d 	bl	8006e40 <_sbrk_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d00a      	beq.n	8006c40 <sbrk_aligned+0x34>
 8006c2a:	1cc4      	adds	r4, r0, #3
 8006c2c:	f024 0403 	bic.w	r4, r4, #3
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d007      	beq.n	8006c44 <sbrk_aligned+0x38>
 8006c34:	1a21      	subs	r1, r4, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f902 	bl	8006e40 <_sbrk_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d101      	bne.n	8006c44 <sbrk_aligned+0x38>
 8006c40:	f04f 34ff 	mov.w	r4, #4294967295
 8006c44:	4620      	mov	r0, r4
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	20004f8c 	.word	0x20004f8c

08006c4c <_malloc_r>:
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	1ccd      	adds	r5, r1, #3
 8006c52:	f025 0503 	bic.w	r5, r5, #3
 8006c56:	3508      	adds	r5, #8
 8006c58:	2d0c      	cmp	r5, #12
 8006c5a:	bf38      	it	cc
 8006c5c:	250c      	movcc	r5, #12
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	4607      	mov	r7, r0
 8006c62:	db01      	blt.n	8006c68 <_malloc_r+0x1c>
 8006c64:	42a9      	cmp	r1, r5
 8006c66:	d905      	bls.n	8006c74 <_malloc_r+0x28>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d48 <_malloc_r+0xfc>
 8006c78:	f000 f868 	bl	8006d4c <__malloc_lock>
 8006c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c80:	461c      	mov	r4, r3
 8006c82:	bb5c      	cbnz	r4, 8006cdc <_malloc_r+0x90>
 8006c84:	4629      	mov	r1, r5
 8006c86:	4638      	mov	r0, r7
 8006c88:	f7ff ffc0 	bl	8006c0c <sbrk_aligned>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	4604      	mov	r4, r0
 8006c90:	d155      	bne.n	8006d3e <_malloc_r+0xf2>
 8006c92:	f8d8 4000 	ldr.w	r4, [r8]
 8006c96:	4626      	mov	r6, r4
 8006c98:	2e00      	cmp	r6, #0
 8006c9a:	d145      	bne.n	8006d28 <_malloc_r+0xdc>
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	d048      	beq.n	8006d32 <_malloc_r+0xe6>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	eb04 0903 	add.w	r9, r4, r3
 8006caa:	f000 f8c9 	bl	8006e40 <_sbrk_r>
 8006cae:	4581      	cmp	r9, r0
 8006cb0:	d13f      	bne.n	8006d32 <_malloc_r+0xe6>
 8006cb2:	6821      	ldr	r1, [r4, #0]
 8006cb4:	1a6d      	subs	r5, r5, r1
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ffa7 	bl	8006c0c <sbrk_aligned>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d037      	beq.n	8006d32 <_malloc_r+0xe6>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	442b      	add	r3, r5
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d038      	beq.n	8006d42 <_malloc_r+0xf6>
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	42a2      	cmp	r2, r4
 8006cd4:	d12b      	bne.n	8006d2e <_malloc_r+0xe2>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	e00f      	b.n	8006cfc <_malloc_r+0xb0>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	1b52      	subs	r2, r2, r5
 8006ce0:	d41f      	bmi.n	8006d22 <_malloc_r+0xd6>
 8006ce2:	2a0b      	cmp	r2, #11
 8006ce4:	d917      	bls.n	8006d16 <_malloc_r+0xca>
 8006ce6:	1961      	adds	r1, r4, r5
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	6025      	str	r5, [r4, #0]
 8006cec:	bf18      	it	ne
 8006cee:	6059      	strne	r1, [r3, #4]
 8006cf0:	6863      	ldr	r3, [r4, #4]
 8006cf2:	bf08      	it	eq
 8006cf4:	f8c8 1000 	streq.w	r1, [r8]
 8006cf8:	5162      	str	r2, [r4, r5]
 8006cfa:	604b      	str	r3, [r1, #4]
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	f104 060b 	add.w	r6, r4, #11
 8006d02:	f000 f829 	bl	8006d58 <__malloc_unlock>
 8006d06:	f026 0607 	bic.w	r6, r6, #7
 8006d0a:	1d23      	adds	r3, r4, #4
 8006d0c:	1af2      	subs	r2, r6, r3
 8006d0e:	d0ae      	beq.n	8006c6e <_malloc_r+0x22>
 8006d10:	1b9b      	subs	r3, r3, r6
 8006d12:	50a3      	str	r3, [r4, r2]
 8006d14:	e7ab      	b.n	8006c6e <_malloc_r+0x22>
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	6862      	ldr	r2, [r4, #4]
 8006d1a:	d1dd      	bne.n	8006cd8 <_malloc_r+0x8c>
 8006d1c:	f8c8 2000 	str.w	r2, [r8]
 8006d20:	e7ec      	b.n	8006cfc <_malloc_r+0xb0>
 8006d22:	4623      	mov	r3, r4
 8006d24:	6864      	ldr	r4, [r4, #4]
 8006d26:	e7ac      	b.n	8006c82 <_malloc_r+0x36>
 8006d28:	4634      	mov	r4, r6
 8006d2a:	6876      	ldr	r6, [r6, #4]
 8006d2c:	e7b4      	b.n	8006c98 <_malloc_r+0x4c>
 8006d2e:	4613      	mov	r3, r2
 8006d30:	e7cc      	b.n	8006ccc <_malloc_r+0x80>
 8006d32:	230c      	movs	r3, #12
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	4638      	mov	r0, r7
 8006d38:	f000 f80e 	bl	8006d58 <__malloc_unlock>
 8006d3c:	e797      	b.n	8006c6e <_malloc_r+0x22>
 8006d3e:	6025      	str	r5, [r4, #0]
 8006d40:	e7dc      	b.n	8006cfc <_malloc_r+0xb0>
 8006d42:	605b      	str	r3, [r3, #4]
 8006d44:	deff      	udf	#255	; 0xff
 8006d46:	bf00      	nop
 8006d48:	20004f88 	.word	0x20004f88

08006d4c <__malloc_lock>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	; (8006d54 <__malloc_lock+0x8>)
 8006d4e:	f000 b8b1 	b.w	8006eb4 <__retarget_lock_acquire_recursive>
 8006d52:	bf00      	nop
 8006d54:	200050cc 	.word	0x200050cc

08006d58 <__malloc_unlock>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__malloc_unlock+0x8>)
 8006d5a:	f000 b8ac 	b.w	8006eb6 <__retarget_lock_release_recursive>
 8006d5e:	bf00      	nop
 8006d60:	200050cc 	.word	0x200050cc

08006d64 <memset>:
 8006d64:	4402      	add	r2, r0
 8006d66:	4603      	mov	r3, r0
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d100      	bne.n	8006d6e <memset+0xa>
 8006d6c:	4770      	bx	lr
 8006d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d72:	e7f9      	b.n	8006d68 <memset+0x4>

08006d74 <strcat>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	4602      	mov	r2, r0
 8006d78:	7814      	ldrb	r4, [r2, #0]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	3201      	adds	r2, #1
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	d1fa      	bne.n	8006d78 <strcat+0x4>
 8006d82:	3b01      	subs	r3, #1
 8006d84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	d1f9      	bne.n	8006d84 <strcat+0x10>
 8006d90:	bd10      	pop	{r4, pc}
	...

08006d94 <_reclaim_reent>:
 8006d94:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <_reclaim_reent+0xa8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4283      	cmp	r3, r0
 8006d9a:	b570      	push	{r4, r5, r6, lr}
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	d04b      	beq.n	8006e38 <_reclaim_reent+0xa4>
 8006da0:	69c3      	ldr	r3, [r0, #28]
 8006da2:	b143      	cbz	r3, 8006db6 <_reclaim_reent+0x22>
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d144      	bne.n	8006e34 <_reclaim_reent+0xa0>
 8006daa:	69e3      	ldr	r3, [r4, #28]
 8006dac:	6819      	ldr	r1, [r3, #0]
 8006dae:	b111      	cbz	r1, 8006db6 <_reclaim_reent+0x22>
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 f88f 	bl	8006ed4 <_free_r>
 8006db6:	6961      	ldr	r1, [r4, #20]
 8006db8:	b111      	cbz	r1, 8006dc0 <_reclaim_reent+0x2c>
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 f88a 	bl	8006ed4 <_free_r>
 8006dc0:	69e1      	ldr	r1, [r4, #28]
 8006dc2:	b111      	cbz	r1, 8006dca <_reclaim_reent+0x36>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 f885 	bl	8006ed4 <_free_r>
 8006dca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dcc:	b111      	cbz	r1, 8006dd4 <_reclaim_reent+0x40>
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f880 	bl	8006ed4 <_free_r>
 8006dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd6:	b111      	cbz	r1, 8006dde <_reclaim_reent+0x4a>
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 f87b 	bl	8006ed4 <_free_r>
 8006dde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006de0:	b111      	cbz	r1, 8006de8 <_reclaim_reent+0x54>
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f876 	bl	8006ed4 <_free_r>
 8006de8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006dea:	b111      	cbz	r1, 8006df2 <_reclaim_reent+0x5e>
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 f871 	bl	8006ed4 <_free_r>
 8006df2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006df4:	b111      	cbz	r1, 8006dfc <_reclaim_reent+0x68>
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 f86c 	bl	8006ed4 <_free_r>
 8006dfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006dfe:	b111      	cbz	r1, 8006e06 <_reclaim_reent+0x72>
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 f867 	bl	8006ed4 <_free_r>
 8006e06:	6a23      	ldr	r3, [r4, #32]
 8006e08:	b1b3      	cbz	r3, 8006e38 <_reclaim_reent+0xa4>
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e10:	4718      	bx	r3
 8006e12:	5949      	ldr	r1, [r1, r5]
 8006e14:	b941      	cbnz	r1, 8006e28 <_reclaim_reent+0x94>
 8006e16:	3504      	adds	r5, #4
 8006e18:	69e3      	ldr	r3, [r4, #28]
 8006e1a:	2d80      	cmp	r5, #128	; 0x80
 8006e1c:	68d9      	ldr	r1, [r3, #12]
 8006e1e:	d1f8      	bne.n	8006e12 <_reclaim_reent+0x7e>
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 f857 	bl	8006ed4 <_free_r>
 8006e26:	e7c0      	b.n	8006daa <_reclaim_reent+0x16>
 8006e28:	680e      	ldr	r6, [r1, #0]
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 f852 	bl	8006ed4 <_free_r>
 8006e30:	4631      	mov	r1, r6
 8006e32:	e7ef      	b.n	8006e14 <_reclaim_reent+0x80>
 8006e34:	2500      	movs	r5, #0
 8006e36:	e7ef      	b.n	8006e18 <_reclaim_reent+0x84>
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000064 	.word	0x20000064

08006e40 <_sbrk_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d06      	ldr	r5, [pc, #24]	; (8006e5c <_sbrk_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	f7fa fc34 	bl	80016b8 <_sbrk>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_sbrk_r+0x1a>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_sbrk_r+0x1a>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	200050c8 	.word	0x200050c8

08006e60 <__errno>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	; (8006e68 <__errno+0x8>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000064 	.word	0x20000064

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	; (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	; (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	; (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f000 f874 	bl	8006f6c <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08007df4 	.word	0x08007df4
 8006ea8:	08007df4 	.word	0x08007df4
 8006eac:	08007df4 	.word	0x08007df4
 8006eb0:	08007df8 	.word	0x08007df8

08006eb4 <__retarget_lock_acquire_recursive>:
 8006eb4:	4770      	bx	lr

08006eb6 <__retarget_lock_release_recursive>:
 8006eb6:	4770      	bx	lr

08006eb8 <memcpy>:
 8006eb8:	440a      	add	r2, r1
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec0:	d100      	bne.n	8006ec4 <memcpy+0xc>
 8006ec2:	4770      	bx	lr
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	d1f9      	bne.n	8006ec6 <memcpy+0xe>
 8006ed2:	bd10      	pop	{r4, pc}

08006ed4 <_free_r>:
 8006ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d044      	beq.n	8006f64 <_free_r+0x90>
 8006eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ede:	9001      	str	r0, [sp, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ee6:	bfb8      	it	lt
 8006ee8:	18e4      	addlt	r4, r4, r3
 8006eea:	f7ff ff2f 	bl	8006d4c <__malloc_lock>
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <_free_r+0x94>)
 8006ef0:	9801      	ldr	r0, [sp, #4]
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	b933      	cbnz	r3, 8006f04 <_free_r+0x30>
 8006ef6:	6063      	str	r3, [r4, #4]
 8006ef8:	6014      	str	r4, [r2, #0]
 8006efa:	b003      	add	sp, #12
 8006efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f00:	f7ff bf2a 	b.w	8006d58 <__malloc_unlock>
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	d908      	bls.n	8006f1a <_free_r+0x46>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	1961      	adds	r1, r4, r5
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	bf01      	itttt	eq
 8006f10:	6819      	ldreq	r1, [r3, #0]
 8006f12:	685b      	ldreq	r3, [r3, #4]
 8006f14:	1949      	addeq	r1, r1, r5
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	e7ed      	b.n	8006ef6 <_free_r+0x22>
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	b10b      	cbz	r3, 8006f24 <_free_r+0x50>
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d9fa      	bls.n	8006f1a <_free_r+0x46>
 8006f24:	6811      	ldr	r1, [r2, #0]
 8006f26:	1855      	adds	r5, r2, r1
 8006f28:	42a5      	cmp	r5, r4
 8006f2a:	d10b      	bne.n	8006f44 <_free_r+0x70>
 8006f2c:	6824      	ldr	r4, [r4, #0]
 8006f2e:	4421      	add	r1, r4
 8006f30:	1854      	adds	r4, r2, r1
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	6011      	str	r1, [r2, #0]
 8006f36:	d1e0      	bne.n	8006efa <_free_r+0x26>
 8006f38:	681c      	ldr	r4, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	6053      	str	r3, [r2, #4]
 8006f3e:	440c      	add	r4, r1
 8006f40:	6014      	str	r4, [r2, #0]
 8006f42:	e7da      	b.n	8006efa <_free_r+0x26>
 8006f44:	d902      	bls.n	8006f4c <_free_r+0x78>
 8006f46:	230c      	movs	r3, #12
 8006f48:	6003      	str	r3, [r0, #0]
 8006f4a:	e7d6      	b.n	8006efa <_free_r+0x26>
 8006f4c:	6825      	ldr	r5, [r4, #0]
 8006f4e:	1961      	adds	r1, r4, r5
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf04      	itt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	6063      	str	r3, [r4, #4]
 8006f5a:	bf04      	itt	eq
 8006f5c:	1949      	addeq	r1, r1, r5
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	6054      	str	r4, [r2, #4]
 8006f62:	e7ca      	b.n	8006efa <_free_r+0x26>
 8006f64:	b003      	add	sp, #12
 8006f66:	bd30      	pop	{r4, r5, pc}
 8006f68:	20004f88 	.word	0x20004f88

08006f6c <_init>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	bf00      	nop
 8006f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f72:	bc08      	pop	{r3}
 8006f74:	469e      	mov	lr, r3
 8006f76:	4770      	bx	lr

08006f78 <_fini>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr
