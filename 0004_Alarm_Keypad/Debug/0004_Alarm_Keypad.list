
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005530  08005530  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005538  08005538  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af4  20000064  080055a4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  080055a4  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001868b  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bf  00000000  00000000  00038762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f9  00000000  00000000  0003cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d63  00000000  00000000  0003e0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6ee  00000000  00000000  00061e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcdba  00000000  00000000  0007c4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eb0  00000000  00000000  001592b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0015f164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800477c 	.word	0x0800477c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800477c 	.word	0x0800477c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b970 	b.w	800052c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d965      	bls.n	8000346 <__udivmoddi4+0xe2>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa20 f202 	lsr.w	r2, r0, r2
 800028e:	4317      	orrs	r7, r2
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	fbb7 f1fe 	udiv	r1, r7, lr
 800029e:	0c22      	lsrs	r2, r4, #16
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a8:	fb01 f005 	mul.w	r0, r1, r5
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	f080 811c 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8119 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	fb00 f505 	mul.w	r5, r0, r5
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x294>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x294>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xbc>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ed 	beq.w	80004ee <__udivmoddi4+0x28a>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d149      	bne.n	80003bc <__udivmoddi4+0x158>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xce>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4617      	mov	r7, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000340:	e9c6 4700 	strd	r4, r7, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa2>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xe6>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x210>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035a:	fa1f fe8c 	uxth.w	lr, ip
 800035e:	2101      	movs	r1, #1
 8000360:	fbb2 f5f7 	udiv	r5, r2, r7
 8000364:	fb07 2015 	mls	r0, r7, r5, r2
 8000368:	0c22      	lsrs	r2, r4, #16
 800036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036e:	fb0e f005 	mul.w	r0, lr, r5
 8000372:	4290      	cmp	r0, r2
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x124>
 8000376:	eb1c 0202 	adds.w	r2, ip, r2
 800037a:	f105 38ff 	add.w	r8, r5, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4290      	cmp	r0, r2
 8000382:	f200 80cb 	bhi.w	800051c <__udivmoddi4+0x2b8>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000398:	fb0e fe00 	mul.w	lr, lr, r0
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f200 80bb 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	eba4 040e 	sub.w	r4, r4, lr
 80003b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ba:	e79f      	b.n	80002fc <__udivmoddi4+0x98>
 80003bc:	f1c1 0720 	rsb	r7, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa05 f401 	lsl.w	r4, r5, r1
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	40fd      	lsrs	r5, r7
 80003d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fbb5 f8f9 	udiv	r8, r5, r9
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fb09 5518 	mls	r5, r9, r8, r5
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb08 f50e 	mul.w	r5, r8, lr
 80003f0:	42a5      	cmp	r5, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	fa00 f001 	lsl.w	r0, r0, r1
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f108 3aff 	add.w	sl, r8, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	42a5      	cmp	r5, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a8 0802 	sub.w	r8, r8, #2
 8000412:	4464      	add	r4, ip
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	b29d      	uxth	r5, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	fb03 fe0e 	mul.w	lr, r3, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f103 35ff 	add.w	r5, r3, #4294967295
 8000434:	d26c      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000436:	45a6      	cmp	lr, r4
 8000438:	d96a      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043a:	3b02      	subs	r3, #2
 800043c:	4464      	add	r4, ip
 800043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000442:	fba3 9502 	umull	r9, r5, r3, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	42ac      	cmp	r4, r5
 800044c:	46c8      	mov	r8, r9
 800044e:	46ae      	mov	lr, r5
 8000450:	d356      	bcc.n	8000500 <__udivmoddi4+0x29c>
 8000452:	d053      	beq.n	80004fc <__udivmoddi4+0x298>
 8000454:	b156      	cbz	r6, 800046c <__udivmoddi4+0x208>
 8000456:	ebb0 0208 	subs.w	r2, r0, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	fa04 f707 	lsl.w	r7, r4, r7
 8000462:	40ca      	lsrs	r2, r1
 8000464:	40cc      	lsrs	r4, r1
 8000466:	4317      	orrs	r7, r2
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	4618      	mov	r0, r3
 800046e:	2100      	movs	r1, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	f1c3 0120 	rsb	r1, r3, #32
 8000478:	fa02 fc03 	lsl.w	ip, r2, r3
 800047c:	fa20 f201 	lsr.w	r2, r0, r1
 8000480:	fa25 f101 	lsr.w	r1, r5, r1
 8000484:	409d      	lsls	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1510 	mls	r5, r7, r0, r1
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	fb00 f50e 	mul.w	r5, r0, lr
 80004a2:	428d      	cmp	r5, r1
 80004a4:	fa04 f403 	lsl.w	r4, r4, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x258>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b2:	d22f      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	428d      	cmp	r5, r1
 80004b6:	d92d      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1b49      	subs	r1, r1, r5
 80004be:	b292      	uxth	r2, r2
 80004c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c4:	fb07 1115 	mls	r1, r7, r5, r1
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	fb05 f10e 	mul.w	r1, r5, lr
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x282>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004dc:	d216      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004de:	4291      	cmp	r1, r2
 80004e0:	d914      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004e2:	3d02      	subs	r5, #2
 80004e4:	4462      	add	r2, ip
 80004e6:	1a52      	subs	r2, r2, r1
 80004e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ec:	e738      	b.n	8000360 <__udivmoddi4+0xfc>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xa2>
 80004f4:	4639      	mov	r1, r7
 80004f6:	e6e6      	b.n	80002c6 <__udivmoddi4+0x62>
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x90>
 80004fc:	4548      	cmp	r0, r9
 80004fe:	d2a9      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 8000500:	ebb9 0802 	subs.w	r8, r9, r2
 8000504:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000508:	3b01      	subs	r3, #1
 800050a:	e7a3      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050c:	4645      	mov	r5, r8
 800050e:	e7ea      	b.n	80004e6 <__udivmoddi4+0x282>
 8000510:	462b      	mov	r3, r5
 8000512:	e794      	b.n	800043e <__udivmoddi4+0x1da>
 8000514:	4640      	mov	r0, r8
 8000516:	e7d1      	b.n	80004bc <__udivmoddi4+0x258>
 8000518:	46d0      	mov	r8, sl
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e732      	b.n	8000388 <__udivmoddi4+0x124>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xd8>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e742      	b.n	80003b2 <__udivmoddi4+0x14e>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	int done=1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	while(done)
 800053a:	e19b      	b.n	8000874 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000542:	48b3      	ldr	r0, [pc, #716]	; (8000810 <Get_Key+0x2e0>)
 8000544:	f001 fc68 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	48b0      	ldr	r0, [pc, #704]	; (8000810 <Get_Key+0x2e0>)
 800054e:	f001 fc63 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	48ae      	ldr	r0, [pc, #696]	; (8000810 <Get_Key+0x2e0>)
 8000558:	f001 fc5e 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	48ab      	ldr	r0, [pc, #684]	; (8000810 <Get_Key+0x2e0>)
 8000562:	f001 fc59 	bl	8001e18 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a9      	ldr	r0, [pc, #676]	; (8000810 <Get_Key+0x2e0>)
 800056a:	f001 fc3d 	bl	8001de8 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000574:	bf00      	nop
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	48a5      	ldr	r0, [pc, #660]	; (8000810 <Get_Key+0x2e0>)
 800057a:	f001 fc35 	bl	8001de8 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f8      	bne.n	8000576 <Get_Key+0x46>
		key='1';
 8000584:	4ba3      	ldr	r3, [pc, #652]	; (8000814 <Get_Key+0x2e4>)
 8000586:	2231      	movs	r2, #49	; 0x31
 8000588:	701a      	strb	r2, [r3, #0]
		break;
 800058a:	e177      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	48a2      	ldr	r0, [pc, #648]	; (8000818 <Get_Key+0x2e8>)
 8000590:	f001 fc2a 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800059a:	bf00      	nop
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	489e      	ldr	r0, [pc, #632]	; (8000818 <Get_Key+0x2e8>)
 80005a0:	f001 fc22 	bl	8001de8 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f8      	bne.n	800059c <Get_Key+0x6c>
		key='4';
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <Get_Key+0x2e4>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	701a      	strb	r2, [r3, #0]
		break;
 80005b0:	e164      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4899      	ldr	r0, [pc, #612]	; (800081c <Get_Key+0x2ec>)
 80005b8:	f001 fc16 	bl	8001de8 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005c2:	bf00      	nop
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4894      	ldr	r0, [pc, #592]	; (800081c <Get_Key+0x2ec>)
 80005ca:	f001 fc0d 	bl	8001de8 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f7      	bne.n	80005c4 <Get_Key+0x94>
		key='7';
 80005d4:	4b8f      	ldr	r3, [pc, #572]	; (8000814 <Get_Key+0x2e4>)
 80005d6:	2237      	movs	r2, #55	; 0x37
 80005d8:	701a      	strb	r2, [r3, #0]
		break;
 80005da:	e14f      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	488e      	ldr	r0, [pc, #568]	; (800081c <Get_Key+0x2ec>)
 80005e2:	f001 fc01 	bl	8001de8 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005ec:	bf00      	nop
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	488a      	ldr	r0, [pc, #552]	; (800081c <Get_Key+0x2ec>)
 80005f4:	f001 fbf8 	bl	8001de8 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <Get_Key+0xbe>
		key='*';
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <Get_Key+0x2e4>)
 8000600:	222a      	movs	r2, #42	; 0x2a
 8000602:	701a      	strb	r2, [r3, #0]
		break;
 8000604:	e13a      	b.n	800087c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4880      	ldr	r0, [pc, #512]	; (8000810 <Get_Key+0x2e0>)
 800060e:	f001 fc03 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	487e      	ldr	r0, [pc, #504]	; (8000810 <Get_Key+0x2e0>)
 8000618:	f001 fbfe 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	487b      	ldr	r0, [pc, #492]	; (8000810 <Get_Key+0x2e0>)
 8000622:	f001 fbf9 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	4879      	ldr	r0, [pc, #484]	; (8000810 <Get_Key+0x2e0>)
 800062c:	f001 fbf4 	bl	8001e18 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4877      	ldr	r0, [pc, #476]	; (8000810 <Get_Key+0x2e0>)
 8000634:	f001 fbd8 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00b      	beq.n	8000656 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800063e:	bf00      	nop
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4873      	ldr	r0, [pc, #460]	; (8000810 <Get_Key+0x2e0>)
 8000644:	f001 fbd0 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f8      	bne.n	8000640 <Get_Key+0x110>
		key='2';
 800064e:	4b71      	ldr	r3, [pc, #452]	; (8000814 <Get_Key+0x2e4>)
 8000650:	2232      	movs	r2, #50	; 0x32
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e112      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	486f      	ldr	r0, [pc, #444]	; (8000818 <Get_Key+0x2e8>)
 800065a:	f001 fbc5 	bl	8001de8 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000664:	bf00      	nop
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	486b      	ldr	r0, [pc, #428]	; (8000818 <Get_Key+0x2e8>)
 800066a:	f001 fbbd 	bl	8001de8 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f8      	bne.n	8000666 <Get_Key+0x136>
		key='5';
 8000674:	4b67      	ldr	r3, [pc, #412]	; (8000814 <Get_Key+0x2e4>)
 8000676:	2235      	movs	r2, #53	; 0x35
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e0ff      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4866      	ldr	r0, [pc, #408]	; (800081c <Get_Key+0x2ec>)
 8000682:	f001 fbb1 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800068c:	bf00      	nop
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4862      	ldr	r0, [pc, #392]	; (800081c <Get_Key+0x2ec>)
 8000694:	f001 fba8 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f7      	bne.n	800068e <Get_Key+0x15e>
		key='8';
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <Get_Key+0x2e4>)
 80006a0:	2238      	movs	r2, #56	; 0x38
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e0ea      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	485c      	ldr	r0, [pc, #368]	; (800081c <Get_Key+0x2ec>)
 80006ac:	f001 fb9c 	bl	8001de8 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00c      	beq.n	80006d0 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006b6:	bf00      	nop
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4857      	ldr	r0, [pc, #348]	; (800081c <Get_Key+0x2ec>)
 80006be:	f001 fb93 	bl	8001de8 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f7      	bne.n	80006b8 <Get_Key+0x188>
		key='0';
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <Get_Key+0x2e4>)
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	701a      	strb	r2, [r3, #0]
		break;
 80006ce:	e0d5      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	484e      	ldr	r0, [pc, #312]	; (8000810 <Get_Key+0x2e0>)
 80006d8:	f001 fb9e 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <Get_Key+0x2e0>)
 80006e2:	f001 fb99 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4849      	ldr	r0, [pc, #292]	; (8000810 <Get_Key+0x2e0>)
 80006ec:	f001 fb94 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4846      	ldr	r0, [pc, #280]	; (8000810 <Get_Key+0x2e0>)
 80006f6:	f001 fb8f 	bl	8001e18 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4844      	ldr	r0, [pc, #272]	; (8000810 <Get_Key+0x2e0>)
 80006fe:	f001 fb73 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000708:	bf00      	nop
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <Get_Key+0x2e0>)
 800070e:	f001 fb6b 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f8      	bne.n	800070a <Get_Key+0x1da>
		key='3';
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <Get_Key+0x2e4>)
 800071a:	2233      	movs	r2, #51	; 0x33
 800071c:	701a      	strb	r2, [r3, #0]
		break;
 800071e:	e0ad      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	483d      	ldr	r0, [pc, #244]	; (8000818 <Get_Key+0x2e8>)
 8000724:	f001 fb60 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00b      	beq.n	8000746 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800072e:	bf00      	nop
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4839      	ldr	r0, [pc, #228]	; (8000818 <Get_Key+0x2e8>)
 8000734:	f001 fb58 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <Get_Key+0x200>
		key='6';
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <Get_Key+0x2e4>)
 8000740:	2236      	movs	r2, #54	; 0x36
 8000742:	701a      	strb	r2, [r3, #0]
		break;
 8000744:	e09a      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <Get_Key+0x2ec>)
 800074c:	f001 fb4c 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00c      	beq.n	8000770 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000756:	bf00      	nop
 8000758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075c:	482f      	ldr	r0, [pc, #188]	; (800081c <Get_Key+0x2ec>)
 800075e:	f001 fb43 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f7      	bne.n	8000758 <Get_Key+0x228>
		key='9';
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <Get_Key+0x2e4>)
 800076a:	2239      	movs	r2, #57	; 0x39
 800076c:	701a      	strb	r2, [r3, #0]
		break;
 800076e:	e085      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <Get_Key+0x2ec>)
 8000776:	f001 fb37 	bl	8001de8 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000780:	bf00      	nop
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <Get_Key+0x2ec>)
 8000788:	f001 fb2e 	bl	8001de8 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f7      	bne.n	8000782 <Get_Key+0x252>
		key='#';
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <Get_Key+0x2e4>)
 8000794:	2223      	movs	r2, #35	; 0x23
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	e070      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <Get_Key+0x2e0>)
 80007a2:	f001 fb39 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80007a6:	2200      	movs	r2, #0
 80007a8:	2110      	movs	r1, #16
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <Get_Key+0x2e0>)
 80007ac:	f001 fb34 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <Get_Key+0x2e0>)
 80007b6:	f001 fb2f 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <Get_Key+0x2e0>)
 80007c0:	f001 fb2a 	bl	8001e18 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <Get_Key+0x2e0>)
 80007c8:	f001 fb0e 	bl	8001de8 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00b      	beq.n	80007ea <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007d2:	bf00      	nop
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <Get_Key+0x2e0>)
 80007d8:	f001 fb06 	bl	8001de8 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f8      	bne.n	80007d4 <Get_Key+0x2a4>
		key='A';
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <Get_Key+0x2e4>)
 80007e4:	2241      	movs	r2, #65	; 0x41
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e048      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <Get_Key+0x2e8>)
 80007ee:	f001 fafb 	bl	8001de8 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d013      	beq.n	8000820 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007f8:	bf00      	nop
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <Get_Key+0x2e8>)
 80007fe:	f001 faf3 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f8      	bne.n	80007fa <Get_Key+0x2ca>
		key='B';
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <Get_Key+0x2e4>)
 800080a:	2242      	movs	r2, #66	; 0x42
 800080c:	701a      	strb	r2, [r3, #0]
		break;
 800080e:	e035      	b.n	800087c <Get_Key+0x34c>
 8000810:	40020400 	.word	0x40020400
 8000814:	20000080 	.word	0x20000080
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <Get_Key+0x360>)
 8000826:	f001 fadf 	bl	8001de8 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00c      	beq.n	800084a <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000830:	bf00      	nop
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <Get_Key+0x360>)
 8000838:	f001 fad6 	bl	8001de8 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f7      	bne.n	8000832 <Get_Key+0x302>
		key='C';
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <Get_Key+0x364>)
 8000844:	2243      	movs	r2, #67	; 0x43
 8000846:	701a      	strb	r2, [r3, #0]
		break;
 8000848:	e018      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <Get_Key+0x360>)
 8000850:	f001 faca 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800085a:	bf00      	nop
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <Get_Key+0x360>)
 8000862:	f001 fac1 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f7      	bne.n	800085c <Get_Key+0x32c>
		key='D';
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <Get_Key+0x364>)
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	701a      	strb	r2, [r3, #0]
		break;
 8000872:	e003      	b.n	800087c <Get_Key+0x34c>
	while(done)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f47f ae60 	bne.w	800053c <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800087c:	2120      	movs	r1, #32
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <Get_Key+0x360>)
 8000880:	f001 fae3 	bl	8001e4a <HAL_GPIO_TogglePin>
	return(key);
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <Get_Key+0x364>)
 8000886:	781b      	ldrb	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020000 	.word	0x40020000
 8000894:	20000080 	.word	0x20000080

08000898 <replaceCharsWithAsterisks>:
  /**
    * @brief  The application entry point.
    * @retval int
    */

  char* replaceCharsWithAsterisks(const char* input, int size) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
      // Allocate memory for the new array (+1 for the null terminator)
      char* result = (char*)malloc((size + 1) * sizeof(char));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fe60 	bl	800456c <malloc>
 80008ac:	4603      	mov	r3, r0
 80008ae:	60bb      	str	r3, [r7, #8]
      // Replace each char with an asterisk
      for (int i = 0; i < size; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e007      	b.n	80008c6 <replaceCharsWithAsterisks+0x2e>
          result[i] = '*';
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	4413      	add	r3, r2
 80008bc:	222a      	movs	r2, #42	; 0x2a
 80008be:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < size; i++) {
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf3      	blt.n	80008b6 <replaceCharsWithAsterisks+0x1e>
      }

      // Add null terminator at the end
      result[size] = '\0';
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

      return result;
 80008d8:	68bb      	ldr	r3, [r7, #8]
  }
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <main>:
  int main(void)
  {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80008ea:	f000 ffa1 	bl	8001830 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80008ee:	f000 f993 	bl	8000c18 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80008f2:	f000 fa57 	bl	8000da4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80008f6:	f000 fa2b 	bl	8000d50 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 80008fa:	f000 f9fb 	bl	8000cf4 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE BEGIN 2 */
      SSD1306_Init();
 80008fe:	f000 fb05 	bl	8000f0c <SSD1306_Init>
      SSD1306_GotoXY (0,0);
 8000902:	2100      	movs	r1, #0
 8000904:	2000      	movs	r0, #0
 8000906:	f000 fc6b 	bl	80011e0 <SSD1306_GotoXY>
      //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
      SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	49b7      	ldr	r1, [pc, #732]	; (8000bec <main+0x308>)
 800090e:	48b8      	ldr	r0, [pc, #736]	; (8000bf0 <main+0x30c>)
 8000910:	f000 fcfc 	bl	800130c <SSD1306_Puts>
      SSD1306_GotoXY (0, 30);
 8000914:	211e      	movs	r1, #30
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fc62 	bl	80011e0 <SSD1306_GotoXY>
      SSD1306_UpdateScreen();
 800091c:	f000 fbba 	bl	8001094 <SSD1306_UpdateScreen>
      SSD1306_UpdateScreen();
 8000920:	f000 fbb8 	bl	8001094 <SSD1306_UpdateScreen>
      HAL_Delay (500);
 8000924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000928:	f000 ffc4 	bl	80018b4 <HAL_Delay>
      /* USER CODE BEGIN 3 */
    /* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/

      // configure code //

      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800092c:	2120      	movs	r1, #32
 800092e:	48b1      	ldr	r0, [pc, #708]	; (8000bf4 <main+0x310>)
 8000930:	f001 fa8b 	bl	8001e4a <HAL_GPIO_TogglePin>

      // counter is used to replace user input with *
      int counter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34

      // We initialize the system here and let the user arm the system with his pwd
      // The user can have a pwd of 4 or 6 of length, to check that we make our loop
      // of max length 6
      for(int i = 0; i <= 6; i++){
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
 800093c:	e04e      	b.n	80009dc <main+0xf8>
        // key stores the current input of the user received by Get_Key()
        key = Get_Key();
 800093e:	f7ff fdf7 	bl	8000530 <Get_Key>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4bac      	ldr	r3, [pc, #688]	; (8000bf8 <main+0x314>)
 8000948:	701a      	strb	r2, [r3, #0]
        counter++;
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	3301      	adds	r3, #1
 800094e:	637b      	str	r3, [r7, #52]	; 0x34

        // Here we check if the user has finalized entering his pwd
        // -> finished entering pwd : press # and pwd must be of len 4/6 characters
        if(key == '#' && (strlen(hold) == 4 || strlen(hold) == 6)){
 8000950:	4ba9      	ldr	r3, [pc, #676]	; (8000bf8 <main+0x314>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b23      	cmp	r3, #35	; 0x23
 8000956:	d128      	bne.n	80009aa <main+0xc6>
 8000958:	48a8      	ldr	r0, [pc, #672]	; (8000bfc <main+0x318>)
 800095a:	f7ff fc63 	bl	8000224 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	2b04      	cmp	r3, #4
 8000962:	d005      	beq.n	8000970 <main+0x8c>
 8000964:	48a5      	ldr	r0, [pc, #660]	; (8000bfc <main+0x318>)
 8000966:	f7ff fc5d 	bl	8000224 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	2b06      	cmp	r3, #6
 800096e:	d11c      	bne.n	80009aa <main+0xc6>

          // We update the screen showing successfull arming and arm the system
          SSD1306_GotoXY (0, 30);
 8000970:	211e      	movs	r1, #30
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fc34 	bl	80011e0 <SSD1306_GotoXY>
          SSD1306_UpdateScreen();
 8000978:	f000 fb8c 	bl	8001094 <SSD1306_UpdateScreen>
          SSD1306_Puts ("ARME  ", &Font_11x18, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	499b      	ldr	r1, [pc, #620]	; (8000bec <main+0x308>)
 8000980:	489f      	ldr	r0, [pc, #636]	; (8000c00 <main+0x31c>)
 8000982:	f000 fcc3 	bl	800130c <SSD1306_Puts>
          SSD1306_UpdateScreen();
 8000986:	f000 fb85 	bl	8001094 <SSD1306_UpdateScreen>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000990:	489c      	ldr	r0, [pc, #624]	; (8000c04 <main+0x320>)
 8000992:	f001 fa41 	bl	8001e18 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	4899      	ldr	r0, [pc, #612]	; (8000c04 <main+0x320>)
 800099e:	f001 fa3b 	bl	8001e18 <HAL_GPIO_WritePin>
          armed = true;
 80009a2:	4b99      	ldr	r3, [pc, #612]	; (8000c08 <main+0x324>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]

          // We update the screen showing successfull arming and arm the system

          break;
 80009a8:	e01b      	b.n	80009e2 <main+0xfe>
        // We enter the 'else' statement


        else{
          // This concatenate what is in the key variable in the hold variable
          strcat(hold, &key);
 80009aa:	4993      	ldr	r1, [pc, #588]	; (8000bf8 <main+0x314>)
 80009ac:	4893      	ldr	r0, [pc, #588]	; (8000bfc <main+0x318>)
 80009ae:	f003 fe99 	bl	80046e4 <strcat>

          SSD1306_GotoXY (0, 30);
 80009b2:	211e      	movs	r1, #30
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fc13 	bl	80011e0 <SSD1306_GotoXY>
          SSD1306_UpdateScreen();
 80009ba:	f000 fb6b 	bl	8001094 <SSD1306_UpdateScreen>

          // Result is what will be shown to the user
          char* result = replaceCharsWithAsterisks(hold,counter);
 80009be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80009c0:	488e      	ldr	r0, [pc, #568]	; (8000bfc <main+0x318>)
 80009c2:	f7ff ff69 	bl	8000898 <replaceCharsWithAsterisks>
 80009c6:	6278      	str	r0, [r7, #36]	; 0x24
          SSD1306_Puts (result, &Font_11x18, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	4988      	ldr	r1, [pc, #544]	; (8000bec <main+0x308>)
 80009cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009ce:	f000 fc9d 	bl	800130c <SSD1306_Puts>
          SSD1306_UpdateScreen();
 80009d2:	f000 fb5f 	bl	8001094 <SSD1306_UpdateScreen>
      for(int i = 0; i <= 6; i++){
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	3301      	adds	r3, #1
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
 80009dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009de:	2b06      	cmp	r3, #6
 80009e0:	ddad      	ble.n	800093e <main+0x5a>
        }
      }

      key_2 = key;
 80009e2:	4b85      	ldr	r3, [pc, #532]	; (8000bf8 <main+0x314>)
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b89      	ldr	r3, [pc, #548]	; (8000c0c <main+0x328>)
 80009e8:	701a      	strb	r2, [r3, #0]
      while(1){

      char temp[6];

      // If the user has successfully armed the system
        if(armed == true){
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <main+0x324>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8086 	beq.w	8000b00 <main+0x21c>

          // We show that the system is armed by printing ARME on the screen

          counter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
          SSD1306_GotoXY (0, 30);
 80009f8:	211e      	movs	r1, #30
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fbf0 	bl	80011e0 <SSD1306_GotoXY>
          SSD1306_Clear();
 8000a00:	f000 fca9 	bl	8001356 <SSD1306_Clear>
          SSD1306_UpdateScreen();
 8000a04:	f000 fb46 	bl	8001094 <SSD1306_UpdateScreen>
          SSD1306_Puts ("ARME", &Font_11x18, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4978      	ldr	r1, [pc, #480]	; (8000bec <main+0x308>)
 8000a0c:	4880      	ldr	r0, [pc, #512]	; (8000c10 <main+0x32c>)
 8000a0e:	f000 fc7d 	bl	800130c <SSD1306_Puts>
          SSD1306_UpdateScreen();
 8000a12:	f000 fb3f 	bl	8001094 <SSD1306_UpdateScreen>

          // We show that the system is armed by printing ARME on the screen

          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a16:	2120      	movs	r1, #32
 8000a18:	4876      	ldr	r0, [pc, #472]	; (8000bf4 <main+0x310>)
 8000a1a:	f001 fa16 	bl	8001e4a <HAL_GPIO_TogglePin>


          HAL_Delay(1500);
 8000a1e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a22:	f000 ff47 	bl	80018b4 <HAL_Delay>

          SSD1306_GotoXY (0, 30);
 8000a26:	211e      	movs	r1, #30
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 fbd9 	bl	80011e0 <SSD1306_GotoXY>
          SSD1306_Clear();
 8000a2e:	f000 fc92 	bl	8001356 <SSD1306_Clear>
          SSD1306_UpdateScreen();
 8000a32:	f000 fb2f 	bl	8001094 <SSD1306_UpdateScreen>


          // We clear whatever is in the temp variable and set it basically to NULL
          memset(temp, '\0', sizeof(temp));
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fe48 	bl	80046d4 <memset>

          // We check again for user input
          // Here we let the user un-arm the system
          for(int i = 0; i <= 6; i++){
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	e056      	b.n	8000af8 <main+0x214>

            // This first part let the user enter his pwd that he did, and unarm the system

                key = Get_Key();
 8000a4a:	f7ff fd71 	bl	8000530 <Get_Key>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <main+0x314>)
 8000a54:	701a      	strb	r2, [r3, #0]
                counter++;
 8000a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a58:	3301      	adds	r3, #1
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34

                // If the confirmation key ('#') is entered and the
                // pwd is the same as the one previously entered
                // Then we can successfully unarm the system

                if(key == '#'){
 8000a5c:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <main+0x314>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b23      	cmp	r3, #35	; 0x23
 8000a62:	d10d      	bne.n	8000a80 <main+0x19c>

                  // the line 0 == strcmp(hold,temp) check if hold and temp are equal
                  // If so strcmp returns 0 which we check and if it is
                  // effectively true, our condition is true !

                  if(0 == strcmp(hold, temp))
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4864      	ldr	r0, [pc, #400]	; (8000bfc <main+0x318>)
 8000a6c:	f7ff fbd0 	bl	8000210 <strcmp>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f040 80b7 	bne.w	8000be6 <main+0x302>
                  armed = false;
 8000a78:	4b63      	ldr	r3, [pc, #396]	; (8000c08 <main+0x324>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
                  break;
 8000a7e:	e0b2      	b.n	8000be6 <main+0x302>
                }
              else if (key == hold[i]){
 8000a80:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <main+0x318>)
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	4413      	add	r3, r2
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b5b      	ldr	r3, [pc, #364]	; (8000bf8 <main+0x314>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d11b      	bne.n	8000ac8 <main+0x1e4>
                // If the confirmation key has not been entered but
                // the key entered by the user is similar to the ith character that
                // he is supposed to enter
                // We concat it and unarm the system

                strcat(temp, &key);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4958      	ldr	r1, [pc, #352]	; (8000bf8 <main+0x314>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fe24 	bl	80046e4 <strcat>
                armed = false;
 8000a9c:	4b5a      	ldr	r3, [pc, #360]	; (8000c08 <main+0x324>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
                SSD1306_GotoXY (0, 30);
 8000aa2:	211e      	movs	r1, #30
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fb9b 	bl	80011e0 <SSD1306_GotoXY>
                SSD1306_UpdateScreen();
 8000aaa:	f000 faf3 	bl	8001094 <SSD1306_UpdateScreen>
                // We don't forget to replace the actual input with *
                char* result = replaceCharsWithAsterisks(hold,counter);
 8000aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ab0:	4852      	ldr	r0, [pc, #328]	; (8000bfc <main+0x318>)
 8000ab2:	f7ff fef1 	bl	8000898 <replaceCharsWithAsterisks>
 8000ab6:	61f8      	str	r0, [r7, #28]
                SSD1306_Puts (result, &Font_11x18, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	494c      	ldr	r1, [pc, #304]	; (8000bec <main+0x308>)
 8000abc:	69f8      	ldr	r0, [r7, #28]
 8000abe:	f000 fc25 	bl	800130c <SSD1306_Puts>
                SSD1306_UpdateScreen();
 8000ac2:	f000 fae7 	bl	8001094 <SSD1306_UpdateScreen>
 8000ac6:	e014      	b.n	8000af2 <main+0x20e>
                // If the entry is not the confirmation key
                // and the entry is not similar to the ith character that
                // he is supposed to enter

                // We just concat it
                strcat(temp, &key);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	494a      	ldr	r1, [pc, #296]	; (8000bf8 <main+0x314>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 fe08 	bl	80046e4 <strcat>

                SSD1306_GotoXY (0, 30);
 8000ad4:	211e      	movs	r1, #30
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 fb82 	bl	80011e0 <SSD1306_GotoXY>
                SSD1306_UpdateScreen();
 8000adc:	f000 fada 	bl	8001094 <SSD1306_UpdateScreen>
                SSD1306_Puts (temp, &Font_11x18, 1);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4941      	ldr	r1, [pc, #260]	; (8000bec <main+0x308>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fc0f 	bl	800130c <SSD1306_Puts>
                SSD1306_UpdateScreen();
 8000aee:	f000 fad1 	bl	8001094 <SSD1306_UpdateScreen>
          for(int i = 0; i <= 6; i++){
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	3301      	adds	r3, #1
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	dda5      	ble.n	8000a4a <main+0x166>
 8000afe:	e774      	b.n	80009ea <main+0x106>
        // We give him another chance to do so after having the user wait for a small delay
        // We let the user know that the sys was not armed
        // By priting "NON-ARME"

        else {
          SSD1306_GotoXY (0, 30);
 8000b00:	211e      	movs	r1, #30
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 fb6c 	bl	80011e0 <SSD1306_GotoXY>
          SSD1306_Clear();
 8000b08:	f000 fc25 	bl	8001356 <SSD1306_Clear>
          SSD1306_UpdateScreen();
 8000b0c:	f000 fac2 	bl	8001094 <SSD1306_UpdateScreen>
          SSD1306_Puts ("NON-ARME", &Font_11x18, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	4936      	ldr	r1, [pc, #216]	; (8000bec <main+0x308>)
 8000b14:	483f      	ldr	r0, [pc, #252]	; (8000c14 <main+0x330>)
 8000b16:	f000 fbf9 	bl	800130c <SSD1306_Puts>
          SSD1306_UpdateScreen();
 8000b1a:	f000 fabb 	bl	8001094 <SSD1306_UpdateScreen>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // green LED
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b24:	4837      	ldr	r0, [pc, #220]	; (8000c04 <main+0x320>)
 8000b26:	f001 f977 	bl	8001e18 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // red LED
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b30:	4834      	ldr	r0, [pc, #208]	; (8000c04 <main+0x320>)
 8000b32:	f001 f971 	bl	8001e18 <HAL_GPIO_WritePin>


          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b36:	2120      	movs	r1, #32
 8000b38:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <main+0x310>)
 8000b3a:	f001 f986 	bl	8001e4a <HAL_GPIO_TogglePin>

          char temp[6];

          HAL_Delay(1500);
 8000b3e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b42:	f000 feb7 	bl	80018b4 <HAL_Delay>

          SSD1306_Clear();
 8000b46:	f000 fc06 	bl	8001356 <SSD1306_Clear>
          SSD1306_UpdateScreen();
 8000b4a:	f000 faa3 	bl	8001094 <SSD1306_UpdateScreen>

            memset(temp, '\0', sizeof(temp));
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2206      	movs	r2, #6
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fdbc 	bl	80046d4 <memset>
            char star[6];
            char ja = '*';
 8000b5c:	232a      	movs	r3, #42	; 0x2a
 8000b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            // Here we let the user arm the system again using the same method as above

          for(int i = 0; i <= 6; i++){
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b66:	e03a      	b.n	8000bde <main+0x2fa>
              key = Get_Key();
 8000b68:	f7ff fce2 	bl	8000530 <Get_Key>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <main+0x314>)
 8000b72:	701a      	strb	r2, [r3, #0]

              if(key == '#'){
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <main+0x314>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b23      	cmp	r3, #35	; 0x23
 8000b7a:	d118      	bne.n	8000bae <main+0x2ca>
                  if(0 == strcmp(hold, temp))
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	481e      	ldr	r0, [pc, #120]	; (8000bfc <main+0x318>)
 8000b84:	f7ff fb44 	bl	8000210 <strcmp>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <main+0x2b0>
                armed = true;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <main+0x324>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <main+0x320>)
 8000b9c:	f001 f93c 	bl	8001e18 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba6:	4817      	ldr	r0, [pc, #92]	; (8000c04 <main+0x320>)
 8000ba8:	f001 f936 	bl	8001e18 <HAL_GPIO_WritePin>

                break;
 8000bac:	e01c      	b.n	8000be8 <main+0x304>
              }
              else{
                strcat(temp, &key);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4911      	ldr	r1, [pc, #68]	; (8000bf8 <main+0x314>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fd95 	bl	80046e4 <strcat>
                SSD1306_GotoXY (0, 30);
 8000bba:	211e      	movs	r1, #30
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 fb0f 	bl	80011e0 <SSD1306_GotoXY>
                SSD1306_UpdateScreen();
 8000bc2:	f000 fa67 	bl	8001094 <SSD1306_UpdateScreen>

                SSD1306_Puts (temp, &Font_11x18, 1);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <main+0x308>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fb9c 	bl	800130c <SSD1306_Puts>
                SSD1306_UpdateScreen();
 8000bd4:	f000 fa5e 	bl	8001094 <SSD1306_UpdateScreen>
          for(int i = 0; i <= 6; i++){
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bda:	3301      	adds	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	ddc1      	ble.n	8000b68 <main+0x284>
 8000be4:	e701      	b.n	80009ea <main+0x106>
                  break;
 8000be6:	bf00      	nop
      while(1){
 8000be8:	e6ff      	b.n	80009ea <main+0x106>
 8000bea:	bf00      	nop
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	08004794 	.word	0x08004794
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	20000080 	.word	0x20000080
 8000bfc:	20000124 	.word	0x20000124
 8000c00:	080047a0 	.word	0x080047a0
 8000c04:	40020400 	.word	0x40020400
 8000c08:	2000012a 	.word	0x2000012a
 8000c0c:	20000120 	.word	0x20000120
 8000c10:	080047a8 	.word	0x080047a8
 8000c14:	080047b0 	.word	0x080047b0

08000c18 <SystemClock_Config>:
  /**
    * @brief System Clock Configuration
    * @retval None
    */
  void SystemClock_Config(void)
  {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	2234      	movs	r2, #52	; 0x34
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fd54 	bl	80046d4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <SystemClock_Config+0xd4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a29      	ldr	r2, [pc, #164]	; (8000cec <SystemClock_Config+0xd4>)
 8000c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <SystemClock_Config+0xd4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <SystemClock_Config+0xd8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <SystemClock_Config+0xd8>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <SystemClock_Config+0xd8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c80:	2310      	movs	r3, #16
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c84:	2302      	movs	r3, #2
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000c90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c94:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c96:	2304      	movs	r3, #4
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fa32 	bl	8003110 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x9e>
    {
      Error_Handler();
 8000cb2:	f000 f925 	bl	8000f00 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fea0 	bl	8002a18 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xca>
    {
      Error_Handler();
 8000cde:	f000 f90f 	bl	8000f00 <Error_Handler>
    }
  }
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <MX_I2C1_Init>:
    * @brief I2C1 Initialization Function
    * @param None
    * @retval None
    */
  static void MX_I2C1_Init(void)
  {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_I2C1_Init+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x58>)
 8000d02:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d32:	f001 f8a5 	bl	8001e80 <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x4c>
    {
      Error_Handler();
 8000d3c:	f000 f8e0 	bl	8000f00 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

  }
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000084 	.word	0x20000084
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	00061a80 	.word	0x00061a80

08000d50 <MX_USART2_UART_Init>:
    * @brief USART2 Initialization Function
    * @param None
    * @retval None
    */
  static void MX_USART2_UART_Init(void)
  {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART2_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d60:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d88:	f002 ff02 	bl	8003b90 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x46>
    {
      Error_Handler();
 8000d92:	f000 f8b5 	bl	8000f00 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

  }
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000d8 	.word	0x200000d8
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_GPIO_Init>:
    * @brief GPIO Initialization Function
    * @param None
    * @retval None
    */
  static void MX_GPIO_Init(void)
  {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a34      	ldr	r2, [pc, #208]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_GPIO_Init+0x128>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	4828      	ldr	r0, [pc, #160]	; (8000ed0 <MX_GPIO_Init+0x12c>)
 8000e30:	f000 fff2 	bl	8001e18 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, KC0_Pin|GPIO_PIN_13|GPIO_PIN_14|KC3_Pin
 8000e34:	2200      	movs	r2, #0
 8000e36:	f246 4138 	movw	r1, #25656	; 0x6438
 8000e3a:	4826      	ldr	r0, [pc, #152]	; (8000ed4 <MX_GPIO_Init+0x130>)
 8000e3c:	f000 ffec 	bl	8001e18 <HAL_GPIO_WritePin>
                            |KC1_Pin|KC2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : PA5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e40:	2320      	movs	r3, #32
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0x12c>)
 8000e58:	f000 fe32 	bl	8001ac0 <HAL_GPIO_Init>

    /*Configure GPIO pins : KC0_Pin PB13 PB14 KC3_Pin
                            KC1_Pin KC2_Pin */
    GPIO_InitStruct.Pin = KC0_Pin|GPIO_PIN_13|GPIO_PIN_14|KC3_Pin
 8000e5c:	f246 4338 	movw	r3, #25656	; 0x6438
 8000e60:	617b      	str	r3, [r7, #20]
                            |KC1_Pin|KC2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <MX_GPIO_Init+0x130>)
 8000e76:	f000 fe23 	bl	8001ac0 <HAL_GPIO_Init>

    /*Configure GPIO pin : KR1_Pin */
    GPIO_InitStruct.Pin = KR1_Pin;
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0x134>)
 8000e8e:	f000 fe17 	bl	8001ac0 <HAL_GPIO_Init>

    /*Configure GPIO pins : KR3_Pin KR2_Pin */
    GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <MX_GPIO_Init+0x12c>)
 8000ea8:	f000 fe0a 	bl	8001ac0 <HAL_GPIO_Init>

    /*Configure GPIO pin : KR0_Pin */
    GPIO_InitStruct.Pin = KR0_Pin;
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_GPIO_Init+0x130>)
 8000ec0:	f000 fdfe 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
  }
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800

08000edc <HAL_TIM_PeriodElapsedCallback>:
    * a global variable "uwTick" used as application time base.
    * @param  htim : TIM handle
    * @retval None
    */
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
      HAL_IncTick();
 8000eee:	f000 fcc1 	bl	8001874 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
  }
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40001000 	.word	0x40001000

08000f00 <Error_Handler>:
  /**
    * @brief  This function is executed in case of error occurrence.
    * @retval None
    */
  void Error_Handler(void)
  {
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f12:	f000 fa29 	bl	8001368 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f16:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2178      	movs	r1, #120	; 0x78
 8000f1e:	485b      	ldr	r0, [pc, #364]	; (800108c <SSD1306_Init+0x180>)
 8000f20:	f001 f9f0 	bl	8002304 <HAL_I2C_IsDeviceReady>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e0a9      	b.n	8001082 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f2e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f32:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f34:	e002      	b.n	8000f3c <SSD1306_Init+0x30>
		p--;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f9      	bne.n	8000f36 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f42:	22ae      	movs	r2, #174	; 0xae
 8000f44:	2100      	movs	r1, #0
 8000f46:	2078      	movs	r0, #120	; 0x78
 8000f48:	f000 fa8a 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2078      	movs	r0, #120	; 0x78
 8000f52:	f000 fa85 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f56:	2210      	movs	r2, #16
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2078      	movs	r0, #120	; 0x78
 8000f5c:	f000 fa80 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f60:	22b0      	movs	r2, #176	; 0xb0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2078      	movs	r0, #120	; 0x78
 8000f66:	f000 fa7b 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f6a:	22c8      	movs	r2, #200	; 0xc8
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2078      	movs	r0, #120	; 0x78
 8000f70:	f000 fa76 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2078      	movs	r0, #120	; 0x78
 8000f7a:	f000 fa71 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f7e:	2210      	movs	r2, #16
 8000f80:	2100      	movs	r1, #0
 8000f82:	2078      	movs	r0, #120	; 0x78
 8000f84:	f000 fa6c 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f88:	2240      	movs	r2, #64	; 0x40
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2078      	movs	r0, #120	; 0x78
 8000f8e:	f000 fa67 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f92:	2281      	movs	r2, #129	; 0x81
 8000f94:	2100      	movs	r1, #0
 8000f96:	2078      	movs	r0, #120	; 0x78
 8000f98:	f000 fa62 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2078      	movs	r0, #120	; 0x78
 8000fa2:	f000 fa5d 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fa6:	22a1      	movs	r2, #161	; 0xa1
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2078      	movs	r0, #120	; 0x78
 8000fac:	f000 fa58 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000fb0:	22a6      	movs	r2, #166	; 0xa6
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2078      	movs	r0, #120	; 0x78
 8000fb6:	f000 fa53 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000fba:	22a8      	movs	r2, #168	; 0xa8
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2078      	movs	r0, #120	; 0x78
 8000fc0:	f000 fa4e 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fc4:	223f      	movs	r2, #63	; 0x3f
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2078      	movs	r0, #120	; 0x78
 8000fca:	f000 fa49 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fce:	22a4      	movs	r2, #164	; 0xa4
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	; 0x78
 8000fd4:	f000 fa44 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fd8:	22d3      	movs	r2, #211	; 0xd3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2078      	movs	r0, #120	; 0x78
 8000fde:	f000 fa3f 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2078      	movs	r0, #120	; 0x78
 8000fe8:	f000 fa3a 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fec:	22d5      	movs	r2, #213	; 0xd5
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2078      	movs	r0, #120	; 0x78
 8000ff2:	f000 fa35 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ff6:	22f0      	movs	r2, #240	; 0xf0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	; 0x78
 8000ffc:	f000 fa30 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001000:	22d9      	movs	r2, #217	; 0xd9
 8001002:	2100      	movs	r1, #0
 8001004:	2078      	movs	r0, #120	; 0x78
 8001006:	f000 fa2b 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800100a:	2222      	movs	r2, #34	; 0x22
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	; 0x78
 8001010:	f000 fa26 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001014:	22da      	movs	r2, #218	; 0xda
 8001016:	2100      	movs	r1, #0
 8001018:	2078      	movs	r0, #120	; 0x78
 800101a:	f000 fa21 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800101e:	2212      	movs	r2, #18
 8001020:	2100      	movs	r1, #0
 8001022:	2078      	movs	r0, #120	; 0x78
 8001024:	f000 fa1c 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001028:	22db      	movs	r2, #219	; 0xdb
 800102a:	2100      	movs	r1, #0
 800102c:	2078      	movs	r0, #120	; 0x78
 800102e:	f000 fa17 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001032:	2220      	movs	r2, #32
 8001034:	2100      	movs	r1, #0
 8001036:	2078      	movs	r0, #120	; 0x78
 8001038:	f000 fa12 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800103c:	228d      	movs	r2, #141	; 0x8d
 800103e:	2100      	movs	r1, #0
 8001040:	2078      	movs	r0, #120	; 0x78
 8001042:	f000 fa0d 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001046:	2214      	movs	r2, #20
 8001048:	2100      	movs	r1, #0
 800104a:	2078      	movs	r0, #120	; 0x78
 800104c:	f000 fa08 	bl	8001460 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001050:	22af      	movs	r2, #175	; 0xaf
 8001052:	2100      	movs	r1, #0
 8001054:	2078      	movs	r0, #120	; 0x78
 8001056:	f000 fa03 	bl	8001460 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800105a:	222e      	movs	r2, #46	; 0x2e
 800105c:	2100      	movs	r1, #0
 800105e:	2078      	movs	r0, #120	; 0x78
 8001060:	f000 f9fe 	bl	8001460 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f843 	bl	80010f0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800106a:	f000 f813 	bl	8001094 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SSD1306_Init+0x184>)
 8001070:	2200      	movs	r2, #0
 8001072:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SSD1306_Init+0x184>)
 8001076:	2200      	movs	r2, #0
 8001078:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SSD1306_Init+0x184>)
 800107c:	2201      	movs	r2, #1
 800107e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000084 	.word	0x20000084
 8001090:	2000052c 	.word	0x2000052c

08001094 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e01d      	b.n	80010dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	3b50      	subs	r3, #80	; 0x50
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 f9d8 	bl	8001460 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 f9d3 	bl	8001460 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010ba:	2210      	movs	r2, #16
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 f9ce 	bl	8001460 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	01db      	lsls	r3, r3, #7
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <SSD1306_UpdateScreen+0x58>)
 80010ca:	441a      	add	r2, r3
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 f95f 	bl	8001394 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3301      	adds	r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d9de      	bls.n	80010a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000012c 	.word	0x2000012c

080010f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <SSD1306_Fill+0x14>
 8001100:	2300      	movs	r3, #0
 8001102:	e000      	b.n	8001106 <SSD1306_Fill+0x16>
 8001104:	23ff      	movs	r3, #255	; 0xff
 8001106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110a:	4619      	mov	r1, r3
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <SSD1306_Fill+0x2c>)
 800110e:	f003 fae1 	bl	80046d4 <memset>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000012c 	.word	0x2000012c

08001120 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
 800112a:	460b      	mov	r3, r1
 800112c:	80bb      	strh	r3, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	70fb      	strb	r3, [r7, #3]
	if (
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	2b7f      	cmp	r3, #127	; 0x7f
 8001136:	d848      	bhi.n	80011ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	2b3f      	cmp	r3, #63	; 0x3f
 800113c:	d845      	bhi.n	80011ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <SSD1306_DrawPixel+0xb8>)
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d11a      	bne.n	8001190 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	b298      	uxth	r0, r3
 8001162:	4603      	mov	r3, r0
 8001164:	01db      	lsls	r3, r3, #7
 8001166:	4413      	add	r3, r2
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <SSD1306_DrawPixel+0xbc>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	b25a      	sxtb	r2, r3
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	b25b      	sxtb	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b259      	sxtb	r1, r3
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	4603      	mov	r3, r0
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	4413      	add	r3, r2
 8001188:	b2c9      	uxtb	r1, r1
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <SSD1306_DrawPixel+0xbc>)
 800118c:	54d1      	strb	r1, [r2, r3]
 800118e:	e01d      	b.n	80011cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	b298      	uxth	r0, r3
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <SSD1306_DrawPixel+0xbc>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	4013      	ands	r3, r2
 80011b8:	b259      	sxtb	r1, r3
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	4603      	mov	r3, r0
 80011be:	01db      	lsls	r3, r3, #7
 80011c0:	4413      	add	r3, r2
 80011c2:	b2c9      	uxtb	r1, r1
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SSD1306_DrawPixel+0xbc>)
 80011c6:	54d1      	strb	r1, [r2, r3]
 80011c8:	e000      	b.n	80011cc <SSD1306_DrawPixel+0xac>
		return;
 80011ca:	bf00      	nop
	}
}
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000052c 	.word	0x2000052c
 80011dc:	2000012c 	.word	0x2000012c

080011e0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	80fb      	strh	r3, [r7, #6]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SSD1306_GotoXY+0x28>)
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <SSD1306_GotoXY+0x28>)
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	8053      	strh	r3, [r2, #2]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	2000052c 	.word	0x2000052c

0800120c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800121c:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <SSD1306_Putc+0xfc>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
	if (
 8001228:	2b7f      	cmp	r3, #127	; 0x7f
 800122a:	dc07      	bgt.n	800123c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <SSD1306_Putc+0xfc>)
 800122e:	885b      	ldrh	r3, [r3, #2]
 8001230:	461a      	mov	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001238:	2b3f      	cmp	r3, #63	; 0x3f
 800123a:	dd01      	ble.n	8001240 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800123c:	2300      	movs	r3, #0
 800123e:	e05e      	b.n	80012fe <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e04b      	b.n	80012de <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	3b20      	subs	r3, #32
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	7849      	ldrb	r1, [r1, #1]
 8001252:	fb01 f303 	mul.w	r3, r1, r3
 8001256:	4619      	mov	r1, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	440b      	add	r3, r1
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	e030      	b.n	80012cc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SSD1306_Putc+0xfc>)
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4413      	add	r3, r2
 8001284:	b298      	uxth	r0, r3
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <SSD1306_Putc+0xfc>)
 8001288:	885a      	ldrh	r2, [r3, #2]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff ff43 	bl	8001120 <SSD1306_DrawPixel>
 800129a:	e014      	b.n	80012c6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <SSD1306_Putc+0xfc>)
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	b298      	uxth	r0, r3
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <SSD1306_Putc+0xfc>)
 80012aa:	885a      	ldrh	r2, [r3, #2]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b299      	uxth	r1, r3
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	f7ff ff2d 	bl	8001120 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	3301      	adds	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d3c8      	bcc.n	800126a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	461a      	mov	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d3ad      	bcc.n	8001246 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <SSD1306_Putc+0xfc>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <SSD1306_Putc+0xfc>)
 80012fa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000052c 	.word	0x2000052c

0800130c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	4613      	mov	r3, r2
 8001318:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800131a:	e012      	b.n	8001342 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff71 	bl	800120c <SSD1306_Putc>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d002      	beq.n	800133c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	e008      	b.n	800134e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1e8      	bne.n	800131c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	781b      	ldrb	r3, [r3, #0]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fec8 	bl	80010f0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001360:	f7ff fe98 	bl	8001094 <SSD1306_UpdateScreen>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <ssd1306_I2C_Init+0x28>)
 8001370:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001372:	e002      	b.n	800137a <ssd1306_I2C_Init+0x12>
		p--;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	607b      	str	r3, [r7, #4]
	while(p>0)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	0003d090 	.word	0x0003d090

08001394 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b0c7      	sub	sp, #284	; 0x11c
 8001398:	af02      	add	r7, sp, #8
 800139a:	4604      	mov	r4, r0
 800139c:	4608      	mov	r0, r1
 800139e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80013a2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80013a6:	600a      	str	r2, [r1, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013b2:	4622      	mov	r2, r4
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013ba:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80013be:	4602      	mov	r2, r0
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013ca:	460a      	mov	r2, r1
 80013cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013da:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013e8:	e015      	b.n	8001416 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	441a      	add	r2, r3
 80013fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013fe:	3301      	adds	r3, #1
 8001400:	7811      	ldrb	r1, [r2, #0]
 8001402:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001406:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800140a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800140c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001410:	3301      	adds	r3, #1
 8001412:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001416:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800141a:	b29b      	uxth	r3, r3
 800141c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001420:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d8df      	bhi.n	80013ea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800142a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800142e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b299      	uxth	r1, r3
 8001436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800143a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b29b      	uxth	r3, r3
 8001444:	f107 020c 	add.w	r2, r7, #12
 8001448:	200a      	movs	r0, #10
 800144a:	9000      	str	r0, [sp, #0]
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <ssd1306_I2C_WriteMulti+0xc8>)
 800144e:	f000 fe5b 	bl	8002108 <HAL_I2C_Master_Transmit>
}
 8001452:	bf00      	nop
 8001454:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000084 	.word	0x20000084

08001460 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af02      	add	r7, sp, #8
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	460b      	mov	r3, r1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	b299      	uxth	r1, r3
 800147e:	f107 020c 	add.w	r2, r7, #12
 8001482:	230a      	movs	r3, #10
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2302      	movs	r3, #2
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <ssd1306_I2C_Write+0x38>)
 800148a:	f000 fe3d 	bl	8002108 <HAL_I2C_Master_Transmit>
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000084 	.word	0x20000084

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_MspInit+0x54>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_MspInit+0x54>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_MspInit+0x54>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_MspInit+0x54>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_MspInit+0x54>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_MspInit+0x54>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	210f      	movs	r1, #15
 80014de:	f06f 0001 	mvn.w	r0, #1
 80014e2:	f000 fac3 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_I2C_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_I2C_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001532:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_I2C_MspInit+0x8c>)
 8001550:	f000 fab6 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_I2C_MspInit+0x88>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_I2C_MspInit+0x88>)
 800155e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005400 	.word	0x40005400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12b      	bne.n	80015fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ee:	2307      	movs	r3, #7
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x8c>)
 80015fa:	f000 fa61 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_InitTick+0xe4>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_InitTick+0xe4>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_InitTick+0xe4>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001640:	f107 0210 	add.w	r2, r7, #16
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fafe 	bl	8002c4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	2b00      	cmp	r3, #0
 8001658:	d103      	bne.n	8001662 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800165a:	f001 facf 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800165e:	6378      	str	r0, [r7, #52]	; 0x34
 8001660:	e004      	b.n	800166c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001662:	f001 facb 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8001666:	4603      	mov	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_InitTick+0xe8>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	3b01      	subs	r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_InitTick+0xec>)
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <HAL_InitTick+0xf0>)
 800167e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_InitTick+0xec>)
 8001682:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001686:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_InitTick+0xec>)
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_InitTick+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_InitTick+0xec>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_InitTick+0xec>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016a0:	4817      	ldr	r0, [pc, #92]	; (8001700 <HAL_InitTick+0xec>)
 80016a2:	f001 ffd3 	bl	800364c <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d11b      	bne.n	80016ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <HAL_InitTick+0xec>)
 80016b6:	f002 f823 	bl	8003700 <HAL_TIM_Base_Start_IT>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016c8:	2036      	movs	r0, #54	; 0x36
 80016ca:	f000 f9eb 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d808      	bhi.n	80016e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	2036      	movs	r0, #54	; 0x36
 80016da:	f000 f9c7 	bl	8001a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_InitTick+0xf4>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e002      	b.n	80016ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	431bde83 	.word	0x431bde83
 8001700:	20000534 	.word	0x20000534
 8001704:	40001000 	.word	0x40001000
 8001708:	2000000c 	.word	0x2000000c

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM6_DAC_IRQHandler+0x10>)
 800173e:	f002 f84f 	bl	80037e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000534 	.word	0x20000534

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f002 ffd2 	bl	8004724 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20020000 	.word	0x20020000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	2000057c 	.word	0x2000057c
 80017b4:	20000b58 	.word	0x20000b58

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0xe>
 80017e0:	f7ff ffea 	bl	80017b8 <SystemInit>
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <LoopFillZerobss+0x12>)
 80017e6:	490d      	ldr	r1, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <LoopFillZerobss+0x1a>)
 80017ea:	2300      	movs	r3, #0
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:
 80017ee:	58d4      	ldr	r4, [r2, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:
 80017f4:	18c4      	adds	r4, r0, r3
 80017f6:	428c      	cmp	r4, r1
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopFillZerobss+0x1e>)
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <LoopFillZerobss+0x22>)
 80017fe:	2300      	movs	r3, #0
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:
 8001806:	42a2      	cmp	r2, r4
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>
 800180a:	f002 ff91 	bl	8004730 <__libc_init_array>
 800180e:	f7ff f869 	bl	80008e4 <main>
 8001812:	4770      	bx	lr
 8001814:	20020000 	.word	0x20020000
 8001818:	20000000 	.word	0x20000000
 800181c:	20000064 	.word	0x20000064
 8001820:	08005540 	.word	0x08005540
 8001824:	20000064 	.word	0x20000064
 8001828:	20000b58 	.word	0x20000b58

0800182c <ADC_IRQHandler>:
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 f8fc 	bl	8001a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f7ff fed8 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fe1a 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000010 	.word	0x20000010
 8001898:	20000580 	.word	0x20000580

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000580 	.word	0x20000580

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000010 	.word	0x20000010

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff4c 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7e:	f7ff ff61 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	6978      	ldr	r0, [r7, #20]
 8001a8a:	f7ff ffb1 	bl	80019f0 <NVIC_EncodePriority>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff80 	bl	800199c <__NVIC_SetPriority>
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff54 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e165      	b.n	8001da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8154 	bne.w	8001da2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80ae 	beq.w	8001da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <HAL_GPIO_Init+0x300>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a5c      	ldr	r2, [pc, #368]	; (8001dc0 <HAL_GPIO_Init+0x300>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_GPIO_Init+0x300>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_GPIO_Init+0x308>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d025      	beq.n	8001cda <HAL_GPIO_Init+0x21a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4e      	ldr	r2, [pc, #312]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01f      	beq.n	8001cd6 <HAL_GPIO_Init+0x216>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_GPIO_Init+0x310>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_GPIO_Init+0x314>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0x20e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4b      	ldr	r2, [pc, #300]	; (8001dd8 <HAL_GPIO_Init+0x318>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00d      	beq.n	8001cca <HAL_GPIO_Init+0x20a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <HAL_GPIO_Init+0x31c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x206>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_GPIO_Init+0x202>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00c      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	e00a      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e008      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cca:	2304      	movs	r3, #4
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e004      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x21c>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cec:	4935      	ldr	r1, [pc, #212]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9c:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	f67f ae96 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e001      	b.n	8001e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e12b      	b.n	80020ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fb24 	bl	80014f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ee4:	f000 fe8a 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d807      	bhi.n	8001f04 <HAL_I2C_Init+0x84>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <HAL_I2C_Init+0x278>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e006      	b.n	8001f12 <HAL_I2C_Init+0x92>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a7d      	ldr	r2, [pc, #500]	; (80020fc <HAL_I2C_Init+0x27c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0e7      	b.n	80020ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a78      	ldr	r2, [pc, #480]	; (8002100 <HAL_I2C_Init+0x280>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0c9b      	lsrs	r3, r3, #18
 8001f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d802      	bhi.n	8001f54 <HAL_I2C_Init+0xd4>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3301      	adds	r3, #1
 8001f52:	e009      	b.n	8001f68 <HAL_I2C_Init+0xe8>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	4a69      	ldr	r2, [pc, #420]	; (8002104 <HAL_I2C_Init+0x284>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	495c      	ldr	r1, [pc, #368]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d819      	bhi.n	8001fbc <HAL_I2C_Init+0x13c>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e59      	subs	r1, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_I2C_Init+0x138>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e59      	subs	r1, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb6:	e051      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e04f      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_I2C_Init+0x168>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e012      	b.n	800200e <HAL_I2C_Init+0x18e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x196>
 8002012:	2301      	movs	r3, #1
 8002014:	e022      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_I2C_Init+0x1bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e58      	subs	r0, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	440b      	add	r3, r1
 800202c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	e00f      	b.n	800205c <HAL_I2C_Init+0x1dc>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	0099      	lsls	r1, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	6809      	ldr	r1, [r1, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800208a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6911      	ldr	r1, [r2, #16]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	000186a0 	.word	0x000186a0
 80020f8:	001e847f 	.word	0x001e847f
 80020fc:	003d08ff 	.word	0x003d08ff
 8002100:	431bde83 	.word	0x431bde83
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	460b      	mov	r3, r1
 8002116:	817b      	strh	r3, [r7, #10]
 8002118:	4613      	mov	r3, r2
 800211a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fbbe 	bl	800189c <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	f040 80e0 	bne.w	80022f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2319      	movs	r3, #25
 8002136:	2201      	movs	r2, #1
 8002138:	4970      	ldr	r1, [pc, #448]	; (80022fc <HAL_I2C_Master_Transmit+0x1f4>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fa92 	bl	8002664 <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
 8002148:	e0d3      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x50>
 8002154:	2302      	movs	r3, #2
 8002156:	e0cc      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d007      	beq.n	800217e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2210      	movs	r2, #16
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_I2C_Master_Transmit+0x1f8>)
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f9ca 	bl	8002560 <I2C_MasterRequestWrite>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e08d      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ec:	e066      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fb50 	bl	8002898 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b04      	cmp	r3, #4
 8002204:	d107      	bne.n	8002216 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06b      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b04      	cmp	r3, #4
 8002256:	d11b      	bne.n	8002290 <HAL_I2C_Master_Transmit+0x188>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	6a39      	ldr	r1, [r7, #32]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fb47 	bl	8002928 <I2C_WaitOnBTFFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d107      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e01a      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d194      	bne.n	80021ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000

08002304 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff fac2 	bl	800189c <HAL_GetTick>
 8002318:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 8111 	bne.w	800254e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2319      	movs	r3, #25
 8002332:	2201      	movs	r2, #1
 8002334:	4988      	ldr	r1, [pc, #544]	; (8002558 <HAL_I2C_IsDeviceReady+0x254>)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f994 	bl	8002664 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
 8002344:	e104      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_I2C_IsDeviceReady+0x50>
 8002350:	2302      	movs	r3, #2
 8002352:	e0fd      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d007      	beq.n	800237a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2224      	movs	r2, #36	; 0x24
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a70      	ldr	r2, [pc, #448]	; (800255c <HAL_I2C_IsDeviceReady+0x258>)
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f952 	bl	8002664 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d4:	d103      	bne.n	80023de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0b6      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023e2:	897b      	ldrh	r3, [r7, #10]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fa53 	bl	800189c <HAL_GetTick>
 80023f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002426:	e025      	b.n	8002474 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7ff fa38 	bl	800189c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <HAL_I2C_IsDeviceReady+0x13a>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	22a0      	movs	r2, #160	; 0xa0
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2ba0      	cmp	r3, #160	; 0xa0
 800247e:	d005      	beq.n	800248c <HAL_I2C_IsDeviceReady+0x188>
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_I2C_IsDeviceReady+0x188>
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0cd      	beq.n	8002428 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d129      	bne.n	80024f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2319      	movs	r3, #25
 80024ce:	2201      	movs	r2, #1
 80024d0:	4921      	ldr	r1, [pc, #132]	; (8002558 <HAL_I2C_IsDeviceReady+0x254>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f8c6 	bl	8002664 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e036      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e02c      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002504:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800250e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	490f      	ldr	r1, [pc, #60]	; (8002558 <HAL_I2C_IsDeviceReady+0x254>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f8a2 	bl	8002664 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e012      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3301      	adds	r3, #1
 800252e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	f4ff af32 	bcc.w	800239e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00100002 	.word	0x00100002
 800255c:	ffff0000 	.word	0xffff0000

08002560 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	460b      	mov	r3, r1
 800256e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d006      	beq.n	800258a <I2C_MasterRequestWrite+0x2a>
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d003      	beq.n	800258a <I2C_MasterRequestWrite+0x2a>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002588:	d108      	bne.n	800259c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e00b      	b.n	80025b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	2b12      	cmp	r3, #18
 80025a2:	d107      	bne.n	80025b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f84f 	bl	8002664 <I2C_WaitOnFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	d103      	bne.n	80025e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e035      	b.n	8002654 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f0:	d108      	bne.n	8002604 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f2:	897b      	ldrh	r3, [r7, #10]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002600:	611a      	str	r2, [r3, #16]
 8002602:	e01b      	b.n	800263c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002604:	897b      	ldrh	r3, [r7, #10]
 8002606:	11db      	asrs	r3, r3, #7
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0306 	and.w	r3, r3, #6
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f063 030f 	orn	r3, r3, #15
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	490e      	ldr	r1, [pc, #56]	; (800265c <I2C_MasterRequestWrite+0xfc>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f898 	bl	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e010      	b.n	8002654 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <I2C_MasterRequestWrite+0x100>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f888 	bl	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	00010008 	.word	0x00010008
 8002660:	00010002 	.word	0x00010002

08002664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002674:	e048      	b.n	8002708 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d044      	beq.n	8002708 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7ff f90d 	bl	800189c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d139      	bne.n	8002708 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10d      	bne.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	43da      	mvns	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4013      	ands	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	e00c      	b.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	43da      	mvns	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d116      	bne.n	8002708 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e023      	b.n	8002750 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10d      	bne.n	800272e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	43da      	mvns	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	e00c      	b.n	8002748 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	43da      	mvns	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4013      	ands	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	429a      	cmp	r2, r3
 800274c:	d093      	beq.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002766:	e071      	b.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d123      	bne.n	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e067      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d041      	beq.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c8:	f7ff f868 	bl	800189c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d302      	bcc.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d136      	bne.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10c      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e00b      	b.n	800281a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e021      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10c      	bne.n	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e00b      	b.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	f47f af6d 	bne.w	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a4:	e034      	b.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f886 	bl	80029b8 <I2C_IsAcknowledgeFailed>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e034      	b.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d028      	beq.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7fe ffed 	bl	800189c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11d      	bne.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b80      	cmp	r3, #128	; 0x80
 80028e0:	d016      	beq.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e007      	b.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d1c3      	bne.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002934:	e034      	b.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f83e 	bl	80029b8 <I2C_IsAcknowledgeFailed>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e034      	b.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d028      	beq.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe ffa5 	bl	800189c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11d      	bne.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d016      	beq.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e007      	b.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d1c3      	bne.n	8002936 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d11b      	bne.n	8002a08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0204 	orr.w	r2, r3, #4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b68      	ldr	r3, [pc, #416]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d90c      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d044      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d119      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e067      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4934      	ldr	r1, [pc, #208]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fec8 	bl	800189c <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fec4 	bl	800189c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20c      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f887 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fd28 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08005518 	.word	0x08005518
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	2000000c 	.word	0x2000000c

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000008 	.word	0x20000008

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c00:	f7ff fff0 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	0a9b      	lsrs	r3, r3, #10
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	08005528 	.word	0x08005528

08002c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c28:	f7ff ffdc 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	0b5b      	lsrs	r3, r3, #13
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4903      	ldr	r1, [pc, #12]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40023800 	.word	0x40023800
 8002c48:	08005528 	.word	0x08005528

08002c4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	220f      	movs	r2, #15
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_RCC_GetClockConfig+0x60>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 020f 	and.w	r2, r3, #15
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40023c00 	.word	0x40023c00

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb4:	b0ae      	sub	sp, #184	; 0xb8
 8002cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd6:	4bcb      	ldr	r3, [pc, #812]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	f200 8206 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	080030f1 	.word	0x080030f1
 8002cf4:	080030f1 	.word	0x080030f1
 8002cf8:	080030f1 	.word	0x080030f1
 8002cfc:	08002d29 	.word	0x08002d29
 8002d00:	080030f1 	.word	0x080030f1
 8002d04:	080030f1 	.word	0x080030f1
 8002d08:	080030f1 	.word	0x080030f1
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	080030f1 	.word	0x080030f1
 8002d14:	080030f1 	.word	0x080030f1
 8002d18:	080030f1 	.word	0x080030f1
 8002d1c:	08002f21 	.word	0x08002f21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4bb9      	ldr	r3, [pc, #740]	; (8003008 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d26:	e1e7      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4bb8      	ldr	r3, [pc, #736]	; (800300c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d2e:	e1e3      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4bb4      	ldr	r3, [pc, #720]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3c:	4bb1      	ldr	r3, [pc, #708]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d071      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d48:	4bae      	ldr	r3, [pc, #696]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d6e:	4622      	mov	r2, r4
 8002d70:	462b      	mov	r3, r5
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	0159      	lsls	r1, r3, #5
 8002d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d80:	0150      	lsls	r0, r2, #5
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4621      	mov	r1, r4
 8002d88:	1a51      	subs	r1, r2, r1
 8002d8a:	6439      	str	r1, [r7, #64]	; 0x40
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002da0:	4649      	mov	r1, r9
 8002da2:	018b      	lsls	r3, r1, #6
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002daa:	4641      	mov	r1, r8
 8002dac:	018a      	lsls	r2, r1, #6
 8002dae:	4641      	mov	r1, r8
 8002db0:	1a51      	subs	r1, r2, r1
 8002db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db4:	4649      	mov	r1, r9
 8002db6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002dc8:	4649      	mov	r1, r9
 8002dca:	00cb      	lsls	r3, r1, #3
 8002dcc:	4641      	mov	r1, r8
 8002dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	00ca      	lsls	r2, r1, #3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4622      	mov	r2, r4
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30
 8002de2:	462b      	mov	r3, r5
 8002de4:	460a      	mov	r2, r1
 8002de6:	eb42 0303 	adc.w	r3, r2, r3
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002df8:	4629      	mov	r1, r5
 8002dfa:	024b      	lsls	r3, r1, #9
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e02:	4621      	mov	r1, r4
 8002e04:	024a      	lsls	r2, r1, #9
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e1c:	f7fd fa0a 	bl	8000234 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e2a:	e067      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b75      	ldr	r3, [pc, #468]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e46:	2300      	movs	r3, #0
 8002e48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4621      	mov	r1, r4
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e80:	4649      	mov	r1, r9
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	018a      	lsls	r2, r1, #6
 8002e8e:	4641      	mov	r1, r8
 8002e90:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e94:	4649      	mov	r1, r9
 8002e96:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eae:	4692      	mov	sl, r2
 8002eb0:	469b      	mov	fp, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	462b      	mov	r3, r5
 8002ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	028b      	lsls	r3, r1, #10
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed8:	4621      	mov	r1, r4
 8002eda:	028a      	lsls	r2, r1, #10
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002eee:	f7fd f9a1 	bl	8000234 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f1e:	e0eb      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b38      	ldr	r3, [pc, #224]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2c:	4b35      	ldr	r3, [pc, #212]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d06b      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f38:	4b32      	ldr	r3, [pc, #200]	; (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	2200      	movs	r2, #0
 8002f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0159      	lsls	r1, r3, #5
 8002f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f66:	0150      	lsls	r0, r2, #5
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	1a51      	subs	r1, r2, r1
 8002f70:	61b9      	str	r1, [r7, #24]
 8002f72:	4629      	mov	r1, r5
 8002f74:	eb63 0301 	sbc.w	r3, r3, r1
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f86:	4659      	mov	r1, fp
 8002f88:	018b      	lsls	r3, r1, #6
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f90:	4651      	mov	r1, sl
 8002f92:	018a      	lsls	r2, r1, #6
 8002f94:	4651      	mov	r1, sl
 8002f96:	ebb2 0801 	subs.w	r8, r2, r1
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	4623      	mov	r3, r4
 8002fba:	eb18 0303 	adds.w	r3, r8, r3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	024b      	lsls	r3, r1, #9
 8002fd8:	4621      	mov	r1, r4
 8002fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fde:	4621      	mov	r1, r4
 8002fe0:	024a      	lsls	r2, r1, #9
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fea:	2200      	movs	r2, #0
 8002fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff4:	f7fd f91e 	bl	8000234 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003002:	e065      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x420>
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400
 800300c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003010:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_RCC_GetSysClockFreq+0x458>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	2200      	movs	r2, #0
 8003018:	4618      	mov	r0, r3
 800301a:	4611      	mov	r1, r2
 800301c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003020:	653b      	str	r3, [r7, #80]	; 0x50
 8003022:	2300      	movs	r3, #0
 8003024:	657b      	str	r3, [r7, #84]	; 0x54
 8003026:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800302a:	4642      	mov	r2, r8
 800302c:	464b      	mov	r3, r9
 800302e:	f04f 0000 	mov.w	r0, #0
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	0159      	lsls	r1, r3, #5
 8003038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800303c:	0150      	lsls	r0, r2, #5
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4641      	mov	r1, r8
 8003044:	1a51      	subs	r1, r2, r1
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	4649      	mov	r1, r9
 800304a:	eb63 0301 	sbc.w	r3, r3, r1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800305c:	4659      	mov	r1, fp
 800305e:	018b      	lsls	r3, r1, #6
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003066:	4651      	mov	r1, sl
 8003068:	018a      	lsls	r2, r1, #6
 800306a:	4651      	mov	r1, sl
 800306c:	1a54      	subs	r4, r2, r1
 800306e:	4659      	mov	r1, fp
 8003070:	eb63 0501 	sbc.w	r5, r3, r1
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	00eb      	lsls	r3, r5, #3
 800307e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	4643      	mov	r3, r8
 800308a:	18e3      	adds	r3, r4, r3
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	464b      	mov	r3, r9
 8003090:	eb45 0303 	adc.w	r3, r5, r3
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a2:	4629      	mov	r1, r5
 80030a4:	028b      	lsls	r3, r1, #10
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ac:	4621      	mov	r1, r4
 80030ae:	028a      	lsls	r2, r1, #10
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b8:	2200      	movs	r2, #0
 80030ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80030bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030c2:	f7fd f8b7 	bl	8000234 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4613      	mov	r3, r2
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCC_GetSysClockFreq+0x458>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0f1b      	lsrs	r3, r3, #28
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ee:	e003      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_GetSysClockFreq+0x45c>)
 80030f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	37b8      	adds	r7, #184	; 0xb8
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400

08003110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e28d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8083 	beq.w	8003236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003130:	4b94      	ldr	r3, [pc, #592]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d019      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800313c:	4b91      	ldr	r3, [pc, #580]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003144:	2b08      	cmp	r3, #8
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003148:	4b8e      	ldr	r3, [pc, #568]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x124>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e25a      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x90>
 8003192:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7b      	ldr	r2, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xb4>
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fb5a 	bl	800189c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fb56 	bl	800189c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21f      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xdc>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fb46 	bl	800189c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fb42 	bl	800189c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e20b      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x104>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d06f      	beq.n	8003322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003242:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800324e:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1d3      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCC_OscConfig+0x278>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe faef 	bl	800189c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe faeb 	bl	800189c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1b4      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x278>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe face 	bl	800189c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe faca 	bl	800189c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e193      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0x27c>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe faae 	bl	800189c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe faaa 	bl	800189c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e173      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x234>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_OscConfig+0x27c>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fa97 	bl	800189c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe fa93 	bl	800189c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e15c      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b83      	ldr	r3, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7f      	ldr	r3, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a7e      	ldr	r2, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b7c      	ldr	r3, [pc, #496]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fa53 	bl	800189c <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe fa4f 	bl	800189c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e118      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x31e>
 8003420:	4b66      	ldr	r3, [pc, #408]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a65      	ldr	r2, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x340>
 8003436:	4b61      	ldr	r3, [pc, #388]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a60      	ldr	r2, [pc, #384]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 8003450:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a59      	ldr	r2, [pc, #356]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	4b57      	ldr	r3, [pc, #348]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fa14 	bl	800189c <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fa10 	bl	800189c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0d7      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x368>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe f9fe 	bl	800189c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe f9fa 	bl	800189c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0c1      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ad 	beq.w	800363c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d060      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d145      	bne.n	8003582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe f9ce 	bl	800189c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe f9ca 	bl	800189c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e093      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	071b      	lsls	r3, r3, #28
 800354e:	491b      	ldr	r1, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe f99f 	bl	800189c <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe f99b 	bl	800189c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e064      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x452>
 8003580:	e05c      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f988 	bl	800189c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe f984 	bl	800189c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
 80035ae:	e045      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e040      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c8:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <HAL_RCC_OscConfig+0x538>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d030      	beq.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d129      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d122      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d119      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d10f      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e041      	b.n	80036e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f839 	bl	80036ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 f9c0 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d001      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e04e      	b.n	80037b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d022      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d01d      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d018      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x80>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_TIM_Base_Start_IT+0xdc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b06      	cmp	r3, #6
 8003790:	d010      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	e007      	b.n	80037b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40010400 	.word	0x40010400
 80037d8:	40014000 	.word	0x40014000
 80037dc:	40001800 	.word	0x40001800

080037e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d020      	beq.n	8003844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01b      	beq.n	8003844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0202 	mvn.w	r2, #2
 8003814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8d2 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8c4 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8d5 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d020      	beq.n	8003890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0204 	mvn.w	r2, #4
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8ac 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f89e 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f8af 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0208 	mvn.w	r2, #8
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f886 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f878 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f889 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0210 	mvn.w	r2, #16
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2208      	movs	r2, #8
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f860 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f852 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f863 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0201 	mvn.w	r2, #1
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fac8 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f906 	bl	8003b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f834 	bl	80039fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0220 	mvn.w	r2, #32
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8d8 	bl	8003b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d00f      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a43      	ldr	r2, [pc, #268]	; (8003b40 <TIM_Base_SetConfig+0x130>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <TIM_Base_SetConfig+0x134>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a41      	ldr	r2, [pc, #260]	; (8003b48 <TIM_Base_SetConfig+0x138>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a35      	ldr	r2, [pc, #212]	; (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d027      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a32      	ldr	r2, [pc, #200]	; (8003b40 <TIM_Base_SetConfig+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d023      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <TIM_Base_SetConfig+0x134>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <TIM_Base_SetConfig+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d017      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <TIM_Base_SetConfig+0x140>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <TIM_Base_SetConfig+0x144>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <TIM_Base_SetConfig+0x148>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <TIM_Base_SetConfig+0x14c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <TIM_Base_SetConfig+0x150>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <TIM_Base_SetConfig+0x154>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d108      	bne.n	8003ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0xf8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800
 8003b5c:	40001800 	.word	0x40001800
 8003b60:	40001c00 	.word	0x40001c00
 8003b64:	40002000 	.word	0x40002000

08003b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e042      	b.n	8003c28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fce4 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f82b 	bl	8003c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c34:	b0c0      	sub	sp, #256	; 0x100
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	68d9      	ldr	r1, [r3, #12]
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	ea40 0301 	orr.w	r3, r0, r1
 8003c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c88:	f021 010c 	bic.w	r1, r1, #12
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c96:	430b      	orrs	r3, r1
 8003c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	6999      	ldr	r1, [r3, #24]
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	ea40 0301 	orr.w	r3, r0, r1
 8003cb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b8f      	ldr	r3, [pc, #572]	; (8003efc <UART_SetConfig+0x2cc>)
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d005      	beq.n	8003cd0 <UART_SetConfig+0xa0>
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d104      	bne.n	8003cda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cd0:	f7fe ffa8 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8003cd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cd8:	e003      	b.n	8003ce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7fe ff8f 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8003cde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cec:	f040 810c 	bne.w	8003f08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d02:	4622      	mov	r2, r4
 8003d04:	462b      	mov	r3, r5
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d12:	4621      	mov	r1, r4
 8003d14:	eb12 0801 	adds.w	r8, r2, r1
 8003d18:	4629      	mov	r1, r5
 8003d1a:	eb43 0901 	adc.w	r9, r3, r1
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d32:	4690      	mov	r8, r2
 8003d34:	4699      	mov	r9, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	eb18 0303 	adds.w	r3, r8, r3
 8003d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d40:	462b      	mov	r3, r5
 8003d42:	eb49 0303 	adc.w	r3, r9, r3
 8003d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d5e:	460b      	mov	r3, r1
 8003d60:	18db      	adds	r3, r3, r3
 8003d62:	653b      	str	r3, [r7, #80]	; 0x50
 8003d64:	4613      	mov	r3, r2
 8003d66:	eb42 0303 	adc.w	r3, r2, r3
 8003d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d74:	f7fc fa5e 	bl	8000234 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4b61      	ldr	r3, [pc, #388]	; (8003f04 <UART_SetConfig+0x2d4>)
 8003d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	011c      	lsls	r4, r3, #4
 8003d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	1891      	adds	r1, r2, r2
 8003d9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003da0:	415b      	adcs	r3, r3
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003da8:	4641      	mov	r1, r8
 8003daa:	eb12 0a01 	adds.w	sl, r2, r1
 8003dae:	4649      	mov	r1, r9
 8003db0:	eb43 0b01 	adc.w	fp, r3, r1
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc8:	4692      	mov	sl, r2
 8003dca:	469b      	mov	fp, r3
 8003dcc:	4643      	mov	r3, r8
 8003dce:	eb1a 0303 	adds.w	r3, sl, r3
 8003dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003df0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003df4:	460b      	mov	r3, r1
 8003df6:	18db      	adds	r3, r3, r3
 8003df8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
 8003e02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e0a:	f7fc fa13 	bl	8000234 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <UART_SetConfig+0x2d4>)
 8003e16:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2264      	movs	r2, #100	; 0x64
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	1acb      	subs	r3, r1, r3
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e2a:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <UART_SetConfig+0x2d4>)
 8003e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e38:	441c      	add	r4, r3
 8003e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	1891      	adds	r1, r2, r2
 8003e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e54:	415b      	adcs	r3, r3
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	1851      	adds	r1, r2, r1
 8003e60:	6339      	str	r1, [r7, #48]	; 0x30
 8003e62:	4649      	mov	r1, r9
 8003e64:	414b      	adcs	r3, r1
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e74:	4659      	mov	r1, fp
 8003e76:	00cb      	lsls	r3, r1, #3
 8003e78:	4651      	mov	r1, sl
 8003e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7e:	4651      	mov	r1, sl
 8003e80:	00ca      	lsls	r2, r1, #3
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	4642      	mov	r2, r8
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e90:	464b      	mov	r3, r9
 8003e92:	460a      	mov	r2, r1
 8003e94:	eb42 0303 	adc.w	r3, r2, r3
 8003e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ea8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	18db      	adds	r3, r3, r3
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	eb42 0303 	adc.w	r3, r2, r3
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ec6:	f7fc f9b5 	bl	8000234 <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <UART_SetConfig+0x2d4>)
 8003ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	2164      	movs	r1, #100	; 0x64
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	3332      	adds	r3, #50	; 0x32
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <UART_SetConfig+0x2d4>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	f003 0207 	and.w	r2, r3, #7
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4422      	add	r2, r4
 8003ef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ef8:	e106      	b.n	8004108 <UART_SetConfig+0x4d8>
 8003efa:	bf00      	nop
 8003efc:	40011000 	.word	0x40011000
 8003f00:	40011400 	.word	0x40011400
 8003f04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f1a:	4642      	mov	r2, r8
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	1891      	adds	r1, r2, r2
 8003f20:	6239      	str	r1, [r7, #32]
 8003f22:	415b      	adcs	r3, r3
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
 8003f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	1854      	adds	r4, r2, r1
 8003f2e:	4649      	mov	r1, r9
 8003f30:	eb43 0501 	adc.w	r5, r3, r1
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	00eb      	lsls	r3, r5, #3
 8003f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f42:	00e2      	lsls	r2, r4, #3
 8003f44:	4614      	mov	r4, r2
 8003f46:	461d      	mov	r5, r3
 8003f48:	4643      	mov	r3, r8
 8003f4a:	18e3      	adds	r3, r4, r3
 8003f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f50:	464b      	mov	r3, r9
 8003f52:	eb45 0303 	adc.w	r3, r5, r3
 8003f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f76:	4629      	mov	r1, r5
 8003f78:	008b      	lsls	r3, r1, #2
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f80:	4621      	mov	r1, r4
 8003f82:	008a      	lsls	r2, r1, #2
 8003f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f88:	f7fc f954 	bl	8000234 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4b60      	ldr	r3, [pc, #384]	; (8004114 <UART_SetConfig+0x4e4>)
 8003f92:	fba3 2302 	umull	r2, r3, r3, r2
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	011c      	lsls	r4, r3, #4
 8003f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fac:	4642      	mov	r2, r8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	1891      	adds	r1, r2, r2
 8003fb2:	61b9      	str	r1, [r7, #24]
 8003fb4:	415b      	adcs	r3, r3
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	1851      	adds	r1, r2, r1
 8003fc0:	6139      	str	r1, [r7, #16]
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	414b      	adcs	r3, r1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	00cb      	lsls	r3, r1, #3
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fde:	4651      	mov	r1, sl
 8003fe0:	00ca      	lsls	r2, r1, #3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4642      	mov	r2, r8
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	eb42 0303 	adc.w	r3, r2, r3
 8003ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	67bb      	str	r3, [r7, #120]	; 0x78
 8004006:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004014:	4649      	mov	r1, r9
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	4641      	mov	r1, r8
 800401a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800401e:	4641      	mov	r1, r8
 8004020:	008a      	lsls	r2, r1, #2
 8004022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004026:	f7fc f905 	bl	8000234 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4611      	mov	r1, r2
 8004030:	4b38      	ldr	r3, [pc, #224]	; (8004114 <UART_SetConfig+0x4e4>)
 8004032:	fba3 2301 	umull	r2, r3, r3, r1
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2264      	movs	r2, #100	; 0x64
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	1acb      	subs	r3, r1, r3
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	3332      	adds	r3, #50	; 0x32
 8004044:	4a33      	ldr	r2, [pc, #204]	; (8004114 <UART_SetConfig+0x4e4>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004050:	441c      	add	r4, r3
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	673b      	str	r3, [r7, #112]	; 0x70
 800405a:	677a      	str	r2, [r7, #116]	; 0x74
 800405c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004060:	4642      	mov	r2, r8
 8004062:	464b      	mov	r3, r9
 8004064:	1891      	adds	r1, r2, r2
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	415b      	adcs	r3, r3
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004070:	4641      	mov	r1, r8
 8004072:	1851      	adds	r1, r2, r1
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	4649      	mov	r1, r9
 8004078:	414b      	adcs	r3, r1
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004088:	4659      	mov	r1, fp
 800408a:	00cb      	lsls	r3, r1, #3
 800408c:	4651      	mov	r1, sl
 800408e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004092:	4651      	mov	r1, sl
 8004094:	00ca      	lsls	r2, r1, #3
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	4603      	mov	r3, r0
 800409c:	4642      	mov	r2, r8
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040a2:	464b      	mov	r3, r9
 80040a4:	460a      	mov	r2, r1
 80040a6:	eb42 0303 	adc.w	r3, r2, r3
 80040aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	663b      	str	r3, [r7, #96]	; 0x60
 80040b6:	667a      	str	r2, [r7, #100]	; 0x64
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040c4:	4649      	mov	r1, r9
 80040c6:	008b      	lsls	r3, r1, #2
 80040c8:	4641      	mov	r1, r8
 80040ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ce:	4641      	mov	r1, r8
 80040d0:	008a      	lsls	r2, r1, #2
 80040d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040d6:	f7fc f8ad 	bl	8000234 <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <UART_SetConfig+0x4e4>)
 80040e0:	fba3 1302 	umull	r1, r3, r3, r2
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	2164      	movs	r1, #100	; 0x64
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	3332      	adds	r3, #50	; 0x32
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <UART_SetConfig+0x4e4>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	f003 020f 	and.w	r2, r3, #15
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4422      	add	r2, r4
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800410e:	46bd      	mov	sp, r7
 8004110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004114:	51eb851f 	.word	0x51eb851f

08004118 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <SysTick_Handler+0x1c>)
 800411e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004120:	f000 f996 	bl	8004450 <xTaskGetSchedulerState>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d001      	beq.n	800412e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800412a:	f000 f9fd 	bl	8004528 <xPortSysTickHandler>
  }
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	e000e010 	.word	0xe000e010

08004138 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6852      	ldr	r2, [r2, #4]
 80041a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d103      	bne.n	80041b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	1e5a      	subs	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041de:	4b4f      	ldr	r3, [pc, #316]	; (800431c <xTaskIncrementTick+0x148>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 808f 	bne.w	8004306 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <xTaskIncrementTick+0x14c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041f0:	4a4b      	ldr	r2, [pc, #300]	; (8004320 <xTaskIncrementTick+0x14c>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d120      	bne.n	800423e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <xTaskIncrementTick+0x150>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskIncrementTick+0x46>
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <xTaskIncrementTick+0x150>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <xTaskIncrementTick+0x154>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3f      	ldr	r2, [pc, #252]	; (8004324 <xTaskIncrementTick+0x150>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <xTaskIncrementTick+0x154>)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b3e      	ldr	r3, [pc, #248]	; (800432c <xTaskIncrementTick+0x158>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a3d      	ldr	r2, [pc, #244]	; (800432c <xTaskIncrementTick+0x158>)
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	f000 f8e9 	bl	8004410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <xTaskIncrementTick+0x15c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d349      	bcc.n	80042dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <xTaskIncrementTick+0x150>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <xTaskIncrementTick+0x15c>)
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	601a      	str	r2, [r3, #0]
					break;
 800425a:	e03f      	b.n	80042dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <xTaskIncrementTick+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d203      	bcs.n	800427c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004274:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <xTaskIncrementTick+0x15c>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800427a:	e02f      	b.n	80042dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff7d 	bl	8004180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3318      	adds	r3, #24
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff74 	bl	8004180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <xTaskIncrementTick+0x160>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d903      	bls.n	80042ac <xTaskIncrementTick+0xd8>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <xTaskIncrementTick+0x160>)
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <xTaskIncrementTick+0x164>)
 80042ba:	441a      	add	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7ff ff38 	bl	8004138 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <xTaskIncrementTick+0x168>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d3b8      	bcc.n	8004248 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042da:	e7b5      	b.n	8004248 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <xTaskIncrementTick+0x168>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4915      	ldr	r1, [pc, #84]	; (8004338 <xTaskIncrementTick+0x164>)
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d901      	bls.n	80042f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <xTaskIncrementTick+0x16c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004300:	2301      	movs	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e004      	b.n	8004310 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <xTaskIncrementTick+0x170>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	4a0d      	ldr	r2, [pc, #52]	; (8004344 <xTaskIncrementTick+0x170>)
 800430e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004310:	697b      	ldr	r3, [r7, #20]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000a0c 	.word	0x20000a0c
 8004320:	200009f0 	.word	0x200009f0
 8004324:	200009e8 	.word	0x200009e8
 8004328:	200009ec 	.word	0x200009ec
 800432c:	20000a04 	.word	0x20000a04
 8004330:	20000a08 	.word	0x20000a08
 8004334:	200009f4 	.word	0x200009f4
 8004338:	20000588 	.word	0x20000588
 800433c:	20000584 	.word	0x20000584
 8004340:	20000a00 	.word	0x20000a00
 8004344:	200009fc 	.word	0x200009fc

08004348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <vTaskSwitchContext+0xb0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <vTaskSwitchContext+0xb4>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800435c:	e046      	b.n	80043ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <vTaskSwitchContext+0xb4>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <vTaskSwitchContext+0xb8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e010      	b.n	800438e <vTaskSwitchContext+0x46>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vTaskSwitchContext+0x40>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vTaskSwitchContext+0x3e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	491d      	ldr	r1, [pc, #116]	; (8004404 <vTaskSwitchContext+0xbc>)
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0e4      	beq.n	800436c <vTaskSwitchContext+0x24>
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <vTaskSwitchContext+0xbc>)
 80043ae:	4413      	add	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	3308      	adds	r3, #8
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d104      	bne.n	80043d2 <vTaskSwitchContext+0x8a>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <vTaskSwitchContext+0xc0>)
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <vTaskSwitchContext+0xb8>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <vTaskSwitchContext+0xc0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3354      	adds	r3, #84	; 0x54
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <vTaskSwitchContext+0xc4>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000a0c 	.word	0x20000a0c
 80043fc:	20000a00 	.word	0x20000a00
 8004400:	200009f4 	.word	0x200009f4
 8004404:	20000588 	.word	0x20000588
 8004408:	20000584 	.word	0x20000584
 800440c:	20000060 	.word	0x20000060

08004410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <prvResetNextTaskUnblockTime+0x38>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvResetNextTaskUnblockTime+0x3c>)
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004428:	e008      	b.n	800443c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <prvResetNextTaskUnblockTime+0x38>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <prvResetNextTaskUnblockTime+0x3c>)
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	200009e8 	.word	0x200009e8
 800444c:	20000a08 	.word	0x20000a08

08004450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <xTaskGetSchedulerState+0x34>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800445e:	2301      	movs	r3, #1
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	e008      	b.n	8004476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <xTaskGetSchedulerState+0x38>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800446c:	2302      	movs	r3, #2
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e001      	b.n	8004476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004476:	687b      	ldr	r3, [r7, #4]
	}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	200009f8 	.word	0x200009f8
 8004488:	20000a0c 	.word	0x20000a0c
 800448c:	00000000 	.word	0x00000000

08004490 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <pxCurrentTCBConst2>)
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	6808      	ldr	r0, [r1, #0]
 8004496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	f380 8809 	msr	PSP, r0
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8811 	msr	BASEPRI, r0
 80044aa:	4770      	bx	lr
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst2>:
 80044b0:	20000584 	.word	0x20000584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
	...

080044c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044c0:	f3ef 8009 	mrs	r0, PSP
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <pxCurrentTCBConst>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f01e 0f10 	tst.w	lr, #16
 80044d0:	bf08      	it	eq
 80044d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044e4:	f380 8811 	msr	BASEPRI, r0
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f7ff ff2a 	bl	8004348 <vTaskSwitchContext>
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f380 8811 	msr	BASEPRI, r0
 80044fc:	bc09      	pop	{r0, r3}
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	f01e 0f10 	tst.w	lr, #16
 800450a:	bf08      	it	eq
 800450c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004510:	f380 8809 	msr	PSP, r0
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst>:
 8004520:	20000584 	.word	0x20000584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
}
 8004540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004542:	f7ff fe47 	bl	80041d4 <xTaskIncrementTick>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <xPortSysTickHandler+0x40>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800455e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <malloc>:
 800456c:	4b02      	ldr	r3, [pc, #8]	; (8004578 <malloc+0xc>)
 800456e:	4601      	mov	r1, r0
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f000 b823 	b.w	80045bc <_malloc_r>
 8004576:	bf00      	nop
 8004578:	20000060 	.word	0x20000060

0800457c <sbrk_aligned>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4e0e      	ldr	r6, [pc, #56]	; (80045b8 <sbrk_aligned+0x3c>)
 8004580:	460c      	mov	r4, r1
 8004582:	6831      	ldr	r1, [r6, #0]
 8004584:	4605      	mov	r5, r0
 8004586:	b911      	cbnz	r1, 800458e <sbrk_aligned+0x12>
 8004588:	f000 f8bc 	bl	8004704 <_sbrk_r>
 800458c:	6030      	str	r0, [r6, #0]
 800458e:	4621      	mov	r1, r4
 8004590:	4628      	mov	r0, r5
 8004592:	f000 f8b7 	bl	8004704 <_sbrk_r>
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d00a      	beq.n	80045b0 <sbrk_aligned+0x34>
 800459a:	1cc4      	adds	r4, r0, #3
 800459c:	f024 0403 	bic.w	r4, r4, #3
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d007      	beq.n	80045b4 <sbrk_aligned+0x38>
 80045a4:	1a21      	subs	r1, r4, r0
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 f8ac 	bl	8004704 <_sbrk_r>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d101      	bne.n	80045b4 <sbrk_aligned+0x38>
 80045b0:	f04f 34ff 	mov.w	r4, #4294967295
 80045b4:	4620      	mov	r0, r4
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	20000a14 	.word	0x20000a14

080045bc <_malloc_r>:
 80045bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c0:	1ccd      	adds	r5, r1, #3
 80045c2:	f025 0503 	bic.w	r5, r5, #3
 80045c6:	3508      	adds	r5, #8
 80045c8:	2d0c      	cmp	r5, #12
 80045ca:	bf38      	it	cc
 80045cc:	250c      	movcc	r5, #12
 80045ce:	2d00      	cmp	r5, #0
 80045d0:	4607      	mov	r7, r0
 80045d2:	db01      	blt.n	80045d8 <_malloc_r+0x1c>
 80045d4:	42a9      	cmp	r1, r5
 80045d6:	d905      	bls.n	80045e4 <_malloc_r+0x28>
 80045d8:	230c      	movs	r3, #12
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	2600      	movs	r6, #0
 80045de:	4630      	mov	r0, r6
 80045e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046b8 <_malloc_r+0xfc>
 80045e8:	f000 f868 	bl	80046bc <__malloc_lock>
 80045ec:	f8d8 3000 	ldr.w	r3, [r8]
 80045f0:	461c      	mov	r4, r3
 80045f2:	bb5c      	cbnz	r4, 800464c <_malloc_r+0x90>
 80045f4:	4629      	mov	r1, r5
 80045f6:	4638      	mov	r0, r7
 80045f8:	f7ff ffc0 	bl	800457c <sbrk_aligned>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	4604      	mov	r4, r0
 8004600:	d155      	bne.n	80046ae <_malloc_r+0xf2>
 8004602:	f8d8 4000 	ldr.w	r4, [r8]
 8004606:	4626      	mov	r6, r4
 8004608:	2e00      	cmp	r6, #0
 800460a:	d145      	bne.n	8004698 <_malloc_r+0xdc>
 800460c:	2c00      	cmp	r4, #0
 800460e:	d048      	beq.n	80046a2 <_malloc_r+0xe6>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	4631      	mov	r1, r6
 8004614:	4638      	mov	r0, r7
 8004616:	eb04 0903 	add.w	r9, r4, r3
 800461a:	f000 f873 	bl	8004704 <_sbrk_r>
 800461e:	4581      	cmp	r9, r0
 8004620:	d13f      	bne.n	80046a2 <_malloc_r+0xe6>
 8004622:	6821      	ldr	r1, [r4, #0]
 8004624:	1a6d      	subs	r5, r5, r1
 8004626:	4629      	mov	r1, r5
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff ffa7 	bl	800457c <sbrk_aligned>
 800462e:	3001      	adds	r0, #1
 8004630:	d037      	beq.n	80046a2 <_malloc_r+0xe6>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	442b      	add	r3, r5
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	f8d8 3000 	ldr.w	r3, [r8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d038      	beq.n	80046b2 <_malloc_r+0xf6>
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	42a2      	cmp	r2, r4
 8004644:	d12b      	bne.n	800469e <_malloc_r+0xe2>
 8004646:	2200      	movs	r2, #0
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	e00f      	b.n	800466c <_malloc_r+0xb0>
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	1b52      	subs	r2, r2, r5
 8004650:	d41f      	bmi.n	8004692 <_malloc_r+0xd6>
 8004652:	2a0b      	cmp	r2, #11
 8004654:	d917      	bls.n	8004686 <_malloc_r+0xca>
 8004656:	1961      	adds	r1, r4, r5
 8004658:	42a3      	cmp	r3, r4
 800465a:	6025      	str	r5, [r4, #0]
 800465c:	bf18      	it	ne
 800465e:	6059      	strne	r1, [r3, #4]
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	bf08      	it	eq
 8004664:	f8c8 1000 	streq.w	r1, [r8]
 8004668:	5162      	str	r2, [r4, r5]
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	4638      	mov	r0, r7
 800466e:	f104 060b 	add.w	r6, r4, #11
 8004672:	f000 f829 	bl	80046c8 <__malloc_unlock>
 8004676:	f026 0607 	bic.w	r6, r6, #7
 800467a:	1d23      	adds	r3, r4, #4
 800467c:	1af2      	subs	r2, r6, r3
 800467e:	d0ae      	beq.n	80045de <_malloc_r+0x22>
 8004680:	1b9b      	subs	r3, r3, r6
 8004682:	50a3      	str	r3, [r4, r2]
 8004684:	e7ab      	b.n	80045de <_malloc_r+0x22>
 8004686:	42a3      	cmp	r3, r4
 8004688:	6862      	ldr	r2, [r4, #4]
 800468a:	d1dd      	bne.n	8004648 <_malloc_r+0x8c>
 800468c:	f8c8 2000 	str.w	r2, [r8]
 8004690:	e7ec      	b.n	800466c <_malloc_r+0xb0>
 8004692:	4623      	mov	r3, r4
 8004694:	6864      	ldr	r4, [r4, #4]
 8004696:	e7ac      	b.n	80045f2 <_malloc_r+0x36>
 8004698:	4634      	mov	r4, r6
 800469a:	6876      	ldr	r6, [r6, #4]
 800469c:	e7b4      	b.n	8004608 <_malloc_r+0x4c>
 800469e:	4613      	mov	r3, r2
 80046a0:	e7cc      	b.n	800463c <_malloc_r+0x80>
 80046a2:	230c      	movs	r3, #12
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4638      	mov	r0, r7
 80046a8:	f000 f80e 	bl	80046c8 <__malloc_unlock>
 80046ac:	e797      	b.n	80045de <_malloc_r+0x22>
 80046ae:	6025      	str	r5, [r4, #0]
 80046b0:	e7dc      	b.n	800466c <_malloc_r+0xb0>
 80046b2:	605b      	str	r3, [r3, #4]
 80046b4:	deff      	udf	#255	; 0xff
 80046b6:	bf00      	nop
 80046b8:	20000a10 	.word	0x20000a10

080046bc <__malloc_lock>:
 80046bc:	4801      	ldr	r0, [pc, #4]	; (80046c4 <__malloc_lock+0x8>)
 80046be:	f000 b85b 	b.w	8004778 <__retarget_lock_acquire_recursive>
 80046c2:	bf00      	nop
 80046c4:	20000b54 	.word	0x20000b54

080046c8 <__malloc_unlock>:
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <__malloc_unlock+0x8>)
 80046ca:	f000 b856 	b.w	800477a <__retarget_lock_release_recursive>
 80046ce:	bf00      	nop
 80046d0:	20000b54 	.word	0x20000b54

080046d4 <memset>:
 80046d4:	4402      	add	r2, r0
 80046d6:	4603      	mov	r3, r0
 80046d8:	4293      	cmp	r3, r2
 80046da:	d100      	bne.n	80046de <memset+0xa>
 80046dc:	4770      	bx	lr
 80046de:	f803 1b01 	strb.w	r1, [r3], #1
 80046e2:	e7f9      	b.n	80046d8 <memset+0x4>

080046e4 <strcat>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	4602      	mov	r2, r0
 80046e8:	7814      	ldrb	r4, [r2, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	3201      	adds	r2, #1
 80046ee:	2c00      	cmp	r4, #0
 80046f0:	d1fa      	bne.n	80046e8 <strcat+0x4>
 80046f2:	3b01      	subs	r3, #1
 80046f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046fc:	2a00      	cmp	r2, #0
 80046fe:	d1f9      	bne.n	80046f4 <strcat+0x10>
 8004700:	bd10      	pop	{r4, pc}
	...

08004704 <_sbrk_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4d06      	ldr	r5, [pc, #24]	; (8004720 <_sbrk_r+0x1c>)
 8004708:	2300      	movs	r3, #0
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	f7fd f81c 	bl	800174c <_sbrk>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_sbrk_r+0x1a>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_sbrk_r+0x1a>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	20000b50 	.word	0x20000b50

08004724 <__errno>:
 8004724:	4b01      	ldr	r3, [pc, #4]	; (800472c <__errno+0x8>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000060 	.word	0x20000060

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	; (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	; (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	; (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	; (8004774 <__libc_init_array+0x44>)
 8004744:	f000 f81a 	bl	800477c <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	08005538 	.word	0x08005538
 800476c:	08005538 	.word	0x08005538
 8004770:	08005538 	.word	0x08005538
 8004774:	0800553c 	.word	0x0800553c

08004778 <__retarget_lock_acquire_recursive>:
 8004778:	4770      	bx	lr

0800477a <__retarget_lock_release_recursive>:
 800477a:	4770      	bx	lr

0800477c <_init>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr

08004788 <_fini>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr
